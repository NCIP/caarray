<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>gov.nih.nci.caarray.upload</groupId>
	<artifactId>caupload</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>caUpload new and improved upload solution</name>
	<description>
         caUpload uses the preferred option of jQuery File Upload as a foundation but fall back to applet option (JUpload) for multiple file selection or 2GB+ files upload on the browsers that do not support it natively (IE)	
    </description>
	<url>http://nci.nih.gov</url>
	<issueManagement>
		<system>Sourceforge trackers</system>
		<url>https://sourceforge.net/tracker/?group_id=59144</url>
	</issueManagement>
	<developers>
		<developer>
			<id>etienne_sf</id>
			<name>Etienne</name>
			<email>etienne_sf@users.sourceforge.net</email>
			<url>https://sourceforge.net/users/etienne_sf</url>
			<roles>
				<role>Administrator</role>
			</roles>
		</developer>
		<developer>
			<id>felfert</id>
			<name>Fritz Elfert</name>
			<email>felfert@users.sourceforge.net</email>
			<url>https://sourceforge.net/users/felfert</url>
			<roles>
				<role>Developper (Felfert did a lot enhancement, but he is no more active)</role>
			</roles>
		</developer>
		<developer>
			<id>postb99</id>
			<name>Barbara Post</name>
			<email>postb99@users.sourceforge.net</email>
			<url>https://sourceforge.net/users/postb99</url>
			<roles>
				<role>Developper</role>
			</roles>
		</developer>
		<developer>
			<id>nordfalk</id>
			<name>Jacob Nordfalk</name>
			<email>nordfalk@users.sourceforge.net</email>
			<url>https://sourceforge.net/users/nordfalk</url>
			<roles>
				<role>Developper</role>
			</roles>
		</developer>
		<developer>
			<id>ehsavoie</id>
			<name>ehsavoie</name>
			<email>ehsavoie@users.sourceforge.net</email>
			<url>https://sourceforge.net/users/ehsavoie</url>
			<roles>
				<role>Developper</role>
			</roles>
		</developer>
		<developer>
			<id>bilbo_uk</id>
			<name>Geoff</name>
			<email>bilbo_uk@users.sourceforge.net</email>
			<url>https://sourceforge.net/users/bilbo_uk</url>
			<roles>
				<role>Developper</role>
			</roles>
		</developer>
	</developers>
	<licenses>
		<license>
			<name>GNU GPL V3</name>
			<url>http://www.gnu.org/licenses/gpl-3.0.html</url>
			<comments>This project is a standard open source project... So let's use a standard open source licence.</comments>
		</license>
	</licenses>
	<scm>
		<connection>scm:svn:https://jupload.svn.sourceforge.net/svnroot/jupload/tags/jupload-5.0.7</connection>
		<developerConnection>scm:svn:https://jupload.svn.sourceforge.net/svnroot/jupload/tags/jupload-5.0.7</developerConnection>
		<url>https://jupload.svn.sourceforge.net/svnroot/jupload/tags/jupload-5.0.7</url>
	</scm>
	<profiles>
		<profile>
			<!-- The generate-key is executed twice in the release:perform goal. So, we remove the generated keystore, 
				in the release:perform goal execution. This should be executed before the generate-key. So it will do 
				something ... only if generate-key is executed twice. -->
			<id>remove-keystore</id>
			<activation>
				<file>
					<missing>target/keystore</missing>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<phase>generate-sources</phase>
								<configuration>
									<tasks>
										<delete file="target/keystore" />
									</tasks>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>
		<profile>
			<!-- This profile generates a key, for applet signing. This key is only used if the user didn't define 
				the 'jupload.keystore.filename' property in its settings.xml file. -->
			<!-- See the HowTo compile, on JUpload site for details. -->
			<!-- See the generate-sign-key profile, here above, for use of this generated key. -->
			<id>generate-key</id>
			<activation>
				<file>
					<!-- Property biding is done after profile resulation. We need to 'hard-code' the file name, for 
						it to work. -->
					<missing>target/keystore</missing>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>keytool-maven-plugin</artifactId>
						<version>1.0</version>
						<!-- This plugin allows to locally generate a certificate, to sign the applet. See http://jupload.sourceforge.net/howto-compile.html -->
						<executions>
							<execution>
								<id>generate-demo-cert</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>genkey</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<alias>jupload</alias>
							<keystore>target/keystore</keystore>
							<storepass>jupload-demo-pass</storepass>
							<dname>cn=demo-jupload.sourceforge.net,ou=None,L=None,ST=None,o=JUpload,c=None</dname>
							<validity>180</validity> <!-- Six month is enough, for a demo certificate -->
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- This profile: (1) generates an assembly (which contains the official release for JUpload) and 
				(2) sign all the project artefacts with the user's PGP key. It is activated only when performing a release. -->
			<id>generate-jupload-release</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>2.2-beta-5</version>
						<configuration>
							<finalName>jupload</finalName>
							<descriptors>
								<descriptor>src/main/assembly/release.xml</descriptor>
							</descriptors>
						</configuration>
						<executions>
							<execution>
								<id>make-assembly</id> <!-- this is used for inheritance merges -->
								<phase>package</phase> <!-- append to the packaging phase. -->
								<goals>
									<goal>single</goal> <!-- goals == mojos -->
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.0</version>
						<executions>
							<execution>
								<id>gpg-sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
								<configuration>
									<passphrase>${jupload.pgp.passphrase}</passphrase>
									<keyname>${jupload.pgp.keyname}</keyname>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- The translate profile manages the language files. It actually executes the jupload-translation 
				maven plugin (available in this package, in the ./jupload-translation/ folder). This execution take the 
				source language files, in the ./src/main/lang/, and re-generates the ./src/main/resources/lang/* files. -->
			<!-- To activate it, you'll need to build the jupload-translation maven plugin, make it available 
				in your local repository (mvn install in the ./jupload-translation/ folder should be enough), and define 
				the jupload.translation property to true (by executing this command in the root jupload folder: mvn install 
				-Djupload.translation) -->
			<id>translate</id>
			<activation>
				<property>
					<name>jupload.translation</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>net.sf.jupload</groupId>
						<artifactId>maven-translation-plugin</artifactId>
						<version>1.1.0</version>
						<executions>
							<execution>
								<id>translate-generate-sources</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>translate</goal>
								</goals>
							</execution>
							<execution>
								<id>translate-pre-site</id>
								<phase>pre-site</phase>
								<goals>
									<goal>translate</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<docFileExtension>.apt</docFileExtension>
							<docFolder>src/site/apt</docFolder>
							<coppermineFolder>src/main/translation/coppermine.utf-8
							</coppermineFolder>
							<inputEncoding>UTF-16</inputEncoding>
							<inputFolder>src/main/translation/applet.utf-16</inputFolder>
							<resourceLangFolder>src/main/resources/lang</resourceLangFolder>
							<templateAvailableTranslation>src/main/translation/available_translations.template
							</templateAvailableTranslation>
							<templateOneTranslation>src/main/translation/one_translation.template
							</templateOneTranslation>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- This profile activate all reporting for the JUpload site. It's activated by default. It's main 
				use is ... that it can be deactivated. Useful, for checking the APT files rendering. Executing 'mvn site 
				-Dskip.reporting' will deactivate default profiles, and quickly generate the maven site, from the previously 
				run reports. -->
			<id>reporting</id>
			<activation>
				<property>
					<name>!skip.reporting</name>
				</property>
			</activation>
			<reporting>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>cobertura-maven-plugin</artifactId>
						<version>2.4</version>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-pmd-plugin</artifactId>
						<version>2.4</version>
						<configuration>
							<targetJdk>1.5</targetJdk>
							<rulesets>
								<ruleset>/rulesets/basic.xml</ruleset>
								<ruleset>/rulesets/controversial.xml</ruleset>
							</rulesets>
							<format>xml</format>
							<linkXref>true</linkXref>
							<sourceEncoding>utf-8</sourceEncoding>
							<minimumTokens>100</minimumTokens>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.7.2</version>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>2.6.1</version>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jxr-plugin</artifactId>
						<version>2.1</version>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-clover-plugin</artifactId>
						<version>2.4</version>
					</plugin>
					<!-- One of these plugins seem to generates an error, when executing the release:perform <plugin> 
						<groupId>org.codehaus.mojo</groupId> <artifactId>scmchangelog-maven-plugin</artifactId> <version>1.3</version> 
						</plugin> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-changelog-plugin</artifactId> 
						<version>2.1</version> </plugin> -->
					<!-- <plugin> Needs org.apache.maven.shared:maven-doxia-tools:jar:1.0.2, whose download doesn't 
						work, from my network ! <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-changes-plugin</artifactId> 
						<version>2.3</version> </plugin> -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>taglist-maven-plugin</artifactId>
						<version>2.4</version>
					</plugin>
				</plugins>
			</reporting>
		</profile>
	</profiles>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-net</groupId>
			<artifactId>commons-net</artifactId>
			<version>1.4.1</version>
		</dependency>
		<!-- classes netscape.javascript.* -->
		<dependency>
			<groupId>com.sun.runtime</groupId>
			<artifactId>java-plugin</artifactId>
			<version>1.5.0</version>
			<scope>system</scope>
			<systemPath>${java.home}/lib/plugin.jar</systemPath>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.13</version>
			<scope>test</scope>
		</dependency>
		<!-- Useless for the core applet. Used only to compile the jupload-translation plugin -->
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-plugin-api</artifactId>
			<version>2.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.8.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<finalName>wjhk.jupload</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
				<plugin>
					<!-- Bug with m2e : copy-dependencies generate an error message. This is a workaround. -->
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-dependency-plugin</artifactId>
										<versionRange>[2.0,)</versionRange>
										<goals>
											<goal>copy-dependencies</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>buildnumber-maven-plugin</artifactId>
					<version>1.0-beta-4</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.3.2</version>
					<configuration>
						<source>1.6</source>
						<target>1.6</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.0-beta-9</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.4.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.1.1</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.5</source>
					<target>1.5</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<configuration>
					<tagBase>https://jupload.svn.sourceforge.net/svnroot/jupload/tags
					</tagBase>
					<preparationGoals>clean site verify</preparationGoals>
					<goals>site deploy</goals>
					<releaseProfiles>generate-jupload-release</releaseProfiles>
					<!-- jupload.scm.username and jupload.scm.password should be defined in the 'jupload' Profile, in 
						your settings.xml -->
					<username>${jupload.scm.username}</username>
					<password>${jupload.scm.password}</password>
				</configuration>
			</plugin>
			<plugin>
				<!-- mvn ant:ant generates the build.xml for this project Caution: this will export the jupload.keystore.filename 
					and jupload.keystore.storepass properties, from your settings.xml to the build.properties file. MUST 
					BE CLEANED BEFORE COMMIT ! (because it contains your passwords) -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-ant-plugin</artifactId>
				<version>2.2</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<doCheck>false</doCheck>
					<doUpdate>false</doUpdate>
					<revisionOnScmFailure>true</revisionOnScmFailure>
					<locale>en</locale>
					<useLastCommittedRevision>true</useLastCommittedRevision>
				</configuration>
			</plugin>
			<plugin>
				<!-- Get the dependencies jar files to a common place, for jar signing -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies-site</id>
						<phase>site</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>runtime</includeScope>
							<outputDirectory>${project.build.directory}/site
							</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jarsigner-plugin</artifactId>
				<version>1.2</version>
				<executions>
					<execution>
						<!-- JUpload requires applet signing. The properties to sign the applet must be stored in your 
							local settings.xml, under the jupload profile. See documentation for details -->
						<id>sign-artefact</id>
						<phase>package</phase>
						<goals>
							<goal>sign</goal>
						</goals>
						<configuration>
							<alias>${jupload.keystore.alias}</alias>
							<keystore>${jupload.keystore.filename}</keystore>
							<storepass>${jupload.keystore.storepass}</storepass>
							<removeExistingSignatures>true</removeExistingSignatures>
						</configuration>
					</execution>
					<execution>
						<!-- JUpload web site requires that all dependencies are signed with the same key, in order to 
							work properly -->
						<id>sign-site</id>
						<phase>site</phase>
						<goals>
							<goal>sign</goal>
						</goals>
						<configuration>
							<alias>${jupload.keystore.alias}</alias>
							<keystore>${jupload.keystore.filename}</keystore>
							<storepass>${jupload.keystore.storepass}</storepass>
							<removeExistingSignatures>true</removeExistingSignatures>
							<archiveDirectory>${project.build.directory}/site
							</archiveDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>install-copy-resources-jupload-jar</id>
						<phase>install</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/site
							</outputDirectory>
							<nonFilteredFileExtensions>
								<nonFilteredFileExtension>jar</nonFilteredFileExtension>
							</nonFilteredFileExtensions>
							<resources>
								<resource>
									<directory>${project.build.directory}</directory>
									<includes>
										<include>*.jar</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>site-copy-resources-jupload-jar</id>
						<phase>site</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/site
							</outputDirectory>
							<nonFilteredFileExtensions>
								<nonFilteredFileExtension>jar</nonFilteredFileExtension>
							</nonFilteredFileExtensions>
							<resources>
								<resource>
									<directory>${project.build.directory}</directory>
									<includes>
										<include>*.jar</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>2.0.1</version>
				<configuration>
					<inputEncoding>UTF-8</inputEncoding>
					<outputEncoding>UTF-8</outputEncoding>
					<!-- templateFile>src/site/site.vm</templateFile -->
				</configuration>
			</plugin>
		</plugins>
	</build>
	<distributionManagement>
		<!-- We have no Maven repository yet. So release are to be deployed on a local repository.... TODO: 
			have a real repository. Publish to Maven Central Repository? -->
		<repository>
			<id>${jupload.distributionManagement.repository.id}</id>
			<name>${jupload.distributionManagement.repository.name}</name>
			<url>${jupload.distributionManagement.repository.url}</url>
		</repository>
		<snapshotRepository>
			<id>${jupload.distributionManagement.snapshotRepository.id}</id>
			<name>${jupload.distributionManagement.snapshotRepository.name}
			</name>
			<url>${jupload.distributionManagement.snapshotRepository.url}</url>
		</snapshotRepository>
		<!-- The next tag allows to easily update the JUpload site, hosted by sourceforge.net -->
		<site>
			<id>jupload.website</id>
			<name>JUpload Website</name>
			<url>sftp://web.sourceforge.net/home/groups/j/ju/jupload/htdocs/</url>
		</site>
	</distributionManagement>
	<properties>
		<!-- All these properties can (should) be overriden in your settings.xml file. See the http://jupload.sourceforge.net/howto-compile.html 
			page for details -->
		<!-- The next parameters are mandatory, for applet signing. Default behavior, in the pom, is to generate 
			these parameters, if you didn't define them in your settings.xml. So, they are optional in your settings. 
			If you don't define them, JUpload will use a generated keystore, with a certificate generated at compile 
			time. BUT: if you want to PUBLISH the applet to real life users, you SHOULD define them. See the howto-compile 
			on the JUpload site, for details -->
		<jupload.keystore.alias>jupload</jupload.keystore.alias>
		<jupload.keystore.filename>target/keystore</jupload.keystore.filename>
		<jupload.keystore.storepass>jupload-demo-pass
		</jupload.keystore.storepass>

		<!-- The next parameters are mandatory only for publishing Maven artefact to your repositories, that 
			is: when you use the "deploy" maven goal. Useless when you 'just' compile, that is: when you use the 
			'install' maven goal. There is currently no 'Central' jupload repository -->
		<jupload.distributionManagement.repository.id>Id_for_your_main_repository
		</jupload.distributionManagement.repository.id>
		<jupload.distributionManagement.repository.name>Name_for_your_main_repository
		</jupload.distributionManagement.repository.name>
		<jupload.distributionManagement.repository.url>URL_for_your_main_repository
		</jupload.distributionManagement.repository.url>
		<jupload.distributionManagement.snapshotRepository.id>Id_for_your_main_snapshotRepository
		</jupload.distributionManagement.snapshotRepository.id>
		<jupload.distributionManagement.snapshotRepository.name>Name_for_your_main_snapshotRepository
		</jupload.distributionManagement.snapshotRepository.name>
		<jupload.distributionManagement.snapshotRepository.url>URL_for_your_main_snapshotRepository
		</jupload.distributionManagement.snapshotRepository.url>

		<!-- The next parameters are mandatory only for PGP signing. PGP signing is used only when performing 
			a release, that is: when executing the goal release:perform Not used (so: optional) otherwise. PGP signing 
			is only used for developpers who would like to publish a new JUpload version to the Maven Central Repository. 
			For all other users, you can let skip to true. -->
		<jupload.pgp.keyname>Your PGP key name</jupload.pgp.keyname>
		<!-- The passphrase is optional: if not provided, it will be asked to the user -->
		<jupload.pgp.passphrase>Your PGP passphrase</jupload.pgp.passphrase>

		<!-- The next parameters are mandatory, only for use of the maven release plugin. Optionnal otherwise. 
			So for standard use of JUpload (without creating releases), you can let this parameter unchanged -->
		<jupload.scm.username>Your SCM login</jupload.scm.username>
		<jupload.scm.password>Your SCM password</jupload.scm.password>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<!-- Reporting: see the 'reporting' profile, here above. -->

</project>
 