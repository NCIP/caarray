options{  STATIC = false;}PARSER_BEGIN(RplaDatasetGrammarSradfSamplesSection)package gov.nih.nci.carpla.rplatab.sradf.javacc.generated;import java.io.*;import java.util.*;import gov.nih.nci.carpla.rplatab.*;import gov.nih.nci.carpla.rplatab.sradf.*;import gov.nih.nci.carpla.rplatab.model.*;import gov.nih.nci.carpla.rplatab.model.sradfheaders.*;import gov.nih.nci.carpla.rplatab.model.sradfheaders.interfaces.*;import gov.nih.nci.carpla.rplatab.sradf.javacc.src.*;public class RplaDatasetGrammarSradfSamplesSection{  //Vector<HeaderObj>objs = new Vector<HeaderObj>();private Vector<PrincipalNodeH>principals = new Vector<PrincipalNodeH>();  int column_index = 1;  SourceH bios_global = null;  SampleH biosample_global = null;  ProtocolRefH protocol_global = null;  PrintStream _ps = null;  public void setOutputStream(PrintStream ps){    _ps = ps;  }}PARSER_END(RplaDatasetGrammarSradfSamplesSection)// TO FIX: skipping tabs in this fashion will preclude detecting multiple number of tabsSKIP:{  "\t"}<DEFAULT>TOKEN:{  <CR_LF:"\r\n"  | "\n"  | "\r">}TOKEN:{  <LETTER:["A"-"Z", "a"-"z"]>}TOKEN: { <SPACE: " ">}TOKEN:{  <DIGIT:["0"-"9"]>}<DEFAULT>TOKEN:{  <STARTBRACKET:"[">:IN_BRACKET}<DEFAULT>TOKEN:{  <TEXT:~[]  | "\n">}//following should be all characters except bracket<IN_BRACKET>TOKEN:{  <IN_BRACKET_TEXT:(<LETTER>  | <DIGIT>  | "-"  | ","  | "."  | "_"  | ":")>:IN_BRACKET}<IN_BRACKET>TOKEN:{  <ENDBRACKET:"]">:DEFAULT}SamplesSectionHeaders parse():{}{          [		bioSource()		(bioSourceInformation())*		(protocol())+	]        	bioSample_SamplesSection()    (		bioSampleInformation()  |                (  protocol()  bioSample_SamplesSection() )    )*        [reporterGroup()]        (factorValue())*        eol()        //sample section data here                  {    SamplesSectionHeaders si = new SamplesSectionHeaders();    si.setPrincipalNodeHs(principals);    si.setNumberOfColumns(column_index-1);    return si;  }}//-------------------------------------------------------------------------void endSampleDelimiter():{}{  "END_SAMPLES_SECTION"{    column_index = 1;  }}//-------------------------------------------------------------------------void eol():{}{  <CR_LF>}//---------------------------------------------------------------------------------------------------FactorValueH factorValue():{  int startcol = column_index;  TermH factorvaluetermh = null;  UnitH unith = null;  TermSourceRefH termsourcerefh = null;}{  ("Factor Value")<STARTBRACKET>factorvaluetermh = factorValueTerm()<ENDBRACKET>{    column_index++;  }  [termsourcerefh = termSourceRef()][unith = unit()]{    FactorValueH factorvalueh = new FactorValueH();    factorvalueh.setColumn(startcol);    factorvalueh.setTermH(factorvaluetermh);    if (unith != null){      factorvalueh.setUnitH(unith);    }    if (termsourcerefh != null){      factorvalueh.setTermSourceRefH(termsourcerefh);    }    principals.add((PrincipalNodeH)factorvalueh);    return factorvalueh;  }}//---------------------------------------------------------------------------------------------------TermH factorValueTerm():{  Token head = null;  Token tail = null;}{  {    head = getToken(1);  }  (<IN_BRACKET_TEXT>)*{    TokenList tl = new TokenList(head, getToken(0));    //FactorValueTerm_H fvt = new FactorValueTerm_H();StringBuffer buffie = new StringBuffer();    for (Token p = head;    p != tail;    p = p.next){      buffie.append(p.image);    }    return new TermH((buffie.substring(0, buffie.length()-1)));  }}//---------------------------------------------------------------------------------------------------SourceH bioSource():{  int startcol = column_index;}{  {}"Source Name"{    column_index++;    bios_global = new SourceH();    bios_global.setColumn(startcol);    principals.add((PrincipalNodeH)bios_global);    return bios_global;  }}//-------------------------------------------------------------------------SampleH bioSample_SamplesSection():{  int startcol = column_index;}{  ("Sample Name"){    column_index++;    biosample_global = new SampleH();    biosample_global.setColumn(startcol);    principals.add((PrincipalNodeH)biosample_global);    return biosample_global;  }}//---------------------------------------------------------------------------------------------------void bioSourceInformation():{  CharacteristicH biosourcecharacteristich = null;  ProviderH providerh = null;  MaterialTypeH materialtypeh = null;  DescriptionH descriptionh = null;  CommentH commenth = null;}{  {}(biosourcecharacteristich = bioSourceCharacteristic()  | providerh = provider()  | materialtypeh = materialType()  | descriptionh = description()  | commenth = comment()){    if (descriptionh != null){      bios_global.setDescriptionH(descriptionh);    }    if (providerh != null){      bios_global.setProviderH(providerh);    }    if (commenth != null){      bios_global.setCommentH(commenth);    }    if (biosourcecharacteristich != null){      bios_global.addCharacteristicH(biosourcecharacteristich);    }    if (materialtypeh != null){      bios_global.setMaterialTypeH(materialtypeh);    }  }}//---------------------------------------------------------------------------------------------------void bioSampleInformation():{  CharacteristicH biosamplecharacteristich = null;  MaterialTypeH materialtypeh = null;  DescriptionH descriptionh = null;  CommentH commenth = null;}{  {}(biosamplecharacteristich = bioSampleCharacteristic()  | materialtypeh = materialType()  | descriptionh = description()  | commenth = comment()){    if (descriptionh != null){      biosample_global.setDescriptionH(descriptionh);    }    if (commenth != null){      biosample_global.setCommentH(commenth);    }    if (biosamplecharacteristich != null){      biosample_global.addCharacteristicH(biosamplecharacteristich);    }    if (materialtypeh != null){      biosample_global.setMaterialTypeH(materialtypeh);    }  }}//---------------------------------------------------------------------------------------------------CharacteristicH bioSourceCharacteristic():{  UnitH unith = null;  TermSourceRefH termsourcerefh = null;  TermH characteristictermh = null;  int startcol = column_index;}{  (("Characteristics"(<SPACE>)*<STARTBRACKET>characteristictermh = characteristicTerm()<ENDBRACKET>{    column_index++;  }  [termsourcerefh = termSourceRef()][unith = unit()])){    CharacteristicH biosourcecharacteristich = new CharacteristicH();    biosourcecharacteristich.setColumn(startcol);    biosourcecharacteristich.setTermH(characteristictermh);    if (termsourcerefh != null){      biosourcecharacteristich.setTermSourceRefH(termsourcerefh);    }    if (unith != null){      biosourcecharacteristich.setUnitH(unith);    }    return biosourcecharacteristich;  }}//---------------------------------------------------------------------------------------------------CharacteristicH bioSampleCharacteristic():{  UnitH unith = null;  TermSourceRefH termsourcerefh = null;  TermH characteristictermh = null;  int startcol = column_index;}{  (("Characteristics"(" ")*<STARTBRACKET>characteristictermh = characteristicTerm()<ENDBRACKET>{    column_index++;  }  [termsourcerefh = termSourceRef()][unith = unit()])){    CharacteristicH biosamplecharacteristich = new CharacteristicH();    biosamplecharacteristich.setColumn(startcol);    biosamplecharacteristich.setTermH(characteristictermh);    if (termsourcerefh != null){      biosamplecharacteristich.setTermSourceRefH(termsourcerefh);    }    if (unith != null){      biosamplecharacteristich.setUnitH(unith);    }    return biosamplecharacteristich;  }}//---------------------------------------------------------------------------------------------------MaterialTypeH materialType():{  TermSourceRefH termsourcerefh = null;  int startcol = column_index;}{  ("Material Type"{    column_index++;  }  termsourcerefh = termSourceRef()){    MaterialTypeH materialtypeh = new MaterialTypeH();    materialtypeh.setColumn(startcol);    column_index++;    materialtypeh.setTermSourceRefH(termsourcerefh);    return materialtypeh;  }}//---------------------------------------------------------------------------------------------------DescriptionH description():{  int startcol = column_index;}{  "Description"{    DescriptionH descriptionh = new DescriptionH();    descriptionh.setColumn(startcol);    column_index++;    return descriptionh;  }}//---------------------------------------------------------------------------------------------------ProviderH provider():{  Token head = null;  CommentH commenth = null;  int startcol = column_index;}{  {}"Provider"{    column_index++;  }  [commenth = comment()]{    ProviderH providerh = new ProviderH();    providerh.setColumn(startcol);    if (commenth != null){      providerh.setCommentH(commenth);    }    return providerh;  }}//---------------------------------------------------------------------------------------------------CommentH comment():{  int startcol = column_index;}{  {}"Comment"{    column_index++;    CommentH commenth = new CommentH();    commenth.setColumn(startcol);    return commenth;  }}//-------------------------------------------------------------------------TermH characteristicTerm():{  Token head = null;  Token tail = null;}{  {    head = getToken(1);  }  (<IN_BRACKET_TEXT>)*{    TokenList tl = new TokenList(head, getToken(0));    StringBuffer buffie = new StringBuffer();    for (Token p = head;    p != tail;    p = p.next){      buffie.append(p.image);    }    // ct.setTerm(buffie.substring(0, buffie.length()-1));return new TermH(buffie.substring(0, buffie.length()-1));  }}//-------------------------------------------------------------------------void protocol():{  protocol_global = new ProtocolRefH();  int startcol = column_index;}{  ("Protocol REF"){    column_index++;  }  (protocolInfo())*{    protocol_global.setColumn(startcol);    principals.add((PrincipalNodeH)protocol_global);  }}//-------------------------------------------------------------------------void protocolInfo():{  TermSourceRefH termsourcerefh = null;  ParameterValueH parametervalueh = null;  DateH dateh = null;  PerformerH performerh = null;  CommentH commenth = null;}{  (parametervalueh = parameterValue()  | dateh = date()  | performerh = performer()  | commenth = comment()  | termsourcerefh = termSourceRef()){    if (parametervalueh != null){      protocol_global.addParameterValueH(parametervalueh);    }    if (dateh != null){      protocol_global.setDateH(dateh);    }    if (performerh != null){      protocol_global.setPerformerH(performerh);    }    if (commenth != null){      protocol_global.setCommentH(commenth);    }  }}//-------------------------------------------------------------------------DateH date():{  int startcol = column_index;}{  "Date"{    DateH date = new DateH();    column_index++;    date.setColumn(startcol);    return date;  }}//-------------------------------------------------------------------------PerformerH performer():{  int startcol = column_index;}{  "Performer"{    PerformerH performer = new PerformerH();    column_index++;    performer.setColumn(startcol);    return performer;  }}//-------------------------------------------------------------------------ParameterValueH parameterValue():{  int startcol = column_index;  TermH pvt = null;  UnitH unith = null;  CommentH commenth = null;}{  ("Parameter Value"<STARTBRACKET>pvt = parameterValueTerm()<ENDBRACKET>){    column_index++;  }  [unith = unit()][commenth = comment()]{    ParameterValueH pv = new ParameterValueH();    pv.setTermH(pvt);    pv.setColumn(startcol);    if (unith != null){      pv.setUnitH(unith);    }    if (commenth != null){      pv.setCommentH(commenth);    }    return pv;  }}//-------------------------------------------------------------------------TermH parameterValueTerm():{  Token head = null;  Token tail = null;}{  {    head = getToken(1);  }  (<IN_BRACKET_TEXT>)*{    TokenList tl = new TokenList(head, getToken(0));    //ParameterValueTerm_H pvt = new ParameterValueTerm_H();StringBuffer buffie = new StringBuffer();    for (Token p = head;    p != tail;    p = p.next){      buffie.append(p.image);    }    //pvt.setTerm(buffie.substring(0,buffie.length()-1));return new TermH(buffie.substring(0, buffie.length()-1));  }}//-------------------------------------------------------------------------UnitH unit():{  TermH termh = null;  TermSourceRefH termsourcerefh = null;  int startcol = column_index;}{  {}("Unit")(" ")*<STARTBRACKET>termh = unitTypeTerm()<ENDBRACKET>{    column_index++;  }  termsourcerefh = termSourceRef(){    UnitH unith = new UnitH();    unith.setColumn(startcol);    unith.setTermH(termh);    unith.setTermSourceRefH(termsourcerefh);    return unith;  }}//--------------------------------------------------------------------------TermH unitTypeTerm():{  Token head = null;  Token tail = null;}{  {    head = getToken(1);  }  (<IN_BRACKET_TEXT>)*{    // UnitTypeTerm_H utt = new UnitTypeTerm_H();TokenList tl = new TokenList(head, getToken(0));    StringBuffer buffie = new StringBuffer();    for (Token p = head;    p != tail;    p = p.next){      buffie.append(p.image);    }    //utt.setTerm(buffie.substring(0,buffie.length()-1));return new TermH(buffie.substring(0, buffie.length()-1));  }}//--------------------------------------------------------------------------ReporterGroupH reporterGroup():{  int startcol = column_index;}{  "Reporter Group"{    ReporterGroupH rg = new ReporterGroupH();    column_index++;    rg.setColumn(startcol);    principals.add((PrincipalNodeH)rg);    return rg;  }}//--------------------------------------------------------------------------DilutionH dilution():{  int startcol = column_index;}{  "Dilution Value""Dilution Unit""Term Source REF"{    DilutionH dil = new DilutionH();    column_index++;    column_index++;    dil.setColumn(startcol);    principals.add((PrincipalNodeH)dil);    return dil;  }}//-------------------------------------------------------------------------TermSourceRefH termSourceRef():{  int startcol = column_index;}{  ("Term Source REF"){    column_index++;    TermSourceRefH termsourcerefh = new TermSourceRefH();    termsourcerefh.setColumn(startcol);    return (termsourcerefh);  }}