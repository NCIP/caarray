options{  STATIC = false;}PARSER_BEGIN(RplaDatasetGrammarSradfArrayDataSection)package gov.nih.nci.carpla.rplatab.sradf.javacc.generated;import java.io.*;import java.util.*;import gov.nih.nci.carpla.rplatab.*;import gov.nih.nci.carpla.rplatab.sradf.*;import gov.nih.nci.carpla.rplatab.model.*;import gov.nih.nci.carpla.rplatab.model.sradfheaders.*;import gov.nih.nci.carpla.rplatab.model.sradfheaders.interfaces.*;import gov.nih.nci.carpla.rplatab.sradf.javacc.src.*;import gov.nih.nci.carpla.rplatab.sradf.javacc.src.TokenList;public class RplaDatasetGrammarSradfArrayDataSection{  private  Vector<PrincipalNodeH> principals = new Vector<PrincipalNodeH>();  int column_index = 1;   ArrayDataProtocolH protocol_global = null;  ArrayDataSectionHeaders si = null;}PARSER_END(RplaDatasetGrammarSradfArrayDataSection)// TO FIX: skipping tabs in this fashion will preclude detecting multiple number of tabsSKIP:{  "\t"}<DEFAULT>TOKEN:{  <CR_LF:"\r\n"  | "\n"  | "\r">}TOKEN:{  <LETTER:["A"-"Z", "a"-"z"]>}TOKEN:{  <DIGIT:["0"-"9"]>}TOKEN: { <SPACE: " ">}<DEFAULT>TOKEN:{  <STARTBRACKET:"[">:IN_BRACKET}<DEFAULT>TOKEN:{  <TEXT:~[]  | "\n">}//following should be all characters except bracket<IN_BRACKET>TOKEN:{  <IN_BRACKET_TEXT:(<LETTER>  | <DIGIT>  | "-"  | ","  | "."  | "_"  | ":")>:IN_BRACKET}<IN_BRACKET>TOKEN:{  <ENDBRACKET:"]">:DEFAULT}//-------------------------------------------------------------------------ArrayDataSectionHeaders parse():{  si = new ArrayDataSectionHeaders();}{                arrayCreationProtocol() 	array_ArrayDataSection()	arrayHybridizationProtocol() 	antibody()	imageAcquisitionProtocol()  	imageFile()	[		(measuredArrayDataProtocol() measuredArrayDataFile()) 		(derivedArrayDataProtocol()  derivedArrayDataFile())*	]	(factorValue())* 	eol()               {     si.setPrincipalNodeHs(principals);si.setNumberOfColumns(column_index-1);    return si;  }}//-------------------------------------------------------------------------void endSampleDelimiter():{}{  "END_SAMPLES_SECTION"{    column_index = 1;  }}//-------------------------------------------------------------------------void endLocDelimiter():{}{  "END_ARRAYLOCATIONS_SECTION"{    column_index = 1;  }}//-------------------------------------------------------------------------void endArrayDataDelimiter():{}{  "END_ARRAYDATA_SECTION"}//-------------------------------------------------------------------------void eol():{}{  <CR_LF>}//---------------------------------------------------------------------------------------------------FactorValueH factorValue():{  int startcol = column_index;  TermH factorvaluetermh = null;  UnitH unith = null;  TermSourceRefH termsourcerefh = null;}{  ("Factor Value")<STARTBRACKET>factorvaluetermh = factorValueTerm()<ENDBRACKET>{    column_index++;  }  [termsourcerefh = termSourceRef()][unith = unit()]{    FactorValueH factorvalueh = new FactorValueH();    factorvalueh.setColumn(startcol);    factorvalueh.setTermH(factorvaluetermh);    if (unith != null){      factorvalueh.setUnitH(unith);    }    if (termsourcerefh != null){      factorvalueh.setTermSourceRefH(termsourcerefh);    }    principals.add((PrincipalNodeH)factorvalueh);    return factorvalueh;  }}//---------------------------------------------------------------------------------------------------TermH factorValueTerm():{  Token head = null;  Token tail = null;}{  {    head = getToken(1);  }  (<IN_BRACKET_TEXT>)*{    TokenList tl = new TokenList(head, getToken(0));    //FactorValueTerm_H fvt = new FactorValueTerm_H();    StringBuffer buffie = new StringBuffer();    for (Token p = head;    p != tail;    p = p.next){      buffie.append(p.image);    }    //fvt.setTerm(buffie.substring(0,buffie.length()-1));//return (fvt);return new TermH(buffie.substring(0, buffie.length()-1));  }}//---------------------------------------------------------------------------------------------------DescriptionH description():{  int startcol = column_index;}{  "Description"{    DescriptionH descriptionh = new DescriptionH();    descriptionh.setColumn(startcol);    column_index++;    return descriptionh;  }}//---------------------------------------------------------------------------------------------------CommentH comment():{  int startcol = column_index;}{  {}"Comment"{    column_index++;    CommentH commenth = new CommentH();    commenth.setColumn(startcol);    return commenth;  }}//-------------------------------------------------------------------------TermH characteristicTerm():{  Token head = null;  Token tail = null;}{  {    head = getToken(1);  }  (<IN_BRACKET_TEXT>)*{    TokenList tl = new TokenList(head, getToken(0));  //  TermH characteristicstermh = new TermH();    StringBuffer buffie = new StringBuffer();    for (Token p = head;    p != tail;    p = p.next){      buffie.append(p.image);    }    //   ct.setTerm(buffie.substring(0,buffie.length()-1));// return (ct);return new TermH(buffie.substring(0, buffie.length()-1));  }}//-------------------------------------------------------------------------void protocol():{  protocol_global = new ArrayDataProtocolH();  int startcol = column_index;}{  ("Protocol REF"){    column_index++;   }  (protocolInfo())*{    protocol_global.setColumn(startcol);    principals.add((PrincipalNodeH)protocol_global);  }}//-------------------------------------------------------------------------void protocolInfo():{  TermSourceRefH termsourcerefh = null;  ParameterValueH parametervalueh = null;  DateH dateh = null;  PerformerH performerh = null;  CommentH commenth = null;}{  (parametervalueh = parameterValue()  | dateh = date()  | performerh = performer()  | commenth = comment()  | termsourcerefh = termSourceRef()){    if (parametervalueh != null){      protocol_global.getParameterValuesH().add(parametervalueh);    }    if (dateh != null){      protocol_global.setDateH(dateh);    }    if (performerh != null){      protocol_global.setPerformerH(performerh);    }    if (commenth != null){      protocol_global.setCommentH(commenth);    }  }}//-------------------------------------------------------------------------void arrayCreationProtocol():{  protocol_global = new ArrayDataProtocolH();  int startcol = column_index;}{  "ArrayCreationProtocol REF"{    column_index++;  }  (protocolInfo())*{  	protocol_global.setType(RplaConstants.ArrayDataProtocolType.ArrayCreation);    protocol_global.setColumn(startcol);    principals.add((PrincipalNodeH)protocol_global);  }}//--------------------------------------------------------------------------void arrayHybridizationProtocol():{  protocol_global = new ArrayDataProtocolH();  int startcol = column_index;}{  "ArrayHybridizationProtocol REF"{    column_index++;  }  (protocolInfo())*{  	protocol_global.setType(RplaConstants.ArrayDataProtocolType.ArrayHybridization);    protocol_global.setColumn(startcol);    principals.add((PrincipalNodeH)protocol_global);  }}//-------------------------------------------------------------------------void imageAcquisitionProtocol():{  protocol_global = new ArrayDataProtocolH();  int startcol = column_index;}{  "ImageAcquisitionProtocol REF"{    column_index++;  }  (protocolInfo())*{  	protocol_global.setType(RplaConstants.ArrayDataProtocolType.ImageAcquisition);    protocol_global.setColumn(startcol);    principals.add((PrincipalNodeH)protocol_global);  }}//-------------------------------------------------------------------------void measuredArrayDataProtocol():{  protocol_global = new ArrayDataProtocolH();  int startcol = column_index;}{  "MeasuredArrayDataProtocol REF"{    column_index++;  }  (protocolInfo())*{  	protocol_global.setType(RplaConstants.ArrayDataProtocolType.MeasuredArrayData);    protocol_global.setColumn(startcol);    principals.add((PrincipalNodeH)protocol_global);  }}//-------------------------------------------------------------------------void derivedArrayDataProtocol():{  protocol_global = new ArrayDataProtocolH();  int startcol = column_index;}{  "DerivedArrayDataProtocol REF"{    column_index++;  }  (protocolInfo())*{  	  	protocol_global.setType(RplaConstants.ArrayDataProtocolType.DerivedArrayData);    protocol_global.setColumn(startcol);    principals.add((PrincipalNodeH)protocol_global);  }}//-------------------------------------------------------------------------DateH date():{  int startcol = column_index;}{  "Date"{    DateH dateh = new DateH();    column_index++;    dateh.setColumn(startcol);    return dateh;  }}//-------------------------------------------------------------------------PerformerH performer():{  int startcol = column_index;}{  "Performer"{    PerformerH performerh = new PerformerH();    column_index++;    performerh.setColumn(startcol);    return performerh;  }}//-------------------------------------------------------------------------ParameterValueH parameterValue():{  int startcol = column_index;  TermH parametervaluetermh = null;  UnitH unith = null;  CommentH commenth = null;}{  ("Parameter Value"<STARTBRACKET> parametervaluetermh= parameterValueTerm()<ENDBRACKET>){    column_index++;  }  [unith = unit()][commenth = comment()]{    ParameterValueH parametervalueh = new ParameterValueH();    parametervalueh.setTermH(parametervaluetermh);    parametervalueh.setColumn(startcol);    if (unith != null){      parametervalueh.setUnitH(unith);    }    if (commenth != null){      parametervalueh.setCommentH(commenth);    }    return parametervalueh;  }}//-------------------------------------------------------------------------TermH parameterValueTerm():{  Token head = null;  Token tail = null;}{  {    head = getToken(1);  }  (<IN_BRACKET_TEXT>)*{    TokenList tl = new TokenList(head, getToken(0));    //TermH parametervaluetermh = new TermH();    StringBuffer buffie = new StringBuffer();    for (Token p = head;    p != tail;    p = p.next){      buffie.append(p.image);    }   // pvt.setTerm(buffie.substring(0, buffie.length()-1));   // return pvt;   return new TermH(buffie.substring(0, buffie.length()-1));  }}//-------------------------------------------------------------------------UnitH unit():{  TermH unittermh = null;  TermSourceRefH termsourcerefh = null;  int startcol = column_index;}{  {}("Unit")(<SPACE>)*<STARTBRACKET>unittermh= unitTypeTerm()<ENDBRACKET>{    column_index++;  }  termsourcerefh = termSourceRef(){    UnitH unith = new UnitH();    unith.setColumn(startcol);    unith.setTermH(unittermh);    unith.setTermSourceRefH(termsourcerefh);    return unith;  }}//--------------------------------------------------------------------------TermH unitTypeTerm():{  Token head = null;  Token tail = null;}{  {    head = getToken(1);  }  (<IN_BRACKET_TEXT>)*{    //TermH unittermh = new TermH();    TokenList tl = new TokenList(head, getToken(0));    StringBuffer buffie = new StringBuffer();    for (Token p = head;    p != tail;    p = p.next){      buffie.append(p.image);    }    //unittermh.setTerm(buffie.substring(0, buffie.length()-1));    //return utt;    return new TermH(buffie.substring(0, buffie.length()-1));  }}//--------------------------------------------------------------------------ReporterGroupH reporterGroup():{  int startcol = column_index;}{  "Reporter Group"{    ReporterGroupH reportergrouph = new ReporterGroupH();    column_index++;    reportergrouph.setColumn(startcol);    principals.add((PrincipalNodeH)reportergrouph);    return reportergrouph;  }}//--------------------------------------------------------------------------void array_ArrayDataSection():{}{  ("Array Name"){    RplArrayNameH arraynameh = new RplArrayNameH();    arraynameh.setColumn(column_index);    column_index++;    principals.add((PrincipalNodeH)arraynameh);  }}//-------------------------------------------------------------------------AntibodyNameH antibody():{  int startcol = column_index;}{  ("Antibody Name"){    column_index++;    AntibodyNameH antibodynameh = new AntibodyNameH();    antibodynameh.setColumn(startcol);    principals.add((PrincipalNodeH)antibodynameh);    return antibodynameh;  }}//-------------------------------------------------------------------------ImageFileH imageFile():{  CommentH commenth = null;  int startcol = column_index;}{  ("Image File"){    column_index++;  }  [commenth = comment()]{    ImageFileH imagefileh = new ImageFileH();    imagefileh.setColumn(startcol);    if (commenth != null){      imagefileh.setCommentH(commenth);    }    principals.add((PrincipalNodeH)imagefileh);    //  	si.getColNumbersWit hImageFiles().add(new Integer(startcol));return imagefileh;  }}//-------------------------------------------------------------------------ArrayDataFileH measuredArrayDataFile():{  CommentH commenth = null;  int startcol = column_index;}{  ("Array Data File"){    column_index++;  }  [comment()]{    ArrayDataFileH madf = new ArrayDataFileH();    madf.setType(RplaConstants.ArrayDataFileType.Measured);    madf.setColumn(startcol);    if (commenth != null){      madf.setCommentH(commenth);    }    //	si.getColNumbersWithMe asuredArrayDataFiles().add(new Integer(startcol));principals.add((PrincipalNodeH)madf);    return madf;  }}//-------------------------------------------------------------------------void normalization():{}{  ("Normalization Name")[comment()]}//-------------------------------------------------------------------------ArrayDataFileH derivedArrayDataFile():{  CommentH commenth = null;  int startcol = column_index;}{  ("Derived Array Data File"){    column_index++;  }  [commenth = comment()]{    ArrayDataFileH dadf = new ArrayDataFileH();    dadf.setType(RplaConstants.ArrayDataFileType.Derived);    dadf.setColumn(startcol);    if (commenth != null){      dadf.setCommentH(commenth);    }    //si.getColNumbersWithDerivedArrayDataFiles().add(new Integer(startcol));    principals.add((PrincipalNodeH)dadf);    return dadf;  }}//-------------------------------------------------------------------------TermSourceRefH termSourceRef():{  int startcol = column_index;}{  ("Term Source REF"){    column_index++;    TermSourceRefH termsourcerefh = new TermSourceRefH();    termsourcerefh.setColumn(startcol);    return (termsourcerefh);  }}