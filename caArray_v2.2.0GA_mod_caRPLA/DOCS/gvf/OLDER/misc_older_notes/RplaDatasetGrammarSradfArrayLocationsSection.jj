options{  STATIC = false;}PARSER_BEGIN(RplaDatasetGrammarSradfArrayLocationsSection)package gov.nih.nci.carpla.rplatab.sradf.javacc.generated;import java.io.*;import java.util.*;import gov.nih.nci.carpla.rplatab.*;import gov.nih.nci.carpla.rplatab.sradf.*;import gov.nih.nci.carpla.rplatab.model.*;import gov.nih.nci.carpla.rplatab.model.sradfheaders.*;import gov.nih.nci.carpla.rplatab.model.sradfheaders.interfaces.*;import gov.nih.nci.carpla.rplatab.sradf.javacc.src.*;import gov.nih.nci.carpla.rplatab.sradf.javacc.src.TokenList; public class RplaDatasetGrammarSradfArrayLocationsSection{  private Vector<PrincipalNodeH> principals = new Vector<PrincipalNodeH>();   int column_index = 1;          SampleH biosample_global = null;   }PARSER_END(RplaDatasetGrammarSradfArrayLocationsSection)// TO FIX: skipping tabs in this fashion will preclude detecting multiple number of tabsSKIP:{  "\t"}<DEFAULT>TOKEN:{  <CR_LF:"\r\n"  | "\n"  | "\r">}TOKEN: { <LETTER:	[ "A"-"Z", "a"-"z" ]>}	TOKEN: { <DIGIT:	[  "0"-"9"]>}TOKEN: { <SPACE: " ">}<DEFAULT>TOKEN:{  <STARTBRACKET:"[">:IN_BRACKET}<DEFAULT>TOKEN:{  <TEXT:~[]  | "\n">}//following should be all characters except bracket<IN_BRACKET>TOKEN:{  <IN_BRACKET_TEXT: (<LETTER>  | <DIGIT> | "-" | "," | "." | "_" | ":"  )>:IN_BRACKET }<IN_BRACKET>TOKEN:{  <ENDBRACKET:"]">:DEFAULT}//-------------------------------------------------------------------------ArrayLocationsSectionHeaders parse():{}{		  	array_ArrayLocationsSection()	loc()	bioSample_ArrayLocationsSection()	dilution()	[reporterGroup()]	eol()  	//array location section data here // 	endLocDelimiter()//	eol()    {  	  	ArrayLocationsSectionHeaders si = new ArrayLocationsSectionHeaders();  	    	  	si.setNumberOfColumns(column_index-1);  //	si.setTopLevelHeaderObjs(objs);  si.setPrincipalNodeHs(principals);  	return si;  	  }   } //-------------------------------------------------------------------------void endSampleDelimiter():{}{  "END_SAMPLES_SECTION"   {  	column_index = 1;  }}//-------------------------------------------------------------------------void endLocDelimiter():{}{  "END_ARRAYLOCATIONS_SECTION"  {  	column_index = 1;  }} //-------------------------------------------------------------------------void endArrayDataDelimiter():{}{  "END_ARRAYDATA_SECTION"}     //-------------------------------------------------------------------------void eol():{}{  <CR_LF>}        //---------------------------------------------------------------------------------------------------CommentH comment():{int startcol = column_index ;  }{  {     }  "Comment"{  	column_index++;  	CommentH commenth = new CommentH();  	commenth.setColumn(startcol);    return commenth;  }}//-------------------------------------------------------------------------TermH characteristicTerm():{Token head = null ;Token tail = null;}{			{ head = getToken( 1 ) ; }  (<IN_BRACKET_TEXT>)*  {    	TokenList tl = new TokenList( head, getToken(0) );    //CharacteristicTerm ct = new CharacteristicTerm();    StringBuffer buffie = new StringBuffer();    for( Token p = head ; p != tail ; p = p.next ) {        buffie.append(p.image) ;         }           //  ct.setTerm(buffie.substring(0,buffie.length()-1));   // return (ct);   return new TermH(buffie.substring(0,buffie.length()-1));  }}//-------------------------------------------------------------------------UnitH unit():{    TermH unittypetermh = null;  TermSourceRefH termsourcerefh = null;int startcol = column_index ;}{  {      }  ("Unit")(<SPACE>)*<STARTBRACKET>unittypetermh = unitTypeTerm()<ENDBRACKET>{column_index++;}termsourcerefh = termSourceRef(){    UnitH unith = new UnitH();       unith.setColumn(startcol);    unith.setTermH(unittypetermh);        unith.setTermSourceRefH(termsourcerefh);        return unith;  }}//--------------------------------------------------------------------------TermH unitTypeTerm():{Token head = null ;Token tail = null;}{		{ head = getToken( 1 ) ; }	  (<IN_BRACKET_TEXT>)*{  //  UnitTypeTerm utt = new UnitTypeTerm();        TokenList tl = new TokenList( head, getToken(0) );    	StringBuffer buffie = new StringBuffer();  	 for( Token p = head ; p != tail ; p = p.next ) {        buffie.append(p.image) ;         }           //  utt.setTerm(buffie.substring(0,buffie.length()-1));  //  return utt;  return new TermH(buffie.substring(0,buffie.length()-1));  }}//--------------------------------------------------------------------------RplArrayLocationH loc():{int startcol = column_index ;}{  "BlockColumn""BlockRow""Column""Row"  {  	column_index ++;column_index ++;column_index ++;column_index ++;  	RplArrayLocationH arraylocationh = new RplArrayLocationH();  	arraylocationh.setColumn(startcol);  	arraylocationh.setBlockColumnColumn(startcol);  	arraylocationh.setBlockRowColumn(startcol+1);  	arraylocationh.setColumnColumn(startcol+2);  	arraylocationh.setRowColumn(startcol+3);  	principals.add((PrincipalNodeH)arraylocationh);  	return arraylocationh;  	  }}//-------------------------------------------------------------------------SampleH bioSample_ArrayLocationsSection():{int startcol = column_index ;}{  ("Sample Name")  {column_index++;    biosample_global = new SampleH();       biosample_global.setColumn(startcol);       principals.add((PrincipalNodeH) biosample_global) ;    return biosample_global;  }    }//--------------------------------------------------------------------------ReporterGroupH reporterGroup():{int startcol = column_index ;}{  "Reporter Group"  {  	ReporterGroupH reportergrouph = new ReporterGroupH();  	column_index++;  	reportergrouph.setColumn(startcol);  	principals.add((PrincipalNodeH)reportergrouph);  	return reportergrouph;  	  }}//--------------------------------------------------------------------------DilutionH dilution():{int startcol = column_index ;}{  "Dilution Value""Dilution Unit""Term Source REF"  {  	DilutionH dilutionh = new DilutionH();  	column_index++;column_index++;column_index++;  	dilutionh.setColumn(startcol);  	UnitH unith = new UnitH();  	unith.setColumn(startcol+1);  	dilutionh.setUnitH(unith);  	TermSourceRefH termsourcerefh = new TermSourceRefH();  	termsourcerefh.setColumn(startcol+2);  	unith.setTermSourceRefH(termsourcerefh);  	principals.add((PrincipalNodeH)dilutionh);  	return dilutionh;  }}//--------------------------------------------------------------------------void array_ArrayLocationsSection():{}{  "Array Name"  {  	RplArrayNameH arraynameh= new RplArrayNameH();  	arraynameh.setColumn(column_index);  	column_index++;  	principals.add((PrincipalNodeH)arraynameh);  	  }}//-------------------------------------------------------------------------TermSourceRefH termSourceRef():{int startcol = column_index ;}{  ("Term Source REF"){  	column_index++;    TermSourceRefH termsourcerefh = new TermSourceRefH();   termsourcerefh.setColumn(startcol);    return (termsourcerefh);  }}