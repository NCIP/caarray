<%@ jet package="gov.nih.nci.codegen.core.template.jet" 
        class="BeanWS"
        skeleton="BeanSkel.skeleton" %>

<%
        Classifier klass = (Classifier)context.get("modelElement");
        String basePkg = (String)context.get("basePackage");
        String basePkg1 = null;
        String isAbstract = new String();

        if (klass.isAbstract()) {
          isAbstract="abstract";
        } 
        UmlClass superClass = UML13Utils.getSuperClass((UmlClass)klass);
	String superPkgName = null;
        if(superClass != null) {
            superPkgName = UML13Utils.getNamespaceName(UML13Utils.getPackage(UML13Utils.getModel(superClass), basePkg), superClass);
        }

        // Check if this class is an abstract class - does an "id" attribute exist for it or for one of its superclasses.
        // This will determine whether to generate the equals(), hashCode(), get<Association>() and set<Association>() methods.
        boolean isAbstractNoId = false;
        boolean mustImplementParentsAssociations = false;
	if(getIdAtt((UmlClass)klass) == null) {
          // Abstract class
          isAbstractNoId = true;
        } else {
          // Check if all parents of this class are abstract classes - If so, we will have to generate get<Association>
          // and set<Association>() methods for its parents' associations.
	  if(superClass != null) {
	    if(getIdAtt((UmlClass)superClass) == null) {
              // All parents are abstract
              mustImplementParentsAssociations = true;
            }
          }
        }
%>

package <%=UML13Utils.getNamespaceName(UML13Utils.getPackage(UML13Utils.getModel(klass), basePkg), klass)%>.ws;
import gov.nih.nci.system.applicationservice.*;
import java.util.*;
/**
 * <!-- LICENSE_TEXT_START -->
 * <!-- LICENSE_TEXT_END -->
 */

public <% if (isAbstract.equals("abstract")) {%> <%=isAbstract%><%}%> class <%=klass.getName()%> 
<% if(superClass != null){ %> extends <%=superPkgName%>.ws.<%=superClass.getName()%> <% } %>	
	implements java.io.Serializable
{
	private static final long serialVersionUID = 1234567890L;

	<% for(Iterator i = UML13Utils.getAttributes((UmlClass)klass).iterator(); i.hasNext();){ %>
	   <% Attribute att = (Attribute)i.next(); %>
	   <% String attTypeName = (getQualifiedName(att.getType(), basePkg).startsWith("."))?getQualifiedName(att.getType(), basePkg).substring(1):getQualifiedName(att.getType(), basePkg); %>	
	   <% // Convert Java primitive types to wrapper types. %>	
	   <% if (attTypeName.equals("byte")) attTypeName = "java.lang.Byte"; %>	
	   <% if (attTypeName.equals("short")) attTypeName = "java.lang.Short"; %>	
	   <% if (attTypeName.equals("int")) attTypeName = "java.lang.Integer"; %>	
	   <% if (attTypeName.equals("long")) attTypeName = "java.lang.Long"; %>	
	   <% if (attTypeName.equals("float")) attTypeName = "java.lang.Float"; %>	
	   <% if (attTypeName.equals("double")) attTypeName = "java.lang.Double"; %>	
	   <% if (attTypeName.equals("char")) attTypeName = "java.lang.Character"; %>	
	   <% if (attTypeName.equals("boolean")) attTypeName = "java.lang.Boolean"; %>	
	   <%=att.getVisibility().toString().substring(3)%> <%=attTypeName%> <%=att.getName()%>;
	   public <%=attTypeName%> get<%=capFirst(att.getName())%>(){
	      return <%=att.getName()%>;
	   }
	   
	   public void set<%=capFirst(att.getName())%>(<%=attTypeName%> <%=att.getName()%>) {
	      this.<%=att.getName()%> = <%=att.getName()%>;
	   }
	<% } %>

	<% for(Iterator i = UML13Utils.getAssociationEnds(klass).iterator(); i.hasNext();){%>
	   <% AssociationEnd thisEnd = (AssociationEnd)i.next(); %>
	   <% AssociationEnd otherEnd = (AssociationEnd)UML13Utils.getOtherAssociationEnd(thisEnd); %>
	   <% if(otherEnd.isNavigable()){ %>
	      <% if(UML13Utils.isMany2Many(thisEnd, otherEnd) || UML13Utils.isOne2Many(thisEnd, otherEnd)){ %>
			private java.util.Collection <%=otherEnd.getName()%> = new java.util.HashSet();
			public java.util.Collection get<%=capFirst(otherEnd.getName())%>(){
	              return <%=otherEnd.getName()%>;
	          }
			   
			   
			   
			   			   
	      <% } else if( UML13Utils.isMany2One(thisEnd, otherEnd) ){ %>
			
			<%
			String fullInterfaceName=getQualifiedName(otherEnd.getType(), basePkg);
		        String implName=fullInterfaceName.substring(fullInterfaceName.lastIndexOf(".")+1);
			String fullBeanName = fullInterfaceName.substring(0, fullInterfaceName.lastIndexOf("."))+".ws."+implName;
			%>
			
			
			private <%=fullBeanName%> <%=otherEnd.getName()%>;
			public <%=fullBeanName%> get<%=capFirst(otherEnd.getName())%>(){
			  return <%=otherEnd.getName()%>;
                        }
		   
	      <% }else if(UML13Utils.isOne2One(thisEnd, otherEnd)){ %>
<%
			String fullInterfaceName=getQualifiedName(otherEnd.getType(), basePkg);
		        String implName=fullInterfaceName.substring(fullInterfaceName.lastIndexOf(".")+1);
			String fullBeanName = fullInterfaceName.substring(0, fullInterfaceName.lastIndexOf("."))+".ws."+implName;
			%>
			
			
			private <%=fullBeanName%> <%=otherEnd.getName()%>;
			public <%=fullBeanName%> get<%=capFirst(otherEnd.getName())%>(){
			  return <%=otherEnd.getName()%>;			
                        }
                        
	      <% }else{ %>
		     <% if(true) throw new RuntimeException("Unknown association multiplicity: " + thisEnd.getType().getName() + "." + thisEnd.getName() + ".upper=" + ((MultiplicityRange)thisEnd.getMultiplicity().getRange().iterator().next()).getUpper() + ", " + otherEnd.getType().getName() + "." + otherEnd.getName() + ".upper=" + ((MultiplicityRange)otherEnd.getMultiplicity().getRange().iterator().next()).getUpper()); %>
	      <% } %>
	               
	   <% if(UML13Utils.isMany2Many(thisEnd, otherEnd) || UML13Utils.isOne2Many(thisEnd, otherEnd)){ %>
	   	public void set<%=capFirst(otherEnd.getName())%>(java.util.Collection <%=otherEnd.getName()%>){
	   		this.<%=otherEnd.getName()%> = <%=otherEnd.getName()%>;
	        }	
	   <% } else if(UML13Utils.isMany2One(thisEnd, otherEnd) || UML13Utils.isOne2One(thisEnd, otherEnd)){ %>
	   
	   <%
	   			String fullInterfaceName=getQualifiedName(otherEnd.getType(), basePkg);
	   		        String implName=fullInterfaceName.substring(fullInterfaceName.lastIndexOf(".")+1);
	   			String fullBeanName = fullInterfaceName.substring(0, fullInterfaceName.lastIndexOf("."))+".ws."+implName;
			%>
	   public void set<%=capFirst(otherEnd.getName())%>(<%=fullBeanName%> <%=otherEnd.getName()%>){
		this.<%=otherEnd.getName()%> = <%=otherEnd.getName()%>;
	   }	
	   <% } %>
	   <% }else{//end if otherEnd.isNavigable() %>
	   <% } %>
	<% } %>

<% if(!isAbstractNoId) { %>
		public boolean equals(Object obj){
			boolean eq = false;
			if(obj instanceof <%=klass.getName() %>) {
				<%=klass.getName() %> c =(<%=klass.getName() %>)obj; 			 
	                        <% String idAttTypeName = getIdAtt((UmlClass)klass).getType().getName(); %>	
	                        <% // Convert Java primitive types to wrapper types. %>	
	                        <% if (idAttTypeName.equals("byte")) idAttTypeName = "java.lang.Byte"; %>	
	                        <% if (idAttTypeName.equals("short")) idAttTypeName = "java.lang.Short"; %>	
	                        <% if (idAttTypeName.equals("int")) idAttTypeName = "java.lang.Integer"; %>	
	                        <% if (idAttTypeName.equals("long")) idAttTypeName = "java.lang.Long"; %>	
	                        <% if (idAttTypeName.equals("float")) idAttTypeName = "java.lang.Float"; %>	
	                        <% if (idAttTypeName.equals("double")) idAttTypeName = "java.lang.Double"; %>	
	                        <% if (idAttTypeName.equals("char")) idAttTypeName = "java.lang.Character"; %>	
	                        <% if (idAttTypeName.equals("boolean")) idAttTypeName = "java.lang.Boolean"; %>	
			        <%=idAttTypeName%> thisId = getId();		
			        <%if (isPrimitive(idAttTypeName)) {%>
				    if(thisId == c.getId()){
				       eq = true;
				    }
				 <% } else { %>
					if(thisId != null && thisId.equals(c.getId())) {
					   eq = true;
				    }		
				<% } %>
			}
			return eq;
		}
		
		public int hashCode(){
			int h = 0;
		        <%if (isPrimitive(idAttTypeName)) {%>
			 h += (new Long(getId())).hashCode();
			<% } else { %>
			if(getId() != null) {
				h += getId().hashCode();
			}
			<% } %>
			return h;
	}
<% } %>
	
	
}
