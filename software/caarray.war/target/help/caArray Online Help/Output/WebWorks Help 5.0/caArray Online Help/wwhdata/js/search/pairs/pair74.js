function FileData_Pairs(x)
{
x.t("example","sdrf");
x.t("protocols","characteristics");
x.t("combined","generate");
x.t("files","common");
x.t("describes","source");
x.t("describes","sources");
x.t("ambiguous","example");
x.t("source","hybridization");
x.t("source","sample");
x.t("source","hybridizations");
x.t("source","connected");
x.t("auto-generated","caarray");
x.t("auto-generated","node");
x.t("auto-generated","inserted");
x.t("auto-generated","extract");
x.t("referenced","sdrfs");
x.t("hybridization","chain");
x.t("hybridization","data");
x.t("missing","samples");
x.t("missing","sdrf");
x.t("sample","auto-generated");
x.t("sample","followed");
x.t("sample","extract");
x.t("explicitly","mentioned");
x.t("caarray","intelligently");
x.t("caarray","generates");
x.t("left","side");
x.t("associates","protocol");
x.t("followed","hybridizatioln");
x.t("followed","labeling");
x.t("hybridizatioln","labeling");
x.t("mage-tab","files");
x.t("mage-tab","idf");
x.t("mage-tab","sdrf");
x.t("mage-tab","data");
x.t("extracts","sample");
x.t("extracts","explicitly");
x.t("extracts","and/or");
x.t("labeling","protocol");
x.t("chain","protocols");
x.t("chain","caarray");
x.t("chain","sdrf");
x.t("chain","biomaterials");
x.t("complete","chain");
x.t("applies","protocol");
x.t("imported","mage-tab");
x.t("imported","biomaterial");
x.t("common","flows");
x.t("biomaterial","nodes");
x.t("association","biomaterial");
x.t("follows","mage-tab");
x.t("array","data");
x.t("idf","referenced");
x.t("ample","ata");
x.t("hybridizations","mage-tab");
x.t("flow","examples");
x.t("three","extracts");
x.t("present","source");
x.t("ata","elationships");
x.t("intermediate","nodes");
x.t("depend","left");
x.t("importing","mage-tab");
x.t("number","nodes");
x.t("side","flow");
x.t("represents","ample");
x.t("characteristics","present");
x.t("format","represents");
x.t("samples","auto-generated");
x.t("samples","extracts");
x.t("submitting","data");
x.t("node","note");
x.t("elationships","mage-tab");
x.t("connected","three");
x.t("sdrfs","sdrf");
x.t("whose","association");
x.t("sdrf","describes");
x.t("sdrf","source");
x.t("sdrf","auto-generated");
x.t("sdrf","imported");
x.t("sdrf","whose");
x.t("sdrf","data");
x.t("sdrf","contains");
x.t("and/or","labeled");
x.t("sources","combined");
x.t("represented","follows");
x.t("generated","depend");
x.t("generate","extract");
x.t("experiment","importing");
x.t("nodes","ambiguous");
x.t("nodes","missing");
x.t("nodes","complete");
x.t("nodes","generated");
x.t("data","array");
x.t("data","importing");
x.t("data","number");
x.t("data","format");
x.t("data","submitting");
x.t("data","experiment");
x.t("data","uploaded");
x.t("inserted","chain");
x.t("appropriate","auto-generated");
x.t("appropriate","intermediate");
x.t("examples","sdrf");
x.t("protocol","followed");
x.t("protocol","applications");
x.t("protocol","associated");
x.t("note","applies");
x.t("mentioned","source");
x.t("applications","sdrf");
x.t("applications","appropriate");
x.t("uploaded","validated");
x.t("portion","chain");
x.t("biomaterials","missing");
x.t("intelligently","associates");
x.t("associated","auto-generated");
x.t("labeled","extracts");
x.t("labeled","extract");
x.t("validated","imported");
x.t("generates","appropriate");
x.t("flows","represented");
x.t("extract","hybridization");
x.t("extract","samples");
x.t("extract","portion");
x.t("extract","labeled");
x.t("contains","sample");
}
