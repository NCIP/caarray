options{  STATIC = false;}//####################################################PARSER_BEGIN(RplaDatasetRplaIdfGrammar)package gov.nih.nci.carpla.rplatab.rplaidf.javacc.generated;import java.io.*;import java.util.*;import gov.nih.nci.carpla.rplatab.rplaidf.*;import gov.nih.nci.carpla.rplatab.rplaidf.javacc.src.*;public class RplaDatasetRplaIdfGrammar{  	  	private RplaIdfHelper 	_helper = null;  	  	private Token 			_header  = null ;  	private PrintStream 	_ps = null; 	 	public void setOutputStream(PrintStream ps){    	_ps = ps;  	}}PARSER_END(RplaDatasetRplaIdfGrammar)//####################################################TOKEN:{ <TAB:("\t")>}TOKEN:{<InvestigationTitle: "Investigation Title">}TOKEN:{<ExperimentalDesign: "Experimental Design">}TOKEN:{<ExperimentalDesignTermSourceRef: "Experimental Design Term Source REF">}TOKEN:{<ExperimentalFactorName: "Experimental Factor Name">}TOKEN:{<ExperimentalFactorType: "Experimental Factor Type">}TOKEN:{<ExperimentalFactorTermSourceREF: "Experimental Factor Term Source REF">}TOKEN:{<AntibodyName: "Antibody Name">}TOKEN:{<AntibodyTargetGeneName: "Antibody Target Gene Name">}TOKEN:{<AntibodyTargetGeneNameTermSourceRef: "Antibody Target Gene Name Term Source REF">}TOKEN:{<AntibodySpecificity: "Antibody Specificity">}TOKEN:{<AntibodyEpitope: "Antibody Epitope">}TOKEN:{<AntibodyImmunogen: "Antibody Immunogen">}TOKEN:{<AntibodyProvider: "Antibody Provider">}TOKEN:{<Dilution: "Dilution">}TOKEN:{<DilutionValue: "Dilution Value">}TOKEN:{<DilutionUnit: "Dilution Unit">}TOKEN:{<DilutionUnitTermSourceRef: "Dilution Unit Term Source REF">}TOKEN:{<AntibodyCatalogID: "Antibody Catalog ID">}TOKEN:{<AntibodyLotID: "Antibody Lot ID">}TOKEN:{<AntibodyComment: "Antibody Comment">}TOKEN:{<AntibodyDataSheetFile: "Antibody Data Sheet File">}TOKEN:{<RPLArrayName: "RPLArray Name">}TOKEN:{<PersonLastName: "Person Last Name">}TOKEN:{<PersonFirstName: "Person First Name">}TOKEN:{<PersonMidInitials: "Person Mid Initials">}TOKEN:{<PersonEmail: "Person Email">}TOKEN:{<PersonPhone: "Person Phone">}TOKEN:{<PersonFax: "Person Fax">}TOKEN:{<PersonAddress: "Person Address">}TOKEN:{<PersonAffiliation: "Person Affiliation">}TOKEN:{<PersonRoles: "Person Roles">}TOKEN:{<PersonRolesTermSourceREF: "Person Roles Term Source REF">}TOKEN:{<QualityControlType: "Quality Control Type">}TOKEN:{<QualityControlTermSourceREF: "Quality Control Term Source REF">}TOKEN:{<ReplicateType: "Replicate Type">}TOKEN:{<ReplicateTermSourceREF: "Replicate Term Source REF">}TOKEN:{<NormalizationType: "Normalization Type">}TOKEN:{<NormalizationTermSourceREF: "Normalization Term Source REF">}TOKEN:{<DateofExperiment: "Date of Experiment">}TOKEN:{<PublicReleaseDate: "Public Release Date">}TOKEN:{<PubMedID: "PubMed ID">}TOKEN:{<PublicationDOI: "Publication DOI">}TOKEN:{<PublicationAuthorList: "Publication Author List">}TOKEN:{<PublicationTitle: "Publication Title">}TOKEN:{<PublicationStatus: "Publication Status">}TOKEN:{<PublicationStatusTermSourceREF: "Publication Status Term Source REF">}TOKEN:{<ExperimentDescription: "Experiment Description">}TOKEN:{<ProtocolName: "Protocol Name">}TOKEN:{<ProtocolType: "Protocol Type">}TOKEN:{<ProtocolDescription: "Protocol Description">}TOKEN:{<ProtocolParameters: "Protocol Parameters">}TOKEN:{<ProtocolHardware: "Protocol Hardware">}TOKEN:{<ProtocolSoftware: "Protocol Software">}TOKEN:{<ProtocolContact: "Protocol Contact">}TOKEN:{<ProtocolTermSourceREF: "Protocol Term Source REF">}TOKEN:{<SRADFFile: "SRADF File">}TOKEN:{<TermSourceName: "Term Source Name">}TOKEN:{<TermSourceFile: "Term Source File">}TOKEN:{<TermSourceVersion: "Term Source Version">}TOKEN:{  <CR_LF:( "\n" |  "\r" | "\r\n"  )>}TOKEN:{  <String:(<PUNC1> | <LETTER> | <DIGIT> )>}TOKEN:{	<PUNC1:(	  "#" | "." | "<" | "=" | ">" | "@" | "&" | "_" | "-" | ":" 	| ";" | "/" | "?" | " " | "~" | "!" | "`" | "$" | "%" 	| "^" | "*" | "(" | ")" | "-" | "|" | "\\"| "{" | "}" | "[" 	| "]" |"+" | ","  )>}TOKEN:{ <Comment:("#"(<String>)*<CR_LF>)>}TOKEN:{ <DIGIT:("1" | "2" | "3"| "4"| "5"| "6"| "7"| "8"| "9" | "0")> }TOKEN:{ <LETTER:["A"-"Z", "a"-"z"]>}	<DEFAULT>TOKEN:{ <QUOTE: ("\"")> :QUOTE_STATE}	<QUOTE_STATE>TOKEN:{ <QUOTED:<LETTER>|<DIGIT>|<CR_LF>|<PUNC1>>}<QUOTE_STATE>TOKEN:{ <QUOTE_END:"\"">: DEFAULT}			TOKEN:{ <#YEAR:<DIGIT><DIGIT><DIGIT><DIGIT>>}TOKEN:{ <#MONTH:<DIGIT><DIGIT>> }TOKEN:{ <#DAY:<DIGIT><DIGIT>> }TOKEN:{ <DATE_START:"Date(">:DATE_STATE}<DATE_STATE>TOKEN:{ <DATE:<YEAR>"-"<MONTH>"-"<DAY>> }<DATE_STATE>TOKEN:{<DATE_END:")">:DEFAULT}RplaIdfHelper parse():{_helper = new RplaIdfHelper();}{	( <CR_LF> |     (<Comment>) )*  investigationTitle()  ( <CR_LF> |     (<Comment>) )*  experimentalDesign()  ( <CR_LF> |     (<Comment>) )*  experimentalFactor() ( <CR_LF> |     (<Comment>) )*  antibodyName()  ( <CR_LF> |     (<Comment>) )*  antibodyTargetGeneName()  ( <CR_LF> |     (<Comment>) )*  antibodyTargetGeneNameTermSourceRef()  ( <CR_LF> |     (<Comment>) )*  antibodySpecificity()  ( <CR_LF> |     (<Comment>) )*  antibodyEpitope()  ( <CR_LF> |     (<Comment>) )*  antibodyImmunogen()  ( <CR_LF> |     (<Comment>) )*  antibodyProvider()  ( <CR_LF> |     (<Comment>) )*  antibodyCatalogID()  ( <CR_LF> |     (<Comment>) )*  antibodyLotID()  ( <CR_LF> |     (<Comment>) )*  antibodyComment()  ( <CR_LF> |     (<Comment>) )*  //antibodyDataSheetFile()  ( <CR_LF> |     (<Comment>) )*   rplArrayName()  ( <CR_LF> |     (<Comment>) )*    [	  	dilution()  	( <CR_LF> |     (<Comment>) )*  	dilutionValue()  	( <CR_LF> |     (<Comment>) )*  	dilutionUnit()  	( <CR_LF> |     (<Comment>) )*  	dilutionUnitTermSourceRef()   ]   ( <CR_LF> |     (<Comment>) )*  person()   ( <CR_LF> |     (<Comment>) )*  qualityControl()   ( <CR_LF> |     (<Comment>) )*  replicate()   ( <CR_LF> |     (<Comment>) )*  normalization()   ( <CR_LF> |     (<Comment>) )*  dates()  ( <CR_LF> |     (<Comment>) )*  publication()   ( <CR_LF> |     (<Comment>) )*  experimentDescription()  ( <CR_LF> |     (<Comment>) )*  protocol()   ( <CR_LF> |     (<Comment>) )*  sradfFile()   ( <CR_LF> |     (<Comment>) )*  termSource()  ( <CR_LF> |     (<Comment>) )*  {   return _helper;  }}void antibodyTargetGeneName():{ _header= getToken(1);}{  <AntibodyTargetGeneName>(<TAB>readIt())*(<TAB>)*<CR_LF>}void antibodyTargetGeneNameTermSourceRef():{ _header= getToken(1);}{  <AntibodyTargetGeneNameTermSourceRef>(<TAB>readIt())*(<TAB>)*<CR_LF>}void antibodySpecificity():{ _header= getToken(1);}{  <AntibodySpecificity>(<TAB>readIt())*(<TAB>)*<CR_LF>}void antibodyEpitope():{ _header= getToken(1);}{  <AntibodyEpitope>(<TAB>readIt())*(<TAB>)*<CR_LF>}void antibodyImmunogen():{ _header= getToken(1);}{  <AntibodyImmunogen>(<TAB>readIt())*(<TAB>)*<CR_LF>}void antibodyDataSheetFile():{ _header= getToken(1);}{  <AntibodyDataSheetFile>(<TAB>readIt())*<CR_LF>}void rplArrayName():{ _header= getToken(1);}{  <RPLArrayName>(<TAB>readIt())*(<TAB>)*<CR_LF>}String readIt():{ Token head = null; Token tail = null;}{  {    head = getToken(1);  }  (  	( <QUOTE> (<QUOTED>)+ <QUOTE_END> ) | ( (<String>)+ )  )  {    TokenList tl = new TokenList(head, getToken(0));    StringBuffer buffie = new StringBuffer();    for (Token p = head; p != tail; p = p.next){    	if ( p.image.compareTo("\"") != 0 ) {      buffie.append(p.image);    }    }    String ret = "";    ret = buffie.substring(0, buffie.length()).trim();    //System.out.println("!!!@" + ret);  	_helper.addColumnString(_header.image, ret);	return (buffie.substring(0, buffie.length()).trim());  }}void investigationTitle():{_header=getToken(1);}{	<InvestigationTitle><TAB>readIt()<CR_LF>}void experimentalDesign():{ }{	experimentalDesignName()	experimentalDesignTermSourceREF()}		void experimentalDesignName():{_header = getToken(1);}{		<ExperimentalDesign>( <TAB>readIt())+<CR_LF>  }		void experimentalDesignTermSourceREF():{_header = getToken(1);}{   <ExperimentalDesignTermSourceRef>(<TAB>readIt())+(<TAB>)*<CR_LF>}	    void experimentalFactor():{}{  experimentalFactorName()  experimentalFactorType()  experimentalFactorTermSourceREF()}void experimentalFactorName():{_header = getToken(1);}{  <ExperimentalFactorName>(<TAB>readIt())+<CR_LF>}void experimentalFactorTermSourceREF():{_header = getToken(1);}{  <ExperimentalFactorTermSourceREF>(<TAB>readIt())*<CR_LF>}void experimentalFactorType():{_header = getToken(1);}{  <ExperimentalFactorType>(<TAB>readIt())*<CR_LF>}void antibodyName():{_header = getToken(1);}{  <AntibodyName>(<TAB>readIt())*<CR_LF>}void antibodyProvider():{_header = getToken(1);}{  <AntibodyProvider>(<TAB>readIt())*<CR_LF>}void antibodyCatalogID():{_header = getToken(1);}{  <AntibodyCatalogID>(<TAB>readIt())*<CR_LF>  }void antibodyLotID():{_header = getToken(1);}{  <AntibodyLotID>(<TAB>readIt())*(<TAB>)*<CR_LF>}void antibodyComment():{_header = getToken(1);}{  <AntibodyComment>(<TAB>readIt())*(<TAB>)*<CR_LF>}void dilution():{_header = getToken(1);}{  <Dilution>(<TAB>readIt())*(<TAB>)*<CR_LF>}void dilutionValue():{_header = getToken(1);}{  <DilutionValue>(<TAB>readIt())*(<TAB>)*<CR_LF>}void dilutionUnit():{_header = getToken(1);}{  <DilutionUnit>(<TAB>readIt())*(<TAB>)*<CR_LF>}void dilutionUnitTermSourceRef():{_header = getToken(1);}{  <DilutionUnitTermSourceRef>(<TAB>readIt())*(<TAB>)*<CR_LF>}void person():{}{  personLastName()  personFirstName()  personMidInitials()  personEmail()  personPhone()  personFax()  personAddress()  personAffiliation()  personRoles()  personRolesTermSourceREF()}void personLastName():{_header = getToken(1);}{  <PersonLastName>(<TAB>readIt())*(<TAB>)*<CR_LF>}void personFirstName():{_header = getToken(1);}{  <PersonFirstName>(<TAB>readIt())*(<TAB>)*<CR_LF>}void personMidInitials():{_header = getToken(1);}{  <PersonMidInitials>(<TAB>readIt())*(<TAB>)*<CR_LF>}void personEmail():{_header = getToken(1);}{  <PersonEmail>(<TAB>readIt())*(<TAB>)*<CR_LF>}void personPhone():{_header = getToken(1);}{  <PersonPhone>(<TAB>readIt())*(<TAB>)*<CR_LF>}void personFax():{_header = getToken(1);}{  <PersonFax>(<TAB>readIt())*(<TAB>)*<CR_LF>}void personAddress():{_header = getToken(1);}{  <PersonAddress>(<TAB>readIt())*(<TAB>)*<CR_LF>}void personAffiliation():{_header = getToken(1);}{  <PersonAffiliation>(<TAB>readIt())*(<TAB>)*<CR_LF>}  //System.out.println("found public release date:"+buffie.toString());}void personRoles():{_header = getToken(1);}{  <PersonRoles>(<TAB>readIt())*(<TAB>)*<CR_LF>}void personRolesTermSourceREF():{_header = getToken(1);}{  <PersonRolesTermSourceREF>(<TAB>readIt())*(<TAB>)*<CR_LF>}void qualityControl():{}{  qualityControlType()  qualityControlTermSourceREF()}//-------------------------------------------------------------------------void qualityControlType():{_header = getToken(1);}{  <QualityControlType>(<TAB>readIt())*(<TAB>)*<CR_LF>}void qualityControlTermSourceREF():{_header = getToken(1);}{  <QualityControlTermSourceREF>(<TAB>readIt())*(<TAB>)*<CR_LF>}void replicate():{}{  replicateType()  replicateTermSourceREF()}void replicateType():{_header = getToken(1);}{  <ReplicateType>(<TAB>readIt())*(<TAB>)*<CR_LF>}void replicateTermSourceREF():{_header = getToken(1);}{  <ReplicateTermSourceREF>(<TAB>readIt())*(<TAB>)*<CR_LF>}void normalization():{_header = getToken(1);}{  normalizationType()normalizationTermSourceREF()}//-------------------------------------------------------------------------void normalizationType():{_header = getToken(1);}{  <NormalizationType>(<TAB>readIt())*(<TAB>)*<CR_LF>}void normalizationTermSourceREF():{_header = getToken(1);}{  <NormalizationTermSourceREF>(<TAB>readIt())*(<TAB>)*<CR_LF>}void dates():{}{  dateOfExperiment()  publicReleaseDate()}void dateOfExperiment():{  Token head = null;  Token tail = null;}{  {    head = getToken(1);  }  <DateofExperiment><TAB><DATE_START><DATE><DATE_END><CR_LF>{    TokenList tl = new TokenList(head, getToken(0));    StringBuffer buffie = new StringBuffer();    for (Token p = head;    p != tail;    p = p.next){      buffie.append(p.image);    }  //System.out.println("found date:"+buffie.toString());}}void publicReleaseDate():{  Token head = null;  Token tail = null;}{  {    head = getToken(1);  }  <PublicReleaseDate><TAB><DATE_START><DATE><DATE_END><CR_LF>{    TokenList tl = new TokenList(head, getToken(0));    StringBuffer buffie = new StringBuffer();    for (Token p = head;    p != tail;    p = p.next){      buffie.append(p.image);    }  }}//-------------------------------------------------------------------------void protocol():{_header = getToken(1);}{  protocolName()protocolType()protocolDescription()protocolParameters()protocolHardware()protocolSoftware()protocolContact()protocolTermSourceREF()}//----------------------------------------------------------------void protocolName():{_header = getToken(1);}{  <ProtocolName>(<TAB>readIt())*(<TAB>)*<CR_LF>}void protocolType():{_header = getToken(1);}{  <ProtocolType>(<TAB>readIt())*(<TAB>)*<CR_LF>}void protocolDescription():{_header = getToken(1);}{  <ProtocolDescription>(<TAB>readIt())*(<TAB>)*<CR_LF>}void protocolParameters():{_header = getToken(1);}{  <ProtocolParameters>(<TAB>readIt())*(<TAB>)*<CR_LF>}void protocolHardware():{_header = getToken(1);}{  <ProtocolHardware>(<TAB>readIt())*(<TAB>)*<CR_LF>}void protocolSoftware():{_header = getToken(1);}{  <ProtocolSoftware>(<TAB>readIt())*(<TAB>)*<CR_LF>}void protocolContact():{_header = getToken(1);}{  <ProtocolContact>(<TAB>readIt())*(<TAB>)*<CR_LF>}void protocolTermSourceREF():{_header = getToken(1);}{  <ProtocolTermSourceREF>(<TAB>readIt())*(<TAB>)*<CR_LF>}void termSource():{_header = getToken(1);}{  termSourceName()termSourceFile()termSourceVersion()}//-------------------------------------------------------------------------void termSourceName():{_header = getToken(1);}{  <TermSourceName>(<TAB>readIt())*(<TAB>)*<CR_LF>{      }}//-------------------------------------------------------------------------void termSourceFile():{_header = getToken(1);}{  <TermSourceFile>  (  (<TAB>readIt())* (<TAB>)*<CR_LF>)     }void termSourceVersion():{_header = getToken(1);}{  <TermSourceVersion>(<TAB>readIt())*<CR_LF>}void publication():{}{  pubMedID()  publicationDOI()  publicationAuthorList()  publicationTitle()  publicationStatus()  publicationStatusTermSourceREF()}void pubMedID():{_header = getToken(1);}{  <PubMedID>(<TAB>readIt())*(<TAB>)*<CR_LF>}void publicationDOI():{_header = getToken(1);}{  <PublicationDOI>(<TAB>readIt())*(<TAB>)*<CR_LF>}void publicationAuthorList():{_header = getToken(1);}{  <PublicationAuthorList>(<TAB>readIt())*(<TAB>)*<CR_LF>}void publicationTitle():{_header = getToken(1);}{  <PublicationTitle>(<TAB>readIt())*(<TAB>)*<CR_LF>}void publicationStatus():{_header = getToken(1);}{  <PublicationStatus>(<TAB>readIt())*(<TAB>)*<CR_LF>}void publicationStatusTermSourceREF():{_header = getToken(1);}{  <PublicationStatusTermSourceREF>(<TAB>readIt())*(<TAB>)*<CR_LF>}// FIXME need to know if eol in description is followed by "Protocol Name"//-------------------------------------------------------------------------void experimentDescription():{_header = getToken(1);}{  <ExperimentDescription>(<TAB>readIt())(<TAB>)*<CR_LF>}void sradfFile():{_header = getToken(1);}{  <SRADFFile>(<TAB>readIt())*(<TAB>)*<CR_LF>}