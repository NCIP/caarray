options{  STATIC = false;}//##############################################################PARSER_BEGIN(RplaDatasetSradfGrammar)	package gov.nih.nci.carpla.rplatab.sradf.javacc.generated;	import java.io.*;	import java.util.*;	import gov.nih.nci.carpla.rplatab.*;	import gov.nih.nci.carpla.rplatab.sradf.*;	import gov.nih.nci.carpla.rplatab.sradf.javacc.src.*;	public class RplaDatasetSradfGrammar	{  		//private Vector<SradfHeader> _principalHeaders = new Vector<SradfHeader>();  		private SradfSectionHeaders _sectionHeaders  = new SradfSectionHeaders();  		private int 				_columnIndex = 1;  		   		  		public SradfSectionHeaders getPrincipalHeaders(){ return _sectionHeaders ; }  		public void					add(SradfHeader header) { _sectionHeaders.getHeaders().add(header);}  		  		public int 					getCol(){ return _columnIndex; }  		public void 				setCol(int col){ _columnIndex = col; }  		public void 				incCol(){ _columnIndex += 1; }  		  		  		public void 				setTotalNumberColumns(int num){_sectionHeaders.setTotalNumberOfColumns(num); }  		  		public void 				init() { _sectionHeaders = new SradfSectionHeaders() ;  this.setCol(1); }  		  	}PARSER_END(RplaDatasetSradfGrammar)//##############################################################//##################################################################//##################################################################//##################################################################//################################################################## SradfSectionHeaders parseSamplesSectionheaders(): { this.init(); }{			[	sourceHeaders() (protocolHeaders())*  ]		sampleHeaders()		( (protocolHeaders())* ( sampleHeaders() 	) )*		( factorValueHeaders())* 				{		setTotalNumberColumns(getCol()-1);		return this.getPrincipalHeaders();    }}//##################################################################//##################################################################//##################################################################//################################################################## SradfSectionHeaders parseArraySectionHeaders(): {this.init();}{			arrayRef() featureLocation() sampleRef() dilution()		{setTotalNumberColumns(getCol()-1);   		return this.getPrincipalHeaders();    }}//##################################################################//##################################################################//##################################################################//################################################################## SradfSectionHeaders parseArrayDataSectionHeaders(): {this.init();}{		arrayRef()			antibodyRef() 		(protocolHeaders())* 		assayName()		(protocolHeaders())*  				[imageFile()]		(protocolHeaders())*  				[arrayDataFile()] 		( (protocolHeaders())*    	derivedArrayDataFile() )*		( factorValueHeaders())* 		{setTotalNumberColumns(getCol()-1);   	return this.getPrincipalHeaders();    		}}//##################################################################void sourceHeaders():{}{	{	}  	<SourceName>    	{ 	SradfHeader source = new SradfHeader(this.getCol(),token.image);   		add(source);  		incCol();  	}   	(sourceAnnotations(source))*		{	}}//##################################################################void sourceAnnotations(SradfHeader header):{	}{		characteristicsHeaders(header) 	| providerHeaders(header)	| materialTypeHeaders(header)	| description(header) 	| comment(header)	{					}}//##################################################################void characteristicsHeaders(SradfHeader header):{String term = ""; String himage = "";  }{  	<Characteristics>{himage= token.image ;}  	(<SPACE>)*  	<STARTBRACKET>term=readTerm()<ENDBRACKET>  	{  		SradfHeader h = new SradfHeader(this.getCol(),himage,term);   		header.add(h);  		incCol();  	}  		(characteristicsAnnotation(h))				{      	}}//##################################################################void characteristicsAnnotation(SradfHeader header):{  }{	  	termSourceRef(header)  | unit(header)  	 	{ 		    	}}//##################################################################void termSourceRef(SradfHeader header):{  }{	<TermSourceREF> { 							SradfHeader tsr = new SradfHeader(this.getCol(),token.image); 						header.add(tsr); 						incCol(); 					} 	[termAccessionNumber(tsr)]	{      	}}//##################################################################void termAccessionNumber(SradfHeader header):{  }{	<TermAccessionNumber>	{  		SradfHeader tan = new SradfHeader(this.getCol(),token.image); 						header.add(tan); 						incCol();    	}}//##################################################################void unit(SradfHeader header): {String term ="";String himage=""; }{  	<Unit>{himage = token.image;}  	(<SPACE>)*<STARTBRACKET>term = readTerm()<ENDBRACKET> {   						SradfHeader h = new SradfHeader(getCol(),himage,term);   						header.add(h);   						incCol();  }        	termSourceRef(h)  	{		}}//##################################################################void sampleHeaders():{  }{	{			}  	<SampleName> { SradfHeader sample = new SradfHeader(getCol(),token.image);   					add(sample);  					incCol();}   	(sampleAnnotations(sample))*	{  	    	}}//##################################################################void description(SradfHeader header):{  }{  	<Description>	{  		header.add(new SradfHeader(getCol(),token.image));  		incCol();    	}}//##################################################################void sampleAnnotations(SradfHeader sample):{}{		characteristicsHeaders(sample) 	| materialTypeHeaders(sample)	| description(sample)	| comment(sample)	{					}}//##################################################################void materialTypeHeaders(SradfHeader header):{  }{  	<MaterialType> {  					SradfHeader h = new SradfHeader(getCol(),token.image);   					header.add(h);  					incCol();   					}  	[ termSourceRef(h) ]	{      	}}//##################################################################void providerHeaders(SradfHeader source):{  }{  	<Provider>{SradfHeader providerh = new SradfHeader(getCol(),token.image);  source.add(providerh); incCol();        }  	[comment(providerh) ]}//##################################################################void comment(SradfHeader h):{	String himage = "";  String term = "";}{  	<Comment> {himage= token.image ;}  	[(<SPACE>)*<STARTBRACKET>term=  readTerm()<ENDBRACKET> ]	{  	h.add( new SradfHeader(getCol(),himage,term));	incCol();   	}}//##################################################################void protocolHeaders():{  }{  	<ProtocolREF> {  					SradfHeader h = new SradfHeader(getCol(),token.image);   					add(h);  					incCol(); }  	(protocolAnnotation(h))*	{  	   	}}//##################################################################void protocolAnnotation(SradfHeader header):{  }{  	termSourceRef(header) | performerHeaders(header) | parameterHeaders(header) | date(header)	{     	}}//##################################################################void date(SradfHeader header):{  }{  	<Date>	{  		SradfHeader date = new SradfHeader(getCol(),token.image);header.add(date); incCol();   	}}//##################################################################void parameterHeaders(SradfHeader header):{  String term = "";  String himage = "";  }{  		<ParameterValue>{himage= token.image ;}  		(<SPACE>)*<STARTBRACKET>term=  readTerm()<ENDBRACKET> {  						SradfHeader pv = new SradfHeader(getCol(),himage,term);  						header.add(pv);  						incCol();  	  	}   	(parameterValueAnnotation(pv))*  		{     	}}//##################################################################void parameterValueAnnotation(SradfHeader header):{  }{  	unit(header) | comment(header)	{     	}}//##################################################################String  readTerm():  {  	Token head = null;  	Token tail = null;}{	{		head = getToken(1);	}	(<IN_BRACKET_TEXT>)*{	 TokenList tl = new TokenList(head, getToken(0));    StringBuffer buffie = new StringBuffer();    for (Token p = head;    p != tail;    p = p.next){      buffie.append(p.image);    }           return buffie.substring(0, buffie.length()-1);  }}//##################################################################void performerHeaders(SradfHeader header):{  }{  	<Performer> { SradfHeader performer = new SradfHeader(getCol(),token.image); header.add(performer); incCol();    }  	 [comment(performer)]	{     	}}//##################################################################void factorValueHeaders():{   String term = "";   String optionalterm ="";   String himage = "";}{	{			}  	<FactorValue>{himage= token.image ;}   	(<SPACE>)*<STARTBRACKET>term=  readTerm()<ENDBRACKET>[<STARTPAREN>optionalterm=  readTerm()<ENDPAREN>]  	  	{SradfHeader fv = new SradfHeader(getCol(),himage,term,optionalterm); add(fv); incCol();}  	  	  	(factorValueAnnotation(fv))*	{     			}}//##################################################################void factorValueAnnotation(SradfHeader header):{  }{  	unit(header) | termSourceRef(header)	{     	}}//##################################################################//##################################################################//##################################################################//##################################################################//##################################################################//##################################################################//##################################################################//##################################################################//##################################################################//block information needs to come before local informationvoid featureLocation():{ }{	{	}  	( blockColumn()blockRow() | blockRow()blockColumn())  	(( column()   row() ) | (     row() column()    ))   	{ 	  	}   			{	}}//##################################################################void blockColumn():{ }{	{	}  	<BlockColumn>  	{ 	  		SradfHeader sref = new SradfHeader(getCol(),token.image);  		add(sref);  		incCol();   	}   			{	}}//##################################################################void blockRow():{ }{	{	}  	<BlockRow>  	{ 	  		SradfHeader sref = new SradfHeader(getCol(),token.image);  		add(sref);  		incCol();   	}   			{	}}//##################################################################void column():{ }{	{	}  	<Column>  	{ 	  		SradfHeader sref = new SradfHeader(getCol(),token.image);  		add(sref);  		incCol();   	}   			{	}}//##################################################################void row():{ }{	{	}  	<Row>  	{ 	  		SradfHeader sref = new SradfHeader(getCol(),token.image);  		add(sref);  		incCol();   	}   			{	}}//##################################################################void sampleRef():{ }{	{	}  	<SampleREF>  	{ 	  		SradfHeader sref = new SradfHeader(getCol(),token.image);  		add(sref);  		incCol();   	}   			{	}}//##################################################################void dilution():{ }{	{	}  	<DilutionREF>  	{  		SradfHeader sref = new SradfHeader(getCol(),token.image);  		add(sref);  		incCol();   		  	}  	  	  	 |  ( <DilutionValue> <DilutionUnit> <TermSourceREF> )  	{ 	  		  		  		  	}   			{	}}//##################################################################void arrayRef():{  }{  	<ArrayREF>	{  		SradfHeader aref = new SradfHeader(getCol(),token.image);  		add(aref);  		incCol();     	}}//##################################################################void antibodyRef():{  }{  	<AntibodyREF>	{  		SradfHeader abref = new SradfHeader(getCol(),token.image);  		add(abref);  		incCol();         	}}//##################################################################void assayName():{  }{  	<AssayName> { SradfHeader an = new SradfHeader(getCol(),token.image);add(an);incCol();   }  	(assayAnnotations(an))+  		{  		    	}}//##################################################################void assayAnnotations(SradfHeader header):{  }{  	technologyType(header) | comment(header)  	{   }  	  		{  		    	}}//##################################################################void technologyType(SradfHeader header):{  }{  	<TechnologyType> { SradfHeader tt = new SradfHeader(getCol(),token.image); header.add(tt);incCol();  		  	}  	 [termSourceRef(tt)]  	{   }  	  		{  		    	}}//##################################################################void imageFile():{  }{  	<ImageFile>	{  		SradfHeader imgf = new SradfHeader(getCol(),token.image);add(imgf);incCol();     	}}//##################################################################void arrayDataFile():{  }{  	<ArrayDataFile>	{  		SradfHeader adf = new SradfHeader(getCol(),token.image);add(adf);incCol();     	}}//##################################################################void derivedArrayDataFile():{  }{  	<DerivedArrayDataFile>	{  		SradfHeader dadf = new SradfHeader(getCol(),token.image);add(dadf);incCol();    	}}//be sure to count proper number of tabs later, nevertheless, we're skipping tabsSKIP:{  "\t"}<DEFAULT>TOKEN:{  <CR_LF:"\r\n"  | "\n"  | "\r">}TOKEN:{  <LETTER:["A"-"Z", "a"-"z"]>}TOKEN:{  <DIGIT:["0"-"9"]>}TOKEN:{  <SPACE:" ">}//------------<DEFAULT>TOKEN:{  <STARTBRACKET:"[">:IN_BRACKET}// lexical state for the bracketed text//following should be all characters except bracket<IN_BRACKET>TOKEN:{  <IN_BRACKET_TEXT:(<LETTER>  | <DIGIT>  | <PUNC1_MINUS_BRACKETS> )>:IN_BRACKET}<IN_BRACKET>TOKEN:{  <ENDBRACKET:"]">:DEFAULT}//----------------<DEFAULT>TOKEN:{  <STARTPAREN:"(">:IN_PAREN}<IN_PAREN>TOKEN:{  <IN_PAREN_TEXT:(<LETTER>  | <DIGIT>  |  <PUNC1_MINUS_PARENS>   )>:IN_PAREN}<IN_PAREN>TOKEN:{  <ENDPAREN:")">:DEFAULT}<DEFAULT>TOKEN:{  <TEXT:~[]  | "\n">}TOKEN:{	<PUNC1:(	  "," | "." | "<" | "=" | ">" | "@" | "&" | "_" | "-" | ":" 	| ";" | "/" | "?" | " " | "~" | "!" | "`" | "#" | "$" | "%" 	| "^" | "*" | "(" | ")" | "-" | "|" | "\\"| "{" | "}" | "[" 	| "]" | "," |"+"  )>}TOKEN:{	<PUNC1_MINUS_BRACKETS:(	  "," | "." | "<" | "=" | ">" | "@" | "&" | "_" | "-" | ":" 	| ";" | "/" | "?" | " " | "~" | "!" | "`" | "#" | "$" | "%" 	| "^" | "*" | "(" | ")" | "-" | "|" | "\\"| "{" | "}" | "," |"+"  )>}  TOKEN:{	<PUNC1_MINUS_PARENS:(	  "," | "." | "<" | "=" | ">" | "@" | "&" | "_" | "-" | ":" 	| ";" | "/" | "?" | " " | "~" | "!" | "`" | "#" | "$" | "%" 	| "^" | "*" | "-" | "|" | "\\"| "{" | "}" | "," |"+" | "[" | "]"  )>}    //Token definitions following...once and only onceTOKEN:{  <FactorValue:"Factor Value">}TOKEN:{  <SourceName:"Source Name">  }TOKEN:{  <HybridizationName:"Hybridization Name">}TOKEN:{  <SampleName:"Sample Name">}TOKEN:{  <SampleREF:"Sample REF">}TOKEN:{  <Characteristics:"Characteristics">}TOKEN:{  <MaterialType:"Material Type">}TOKEN:{  <Description:"Description">}TOKEN:{  <Provider:"Provider">}TOKEN:{  <Comment:"Comment">}TOKEN:{  <ProtocolREF:"Protocol REF">}TOKEN:{  <Date:"Date">}TOKEN:{  <Performer:"Performer">}TOKEN:{  <ParameterValue:"Parameter Value">}TOKEN:{  <ReporterGroup:"Reporter Group">}TOKEN:{  <TermSourceREF:"Term Source REF">}TOKEN:{  <TermAccessionNumber:"Term Accession Number">}TOKEN:{  <BlockColumn:"Block Column">}TOKEN:{  <BlockRow:"Block Row">}TOKEN:{  <Column:"Column">}TOKEN:{  <Row:"Row">}TOKEN:{	<DilutionREF:"Dilution REF">}TOKEN:{	<ArrayREF:"Array REF">}TOKEN:{	<AntibodyREF:"Antibody REF">}TOKEN:{  <DilutionValue:"Dilution Value">}TOKEN:{  <DilutionUnit:"Dilution Unit">}TOKEN:{  <ArrayName:"Array Name">}TOKEN:{  <AntibodyName:"Antibody Name">}TOKEN:{  <Unit:"Unit">}TOKEN:{  <ArrayDataFile:"Array Data File">}TOKEN:{  <NormalizationName:"Normalization Name">}TOKEN:{  <DerivedArrayDataFile:"Derived Array Data File">}TOKEN:{  <AssayName:"Assay Name">}TOKEN:{  <ImageFile:"Image File">}TOKEN:{  <TechnologyType:"Technology Type">}