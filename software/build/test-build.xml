<project name="test-build" default="setUp" basedir="." xmlns:au="antlib:org.apache.ant.antunit" xmlns="antlib:org.apache.tools.ant">


<property name="lib.dir" value="../lib"/>
<property file="${envpropertyfile}" />
<property name="antunit.jar" value="ant-antunit-1.0.jar"/>
<property name="antunit.jar.location" value="${lib.dir}/${antunit.jar}"/>

<taskdef uri="antlib:org.apache.ant.antunit"
  resource="org/apache/ant/antunit/antlib.xml">
  <classpath>
    <pathelement location="${antunit.jar.location}"/>
  </classpath>
</taskdef>

  <condition property="isWindows">
    <and>
        <os family="windows"/>
		<not>
   		  <os family="win9x"/>
		</not>
    </and>
  </condition>

  <target name="setUp">
  </target>

  <target name="test-build" depends="display-properties,setUp,pre-build-checks,tearDown" />

  <target name="test-remote-build" depends="display-properties,setUp,pre-build-checks-command-line,tearDown" />

  <!-- is called after the test, even if that caused an error -->
  <target name="tearDown">
    
  </target>

  <target name="display-properties">
  	  <echo> Diagnostics...</echo>
	  <echoproperties/>
  </target>

  <target name="pre-build-checks" depends="testEnvPropertyFile,testPropertiesFileExists,testSshKeyFileExists,
    testSvnLocalTrunk" />

  <target name="post-build-checks"/>

  <target name="pre-build-checks-command-line" depends="pre-build-checks, testJavaSecureChannelFileExists, 
    testBuildNoTest" />

  <target name="testEnvPropertyFile">
      <echo> antunit.jar.location is ${antunit.jar.location} </echo>
	<au:assertPropertySet name="envpropertyfile" message="Target environment file not found. 
	Please set target environment file with -Denvpropertyfile=[FULLY QUALIFIED PATH TO PROPERTY FILE]" />  
  </target>

  <target name="testBuildNoTest">
	<au:assertPropertySet name="notest" message="notest is a required system property. Please set this property using -Dnotest=true"/>  
  </target> 

  <target name="testSvnLocalTrunk">
	<au:assertPropertySet name="svn.local.trunk" message="svn.local.trunk property not set."/>  
  </target>

  <target name="testIsWindows">
	<au:assertPropertySet name="isWindows" message="Currently, remote-build.xml only runs on Windows."/>  
  </target>

  <target name="testUpdateEnvironmentProperties">
	<au:assertPropertySet name="svn.local.trunk" message="svn.local.trunk is a required property when calling the update-environment-properties target"/>  
	<au:assertPropertySet name="scm.private.repo" message="scm.private.repo is a required property when calling the update-environment-properties target"/>  
  </target>

  <target name="testPropertiesFileExists">
	<au:assertFileExists file="${envpropertyfile}" message="Unable to find the file: ${envpropertyfile}. The path to -Denvpropertyfile must be fully-qualified." />  
  </target>

  <target name="testSshKeyFileExists">
	<au:assertFileExists file="${ssh.key.file}" message="Unable to find the file: ${ssh.key.file}. Please update the value of the ssh.key.file attribute in the ${envpropertyfile} file." />  
  </target>

  <target name="testJavaSecureChannelFileExists">
	<au:assertFileExists file="${jsch.jar.location}" message="Unable to find the file: ${jsch.jar.location}." />  
  </target>

  <target name="testServersOnline" depends="display-properties, testEnvPropertyFile, -check-server-availability,testMySQLOnline, testJBossOnline,testGridServiceOnline, 
  testWebAppOnline "/>

  <target name="-check-server-availability">
    <condition property="mysql.running">
      <socket port="${database.port}" server="${database.server}" />
    </condition>
    <condition property="jboss.running">
      <socket port="${jboss.server.port}" server="${jboss.server.hostname}" />
    </condition>
    <condition property="globus.running">
      <socket port="${jboss.server.port}" server="${jboss.server.hostname}" />
    </condition>
    <property name="app.url" value="http://${jboss.server.hostname}:${jboss.server.port}/caarray/"/>
	<condition property="webapp.running">
	    <http url="${app.url}"/>
	</condition>
  </target>

  <target name="testMySQLOnline">
    <fail message="MySQL is not running at ${database.server}:${database.port}">
      <condition>
	    <not>
		  <isset property="mysql.running"/>
       </not>
     </condition>
    </fail>
  </target>

  <target name="testJBossOnline">
    <fail message="JBoss is not running at ${jboss.server.hostname}:${jboss.server.port}">
      <condition>
	    <not>
		  <isset property="jboss.running"/>
       </not>
     </condition>
    </fail>
  </target>

  <target name="testGridServiceOnline" />

  <target name="testWebAppOnline">
    <property name="app.url" value="http://${jboss.server.hostname}:${jboss.server.port}/caarray/"/>
	<echo>Testing if ${app.url} is Offline...</echo>
	<au:assertEquals message="Unable to reach ${app.url}" expected="true"
                      actual="${webapp.running}" casesensitive="true"/>
    <echo>${app.url} is Online...</echo>
  </target>

</project>