<project name="test-build" default="setUp" basedir="." xmlns:au="antlib:org.apache.ant.antunit" xmlns="antlib:org.apache.tools.ant">

<property name="lib.dir" value="../lib"/>
<property file="${envpropertyfile}" />
<property name="antunit.jar" value="ant-antunit-1.0.jar"/>
<property name="antunit.jar.location" value="${lib.dir}/${antunit.jar}"/>

<taskdef uri="antlib:org.apache.ant.antunit"
  resource="org/apache/ant/antunit/antlib.xml">
  <classpath>
    <pathelement location="${antunit.jar.location}"/>
  </classpath>
</taskdef>

  <condition property="isWindows">
    <and>
        <os family="windows"/>
		<not>
   		  <os family="win9x"/>
		</not>
    </and>
  </condition>

  
<target name="usage">
   <echo>ant -f test-build.xml -Denvpropertyfile=C:\dev\caarray2\software\build\DEV.properties</echo>
</target>

  <target name="setUp">
  </target>

  <target name="test-build" depends="display-properties,setUp,pre-build-checks,tearDown" />

  <target name="test-remote-build" depends="display-properties,setUp,pre-build-checks-command-line,tearDown" />

  <!-- is called after the test, even if that caused an error -->
  <target name="tearDown">
    
  </target>

  <target name="display-properties">
  	  <echo> Diagnostics...</echo>
	  <echoproperties/>
  </target>

  <target name="pre-build-checks" depends="testEnvPropertyFile,testPropertiesFileExists,testSshKeyFileExists, testSshConnection, testSvnLocalTrunk" />

  <target name="post-build-checks"/>

  <target name="pre-build-checks-command-line" depends="pre-build-checks, testJavaSecureChannelFileExists, 
    testBuildNoTest" />

  <target name="testEnvPropertyFile">
      <echo> antunit.jar.location is ${antunit.jar.location} </echo>
	<au:assertPropertySet name="envpropertyfile" message="Target environment file not found. 
	Please set target environment file with -Denvpropertyfile=[FULLY QUALIFIED PATH TO PROPERTY FILE]" />  
  </target>

  <target name="testBuildNoTest">
	<au:assertPropertySet name="notest" message="notest is a required system property. Please set this property using -Dnotest=true"/>  
  </target> 

  <target name="testSvnLocalTrunk">
	<au:assertPropertySet name="svn.local.trunk" message="svn.local.trunk property not set."/>  
  </target>

  <target name="testIsWindows">
	<au:assertPropertySet name="isWindows" message="Currently, remote-build.xml only runs on Windows."/>  
  </target>

  <target name="testUpdateEnvironmentProperties">
    <echo>Checking for the existence of the ${svn.local.trunk} and ${scm.private.repo} properties...</echo>
	<au:assertPropertySet name="svn.local.trunk" message="svn.local.trunk is a required property when calling the update-environment-properties target"/>  
	<au:assertPropertySet name="scm.private.repo" message="scm.private.repo is a required property when calling the update-environment-properties target"/>  
  </target>

  <target name="testPropertiesFileExists">
    <echo>Checking for the existing of the ${envpropertyfile} file...</echo>
	<au:assertFileExists file="${envpropertyfile}" message="Unable to find the file: ${envpropertyfile}. The path to -Denvpropertyfile must be fully-qualified." />  
  </target>

  <target name="testSshKeyFileExists">
    <echo>Checking for the existence of the ${ssh.key.file} file...</echo>
	<au:assertFileExists file="${ssh.key.file}" message="Unable to find the file: ${ssh.key.file}. Please update the value of the ssh.key.file attribute in the ${envpropertyfile} file." /> 
  </target>

  <target name="testSshConnection">
    <echo>Testing valid SSH connection to ${ssh.server.username} and ${ssh.grid.username}...</echo>
	    <sshexec port="${ssh.port}" host="${ssh.server.hostname}" trust="true"
          username="${ssh.server.username}" keyfile="${ssh.key.file}"
          passphrase="" verbose="true" command="ls" />
	    <sshexec port="${ssh.port}" host="${ssh.server.hostname}" trust="true"
          username="${ssh.grid.username}" keyfile="${ssh.key.file}"
          passphrase="" verbose="true" command="ls" />
  </target>

  <target name="testJavaSecureChannelFileExists">
    <echo>Checking for the existence of the ${jsch.jar.location} file...</echo>
	<au:assertFileExists file="${jsch.jar.location}" message="Unable to find the file: ${jsch.jar.location}." />  
  </target>

  <target name="testServersOnline" depends="display-properties, testEnvPropertyFile, -check-server-availability,testMySQLOnline, testJBossOnline,testGridServiceOnline, 
  testWebAppOnline "/>

  <target name="-check-server-availability">
    <echo>Checking Servers' Availability...</echo>
    <condition property="mysql.running">
      <socket port="${database.port}" server="${database.server}" />
    </condition>
    <condition property="jboss.running">
      <socket port="${jboss.server.port}" server="${jboss.server.hostname}" />
    </condition>
	<property name="globus.url" value="http://${jboss.server.hostname}:8080/wsrf/services/cagrid/CaArraySvc?wsdl"/>
    <condition property="globus.running">
      <http url="${globus.url}"/>
    </condition>
    <property name="app.url" value="http://${jboss.server.hostname}:${jboss.server.port}/caarray/"/>
	<condition property="webapp.running">
	    <http url="${app.url}"/>
	</condition>
  </target>

  <target name="testMySQLOnline">
    <echo>Checking ${database.server}:${database.port} (MySQL) availability...</echo>
	<au:assertEquals message="Unable to reach ${database.server}:${database.port}" expected="true"
                      actual="${mysql.running}" casesensitive="true"/>
    <echo>${database.server}:${database.port} is Online...</echo>
  </target>

  <target name="testJBossOnline">
    <echo>Checking ${jboss.server.hostname}:${jboss.server.port} (JBoss) availability...</echo>
	<au:assertEquals message="Unable to reach ${jboss.server.hostname}:${jboss.server.port}" expected="true"
                      actual="${jboss.running}" casesensitive="true"/>
    <echo>${jboss.server.hostname}:${jboss.server.port} is Online...</echo>
  </target>

  <target name="testGridServiceOnline">
	<echo>Testing if ${globus.url} (Globus) availability...</echo>
	<au:assertEquals message="Unable to reach ${globus.url}" expected="true"
                      actual="${globus.running}" casesensitive="true"/>
    <echo>${globus.url} is Online...</echo>
  </target>

  <target name="testWebAppOnline">
    <echo>Checking ${app.url} (Web Application) availability...</echo>    
    <property name="app.url" value="http://${jboss.server.hostname}:${jboss.server.port}/caarray/"/>
	<echo>Testing if ${app.url} is Offline...</echo>
	<au:assertEquals message="Unable to reach ${app.url}" expected="true"
                      actual="${webapp.running}" casesensitive="true"/>
    <echo>${app.url} is Online...</echo>
  </target>

</project>