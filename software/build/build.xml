<!-- *********************************************************************** -->
<!-- ** PROJECT:   caArray                                                ** -->
<!-- *********************************************************************** -->

<project name="caarray" default="continuous-integration" basedir=".." xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- ******************************************************************* -->
    <!-- ** PROPERTIES                                                    ** -->
    <!-- ******************************************************************* -->

    <!-- Main -->
    <property name="root.dir" location="${basedir}/.." />
    <property name="docs.dir" value="${root.dir}/docs" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="lib.dir" value="${basedir}/lib" />
    <property name="resource.dir" value="${build.dir}/resources" />
    <property name="target.dir" value="${build.dir}/target" />
    <property name="site.dir" value="${build.dir}/site" />
    <property name="cobertura.dir" value="${site.dir}/cobertura" />
    <property name="cobertura.file" value="${cobertura.dir}/cobertura.ser" />
    <property name="cobertura-functional.file" value="${cobertura.dir}/cobertura-functional.ser" />
    <property name="cobertura-merged.file" value="${cobertura.dir}/cobertura-merged.ser" />
    <property name="ear.dist.dir" value="${basedir}/dist/ear" />
    <property name="common.resources.jboss.conf.dir" value="${basedir}/common/resources/jboss-conf" />

    <!-- Environment properties -->
    <property environment="env" />
    <property file="${envpropertyfile}" />
    <property file="${build.dir}/local.properties" />
    <property file="${build.dir}/default.properties" />

    <property file="${basedir}/master_build/project.properties" />

    <!-- Components -->

    <property name="cn2magetab.dir" value="${basedir}/copy-number-converter" />
    <property name="cn2magetab.src.dir" value="${cn2magetab.dir}/src/main/java"/>
    <property name="cn2magetab.target.dir" value="${cn2magetab.dir}/target" />
    <property name="cn2magetab.classes.dir" value="${cn2magetab.target.dir}/classes"/>
    <property name="cn2magetab.test.src.dir" value="${cn2magetab.dir}/src/test/java"/>
    <property name="cn2magetab.instrumented.classes.dir" value="${cn2magetab.target.dir}/instrumented-classes" />
    <property name="cn2magetab.test.classes.dir" value="${cn2magetab.target.dir}/test-classes"/>

    <property name="caarray-client.dir" value="${basedir}/caarray-client.jar" />
    <property name="caarray-client.src.dir" value="${caarray-client.dir}/src/main/java" />
    <property name="caarray-client.resources.dir" value="${caarray-client.dir}/src/main/resources" />
    <property name="caarray-client.test.src.dir" value="${caarray-client.dir}/src/test/java" />
    <property name="caarray-client.test.files.dir" value="${caarray-client.dir}/src/test/resources" />
    <property name="caarray-client.target.dir" value="${caarray-client.dir}/target" />
    <property name="caarray-client.classes.dir" value="${caarray-client.target.dir}/classes" />
    <property name="caarray-client.instrumented.classes.dir" value="${caarray-client.target.dir}/instrumented-classes" />
    <property name="caarray-client.test.classes.dir" value="${caarray-client.target.dir}/test-classes" />

    <property name="caarray-common.dir" value="${basedir}/caarray-common.jar" />
    <property name="caarray-common.src.dir" value="${caarray-common.dir}/src/main/java" />
    <property name="caarray-common.resources.dir" value="${caarray-common.dir}/src/main/resources" />
    <property name="caarray-common.test.src.dir" value="${caarray-common.dir}/src/test/java" />
    <property name="caarray-common.test.files.dir" value="${caarray-common.dir}/src/test/resources" />
    <property name="caarray-common.target.dir" value="${caarray-common.dir}/target" />
    <property name="caarray-common.classes.dir" value="${caarray-common.target.dir}/classes" />
    <mkdir dir="${caarray-common.classes.dir}" />
    <property name="caarray-common.instrumented.classes.dir" value="${caarray-common.target.dir}/instrumented-classes" />
    <property name="caarray-common.test.classes.dir" value="${caarray-common.target.dir}/test-classes" />
    <property name="caarray-common.jar" value="${caarray-common.target.dir}/caarray-common.jar" />

    <property name="caarray-ejb.dir" value="${basedir}/caarray-ejb.jar" />
    <property name="caarray-ejb.src.dir" value="${caarray-ejb.dir}/src/main/java" />
    <property name="caarray-ejb.resources.dir" value="${caarray-ejb.dir}/src/main/resources" />
    <property name="caarray-ejb.test.src.dir" value="${caarray-ejb.dir}/src/test/java" />
    <property name="caarray-ejb.target.dir" value="${caarray-ejb.dir}/target" />
    <property name="caarray-ejb.classes.dir" value="${caarray-ejb.target.dir}/classes" />
    <property name="caarray-ejb.instrumented.classes.dir" value="${caarray-ejb.target.dir}/instrumented-classes" />
    <property name="caarray-ejb.test.classes.dir" value="${caarray-ejb.target.dir}/test-classes" />
    <property name="caarray-ejb.test.resources.dir" value="${caarray-ejb.dir}/src/test/resources" />
    <property name="caarray-ejb.jar" value="${caarray-ejb.target.dir}/caarray-ejb.jar" />
    <property name="dataStorage.fileSystem.testBaseDir" value="${caarray-ejb.target.dir}/file-storage-test" />

    <property name="caarray-war.dir" value="${basedir}/caarray.war" />
    <property name="caarray-war.src.dir" value="${caarray-war.dir}/src/main/java" />
    <property name="caarray-war.webapp.dir" value="${caarray-war.dir}/src/main/webapp" />
    <property name="caarray-war.test.src.dir" value="${caarray-war.dir}/src/test/java" />
    <property name="caarray-war.target.dir" value="${caarray-war.dir}/target" />
    <property name="caarray-war.classes.dir" value="${caarray-war.target.dir}/classes" />
    <property name="caarray-war.target.webapp.dir" value="${caarray-war.target.dir}/webapp" />
    <property name="caarray-war.instrumented.classes.dir" value="${caarray-war.target.dir}/instrumented-classes" />
    <property name="caarray-war.test.classes.dir" value="${caarray-war.target.dir}/test-classes" />
    <property name="caarray.war" value="${caarray-war.target.dir}/caarray.war" />

    <property name="caarray-ear.dir" value="${basedir}/caarray.ear" />
    <property name="caarray-ear.resources.dir" value="${caarray-ear.dir}/src/main/resources" />
    <property name="caarray-ear.target.dir" value="${caarray-ear.dir}/target" />
    <property name="caarray.ear" value="${caarray-ear.target.dir}/caarray.ear" />

    <property name="caarraydb.dir" value="${basedir}/caarraydb" />
    <property name="caarraydb.target.dir" value="${caarraydb.dir}/target" />
    <property name="caarraydb.sql.src.dir" value="${caarraydb.dir}/src/main/sql" />
    <property name="caarraydb.sql.test.dir" value="${caarraydb.dir}/src/test/sql" />
    <property name="caarraydb.sql.dir" value="${caarraydb.target.dir}/sql" />

    <property name="cagrid.version" value="1.2" />
    <property name="caarray-grid-svc.base.dir" value="${basedir}/grid" />
    <property name="caarray-grid-svc.versions.external" value="v1_0" />
    <property name="caarray-grid-svc.versions" value="legacy,${caarray-grid-svc.versions.external}" />
    <property name="caarray-grid-svc.common.dir" value="${caarray-grid-svc.base.dir}/common" />
    <property name="caarray-grid-svc.common.src.dir" value="${caarray-grid-svc.common.dir}/src/main/java" />
    <property name="caarray-grid-svc.common.test.src.dir" value="${caarray-grid-svc.common.dir}/src/test/java" />
    <property name="caarray-grid-svc.common.target.dir" value="${caarray-grid-svc.common.dir}/target" />
    <property name="caarray-grid-svc.common.classes.dir" value="${caarray-grid-svc.common.target.dir}/classes" />
    <property name="caarray-grid-svc.common.instrumented.classes.dir" value="${caarray-grid-svc.common.target.dir}/instrumented-classes" />
    <property name="caarray-grid-svc.common.test.classes.dir" value="${caarray-grid-svc.common.target.dir}/test-classes" />
    <property name="caarray-grid-svc.common.jar" value="${caarray-grid-svc.common.target.dir}/caarray-grid-common.jar" />

    <property name="caarray.resources.baseDir" value="${jboss.home}/server/${jboss.server.name}/caarray" />
    <property name="caarray-plugins.dir" value="${basedir}/plugins" />
    <property name="caarray-plugins.pluginList" value="nimblegen-platform,genepix-platform,illumina-platform,affymetrix-platform,agilent-platform,copynumber-platform" />
    <property name="caarray-plugins.src.subdir" value="src/main/java" />
    <property name="caarray-plugins.resources.subdir" value="src/main/resources" />
    <property name="caarray-plugins.test.src.subdir" value="src/test/java" />
    <property name="caarray-plugins.test.resources.subdir" value="src/test/resources" />
    <property name="caarray-plugins.target.subdir" value="target" />
    <property name="caarray-plugins.classes.subdir" value="${caarray-plugins.target.subdir}/classes" />
    <property name="caarray-plugins.instrumented.classes.subdir" value="${caarray-plugins.target.subdir}/instrumented-classes" />
    <property name="caarray-plugins.test.classes.subdir" value="${caarray-plugins.target.subdir}/test-classes" />
    <property name="caarray-bundled-plugins.dir" value="${caarray-plugins.dir}/target" />

    <property name="caarray-plugins.properties.file" value="${caarray-war.classes.dir}/caarray-plugins.properties" />

    <!-- plugin dependencies on each other go here -->
    <property name="caarray-plugins.copynumber-platform.requires" value="agilent-platform" />
    <property name="caarray-plugins.agilent-platform.requires" value="" />
    <property name="caarray-plugins.affymetrix-platform.requires" value="" />
    <property name="caarray-plugins.illumina-platform.requires" value="" />
    <property name="caarray-plugins.genepix-platform.requires" value="" />
    <property name="caarray-plugins.nimblegen-platform.requires" value="" />

    <!-- ******************************************************************* -->
    <!-- ** 3RD PARTY DEPENDENCY MANAGMENT                                ** -->
    <!-- ******************************************************************* -->

    <target name="init:bootstrap:dependencies" description="This target allows build clients of ivy or bda-utils to initialize them here."/>

    <property name="ivy.cache.dir" value="${basedir}/.ivy2-caarray-cache"/>
    <property name="asm.3.0.lib" value="${lib.dir}/caarray-asm_3.0" />
    <property name="project.lib" value="${lib.dir}/caarray-project" />
    <property name="bda-utils.dir" value="${basedir}/target/bda-utils" />
    <property name="bda.utils.build.file" value="${bda-utils.dir}/bda-build-utils-${bda.version}.xml"/>
    <property name="local.repo.dir" value="${basedir}/local-ivy-repo"/>

    <ant antfile="caarray-ivy-build.xml" dir="${basedir}/master_build" inheritAll="true" inheritRefs="true" target="retrieve-bda-dependencies">
        <property name="no.ivy" value="${no.ivy}"/>
        <property name="clean.bootstrap.libs.and.ivy.cache" value="${clean.bootstrap.libs.and.ivy.cache}"/>
        <property name="local.repo.dir" value="${local.repo.dir}"/>
        <property name="ivy.cache.dir" value="${ivy.cache.dir}"/>
        <property name="lib.dir" location="${lib.dir}" />
        <property name="bda-utils.dir" value="${bda-utils.dir}"/>
        <property name="bda.utils.build.file" value="${bda.utils.build.file}"/>
    </ant>


    <!-- ******************************************************************* -->
    <!-- ** IMPORTS                                                       ** -->
    <!-- ******************************************************************* -->

    <import file="macrodefs.xml" />
    <import file="${bda.utils.build.file}" />


    <!-- Test-related properties -->
    <property name="test.dir" value="${basedir}/test" />
    <property name="test.target.dir" value="${test.dir}/target" />
    <property name="test.src.dir" value="${test.dir}/src/test/java" />
    <property name="test.resources.dir" value="${test.dir}/src/test/resources" />
    <property name="test.classes.dir" value="${test.target.dir}/test-classes" />
    <property name="test.data.dir" value="${basedir}/../test-data" />
    <property name="test.data.target.dir" value="${test.data.dir}/target" />
    <property name="test.data.files.dir" value="${test.data.dir}/src/test/data" />
    <property name="test.data.src.dir" value="${test.data.dir}/src/test/java" />
    <property name="test.data.classes.dir" value="${test.data.dir}/target/test-classes" />

    <!-- milisec of system Time-stamp -->
    <tstamp>
        <format property="mili.time" pattern="ddMMyyHHmmss" />
    </tstamp>

    <!-- grid service-related dependencies, which are not yet handled by ivy -->
    <fileset dir="${caarray-grid-svc.base.dir}/legacy/build/lib" id="grid.dependencies.caarray-grid-svc.legacy.build.fileset">
        <include name="CaArraySvc-client.jar" />
        <include name="CaArraySvc-common.jar" />
        <include name="CaArraySvc-stubs.jar" />
    </fileset>
    <fileset dir="${caarray-grid-svc.base.dir}/v1_0/build/lib" id="grid.dependencies.caarray-grid-svc.v1_0.build.fileset">
        <include name="CaArraySvc_v1_0-client.jar" />
        <include name="CaArraySvc_v1_0-common.jar" />
        <include name="CaArraySvc_v1_0-stubs.jar" />
    </fileset>
    <fileset dir="${caarray-grid-svc.base.dir}/v1_0/lib" id="grid.dependencies.caarray-grid-svc.lib.fileset">
        <include name="caGrid-data-stubs-${cagrid.version}.jar" />
        <include name="caGrid-data-utils-${cagrid.version}.jar" />
        <include name="caGrid-core-${cagrid.version}.jar" />
        <include name="caGrid-core-resources-${cagrid.version}.jar" />
        <include name="caGrid-metadata-common-${cagrid.version}.jar" />
        <include name="caGrid-metadata-security-${cagrid.version}.jar" />
        <include name="caGrid-ServiceSecurityProvider-client-${cagrid.version}.jar" />
        <include name="caGrid-ServiceSecurityProvider-common-${cagrid.version}.jar" />
        <include name="caGrid-ServiceSecurityProvider-stubs-${cagrid.version}.jar" />
        <include name="caGrid-Transfer-client-${cagrid.version}.jar" />
        <include name="caGrid-Transfer-common-${cagrid.version}.jar" />
        <include name="caGrid-Transfer-stubs-${cagrid.version}.jar" />
        <include name="caGrid-wsEnum-stubs-${cagrid.version}.jar" />
        <include name="caGrid-wsEnum-${cagrid.version}.jar" />
        <include name="commons-httpclient-3.0.jar" />
    </fileset>

    <target name="init:third-party-paths">
        <if>
            <not><equals arg1="${no.ivy}" arg2="true" /></not>
            <then>
                <ant antfile="caarray-ivy-build.xml" dir="${basedir}/master_build" inheritAll="true" inheritRefs="true" target="retrieve-app-dependencies">
                    <property name="no.ivy" value="${no.ivy}"/>
                    <property name="psuedo_override.clean.bootstrap.libs.and.ivy.cache" value="false"/>
                    <property name="local.repo.dir" value="${local.repo.dir}"/>
                    <property name="ivy.cache.dir" value="${ivy.cache.dir}"/>
                    <property name="lib.dir" location="${lib.dir}" />
                    <property name="bda-utils.dir" value="${bda-utils.dir}"/>
                    <property name="bda.utils.build.file" value="${bda.utils.build.file}"/>
                </ant>
            </then>
        </if>

        <mkdir dir="${download.dir}"/> <!-- working around BDA bug -->
        <validate-pre-build application.base.path="${basedir}/tools" wscore.relative.dir="ws-core-4.0.3"/>

        <!-- paths and filesets to define needed dependencies, which have been retrieved by ivy above -->
        <path id="project.jars.path">
            <fileset dir="${project.lib}" id="project.jars.fileset">
                <include name="*.jar"/>
            </fileset>
        </path>

        <path id="no.dependencies.path">
            <fileset dir="${project.lib}" id="no.dependencies.fileset">
                <exclude name="**/*" />
            </fileset>
        </path>

        <path id="affxfusion.jar.path">
            <fileset dir="${project.lib}" id="affxfusion.jar.fileset">
                <include name="fusion-*.jar"/>
            </fileset>
        </path>
        <property name="affxfusion.jar" refid="affxfusion.jar.fileset" />

        <path id="acegi-security.jar.path">
            <fileset dir="${project.lib}" id="acegi-security.jar.fileset">
                <include name="acegi-security-*.jar"/>
                <exclude name="acegi-security-jboss-*.jar"/>
            </fileset>
        </path>
        <property name="acegi-security.jar" refid="acegi-security.jar.fileset" />

        <path id="acegi-security-jboss.jar.path">
            <fileset dir="${project.lib}" id="acegi-security-jboss.jar.fileset">
                <include name="acegi-security-jboss-*.jar"/>
            </fileset>
        </path>
        <property name="acegi-security-jboss.jar" refid="acegi-security-jboss.jar.fileset" />

        <path id="ajaxtags.jar.path">
            <fileset dir="${project.lib}" id="ajaxtags.jar.fileset">
                <include name="ajaxtags-*.jar"/>
            </fileset>
        </path>
        <property name="ajaxtags.jar" refid="ajaxtags.jar.fileset" />

        <path id="jericho-html.jar.path">
            <fileset dir="${project.lib}" id="jericho-html.jar.fileset">
                <include name="jericho-html-*.jar"/>
            </fileset>
        </path>
        <property name="jericho-html.jar" refid="jericho-html.jar.fileset" />

        <path id="ant-contrib.jar.path">
            <fileset dir="${project.lib}" id="ant-contrib.jar.fileset">
                <include name="ant-contrib-*.jar"/>
            </fileset>
        </path>
        <property name="ant-contrib.jar" refid="ant-contrib.jar.fileset" />

        <path id="antlr.jar.path">
            <fileset dir="${project.lib}" id="antlr.jar.fileset">
                <include name="antlr-*.jar"/>
            </fileset>
        </path>
        <property name="antlr.jar" refid="antlr.jar.fileset" />

        <path id="asm.jar.path">
            <fileset dir="${project.lib}" id="asm.jar.fileset">
                <include name="asm-*.jar"/>
                <exclude name="asm-attrs-*.jar"/>
                <exclude name="asm-tree-*.jar"/>
            </fileset>
        </path>
        <property name="asm.jar" refid="asm.jar.fileset" />

        <path id="asm.3.0.jar.path">
            <fileset dir="${asm.3.0.lib}" id="asm.3.0.jar.fileset">
                <include name="asm-*.jar"/>
                <exclude name="asm-attrs-*.jar"/>
                <exclude name="asm-tree-*.jar"/>
            </fileset>
        </path>
        <property name="asm.3.0.jar" refid="asm.3.0.jar.fileset" />

        <path id="asm-attrs.jar.path">
            <fileset dir="${project.lib}" id="asm-attrs.jar.fileset">
                <include name="asm-attrs-*.jar"/>
            </fileset>
        </path>
        <property name="asm-attrs.jar" refid="asm-attrs.jar.fileset" />

        <path id="asm-tree.jar.path">
            <fileset dir="${project.lib}" id="asm-tree.jar.fileset">
                <include name="asm-tree-*.jar"/>
            </fileset>
        </path>
        <property name="asm-tree.jar" refid="asm-tree.jar.fileset" />

        <path id="backport-util-concurrent.jar.path">
            <fileset dir="${project.lib}" id="backport-util-concurrent.jar.fileset">
                <include name="backport-util-concurrent-*.jar"/>
            </fileset>
        </path>
        <property name="backport-util-concurrent.jar" refid="backport-util-concurrent.jar.fileset" />

        <path id="c3p0.jar.path">
            <fileset dir="${project.lib}" id="c3p0.jar.fileset">
                <include name="c3p0-*.jar"/>
            </fileset>
        </path>
        <property name="c3p0.jar" refid="c3p0.jar.fileset" />

        <path id="caGrid-core.jar.path">
            <fileset dir="${project.lib}" id="caGrid-core.jar.fileset">
                <include name="cagrid-core-*.jar"/>
            </fileset>
        </path>
        <property name="caGrid-core.jar" refid="caGrid-core.jar.fileset" />

        <path id="caGrid-data-stubs.jar.path">
            <fileset dir="${project.lib}" id="caGrid-data-stubs.jar.fileset">
                <include name="cagrid-data-stubs-*.jar"/>
            </fileset>
        </path>
        <property name="caGrid-data-stubs.jar" refid="caGrid-data-stubs.jar.fileset" />

        <path id="caGrid-data-common.jar.path">
            <fileset dir="${project.lib}" id="caGrid-data-common.jar.fileset">
                <include name="cagrid-data-common-*.jar"/>
            </fileset>
        </path>
        <property name="caGrid-data-common.jar" refid="caGrid-data-common.jar.fileset" />

        <path id="caGrid-sdkQuery32-core.jar.path">
            <fileset dir="${project.lib}" id="caGrid-sdkQuery32-core.jar.fileset">
                <include name="cagrid-sdkquery32-core-*.jar"/>
            </fileset>
        </path>
        <property name="caGrid-sdkQuery32-core.jar" refid="caGrid-sdkQuery32-core.jar.fileset" />

        <path id="caGrid-cql.jar.path">
            <fileset dir="${project.lib}" id="caGrid-cql.jar.fileset">
                <include name="cagrid-cql*.jar"/>
            </fileset>
        </path>
        <property name="caGrid-cql.jar" refid="caGrid-cql.jar.fileset" />

        <path id="cglib.jar.path">
            <fileset dir="${project.lib}" id="cglib.jar.fileset">
                <include name="cglib-*.jar"/>
            </fileset>
        </path>
        <property name="cglib.jar" refid="cglib.jar.fileset" />

        <path id="checkstyle.jar.path">
            <fileset dir="${project.lib}" id="checkstyle.jar.fileset">
                <include name="checkstyle-*.jar"/>
            </fileset>
        </path>
        <property name="checkstyle.jar" refid="checkstyle.jar.fileset" />

        <path id="cobertura.jar.path">
            <fileset dir="${project.lib}" id="cobertura.jar.fileset">
                <include name="cobertura-*.jar"/>
            </fileset>
        </path>
        <property name="cobertura.jar" refid="cobertura.jar.fileset" />

        <path id="commons-beanutils.jar.path">
            <fileset dir="${project.lib}" id="commons-beanutils.jar.fileset">
                <include name="commons-beanutils-*.jar"/>
                <exclude name="commons-beanutils-core-*.jar"/>
            </fileset>
        </path>
        <property name="commons-beanutils.jar" refid="commons-beanutils.jar.fileset" />

        <path id="commons-collections.jar.path">
            <fileset dir="${project.lib}" id="commons-collections.jar.fileset">
                <include name="commons-collections-*.jar"/>
            </fileset>
        </path>
        <property name="commons-collections.jar" refid="commons-collections.jar.fileset" />

        <path id="commons-cli.jar.path">
            <fileset dir="${project.lib}" id="commons-cli.jar.fileset">
                <include name="commons-cli-*.jar"/>
            </fileset>
        </path>
        <property name="commons-cli.jar" refid="commons-cli.jar.fileset" />

        <path id="one-jar-ant-task.jar.path">
            <fileset dir="${project.lib}" id="one-jar-ant-task.jar.fileset">
                <include name="one-jar-ant-task-*.jar"/>
            </fileset>
        </path>
        <property name="one-jar-ant-task.jar" refid="one-jar-ant-task.jar.fileset" />

        <path id="commons-discovery.jar.path">
            <fileset dir="${project.lib}" id="commons-discovery.jar.fileset">
                <include name="commons-discovery-*.jar"/>
            </fileset>
        </path>
        <property name="commons-discovery.jar" refid="commons-discovery.jar.fileset" />

        <path id="commons-el.jar.path">
            <fileset dir="${project.lib}" id="commons-el.jar.fileset">
                <include name="commons-el-*.jar"/>
            </fileset>
        </path>
        <property name="commons-el.jar" refid="commons-el.jar.fileset" />

        <path id="commons-io.jar.path">
            <fileset dir="${project.lib}" id="commons-io.jar.fileset">
                <include name="commons-io-*.jar"/>
            </fileset>
        </path>
        <property name="commons-io.jar" refid="commons-io.jar.fileset" />

        <path id="commons-lang.jar.path">
            <fileset dir="${project.lib}" id="commons-lang.jar.fileset">
                <include name="commons-lang-*.jar"/>
            </fileset>
        </path>
        <property name="commons-lang.jar" refid="commons-lang.jar.fileset" />

        <path id="commons-configuration.jar.path">
            <fileset dir="${project.lib}" id="commons-configuration.jar.fileset">
                <include name="commons-configuration-*.jar"/>
            </fileset>
        </path>
        <property name="commons-configuration.jar" refid="commons-configuration.jar.fileset" />

        <path id="commons-logging.jar.path">
            <fileset dir="${project.lib}" id="commons-logging.jar.fileset">
                <include name="commons-logging-*.jar"/>
            </fileset>
        </path>
        <property name="commons-logging.jar" refid="commons-logging.jar.fileset" />

        <path id="commons-fileupload.jar.path">
            <fileset dir="${project.lib}" id="commons-fileupload.jar.fileset">
                <include name="commons-fileupload-*.jar"/>
            </fileset>
        </path>
        <property name="commons-fileupload.jar" refid="commons-fileupload.jar.fileset" />

        <path id="commons-compress.jar.path">
            <fileset dir="${project.lib}" id="commons-compress.jar.fileset">
                <include name="commons-compress-*.jar"/>
            </fileset>
        </path>
        <property name="commons-compress.jar" refid="commons-compress.jar.fileset" />

        <path id="cog-axis.jar.path">
            <fileset dir="${project.lib}" id="cog-axis.jar.fileset">
                <include name="cog-axis-*.jar"/>
            </fileset>
        </path>
        <property name="cog-axis.jar" refid="cog-axis.jar.fileset" />

        <path id="cog-jglobus.jar.path">
            <fileset dir="${project.lib}" id="cog-jglobus.jar.fileset">
                <include name="cog-jglobus-*.jar"/>
            </fileset>
        </path>
        <property name="cog-jglobus.jar" refid="cog-jglobus.jar.fileset" />

        <path id="jce.jar.path">
            <fileset dir="${project.lib}" id="jce.jar.fileset">
                <include name="jce-*.jar"/>
            </fileset>
        </path>
        <property name="jce.jar" refid="jce.jar.fileset" />

        <path id="ledatastream.jar.path">
            <fileset dir="${project.lib}" id="ledatastream.jar.fileset">
                <include name="ledatastream-*.jar"/>
            </fileset>
        </path>
        <property name="ledatastream.jar" refid="ledatastream.jar.fileset" />

        <path id="wsrf_core_enum.jar.path">
            <fileset dir="${project.lib}" id="wsrf_core_enum.jar.fileset">
                <include name="wsrf_core_enum-*.jar"/>
            </fileset>
        </path>
        <property name="wsrf_core_enum.jar" refid="wsrf_core_enum.jar.fileset" />

        <path id="wsrf_core_stubs_enum.jar.path">
            <fileset dir="${project.lib}" id="wsrf_core_stubs_enum.jar.fileset">
                <include name="wsrf_core_stubs_enum-*.jar"/>
            </fileset>
        </path>
        <property name="wsrf_core_stubs_enum.jar" refid="wsrf_core_stubs_enum.jar.fileset" />

        <path id="wss4j.jar.path">
            <fileset dir="${project.lib}" id="wss4j.jar.fileset">
                <include name="wss4j-*.jar"/>
            </fileset>
        </path>
        <property name="wss4j.jar" refid="wss4j.jar.fileset" />

        <path id="dom4j.jar.path">
            <fileset dir="${project.lib}" id="dom4j.jar.fileset">
                <include name="dom4j-*.jar"/>
            </fileset>
        </path>
        <property name="dom4j.jar" refid="dom4j.jar.fileset" />

        <path id="xercesImpl.jar.path">
            <fileset dir="${project.lib}" id="xercesImpl.jar.fileset">
                <include name="xercesImpl-*.jar"/>
            </fileset>
        </path>
        <property name="xercesImpl.jar" refid="xercesImpl.jar.fileset" />

        <path id="xerces-J.jar.path">
            <fileset dir="${project.lib}" id="xerces-J.jar.fileset">
                <include name="xerces-1.4.0.jar"/>
            </fileset>
        </path>
        <property name="xerces-J.jar" refid="xerces-J.jar.fileset"/>

        <path id="ehcache.jar.path">
            <fileset dir="${project.lib}" id="ehcache.jar.fileset">
                <include name="ehcache-*.jar"/>
            </fileset>
        </path>
        <property name="ehcache.jar" refid="ehcache.jar.fileset" />

        <path id="hibernate.jar.path">
            <fileset dir="${project.lib}" id="hibernate.jar.fileset">
                <include name="hibernate-core-*.jar"/>
            </fileset>
        </path>
        <property name="hibernate.jar" refid="hibernate.jar.fileset" />

        <path id="hibernate-client.jar.path">
            <fileset dir="${project.lib}" id="hibernate-client.jar.fileset">
                <include name="hibernate-3.2nci.jar"/>
            </fileset>
        </path>
        <property name="hibernate-client.jar" refid="hibernate-client.jar.fileset" />

        <path id="castor.jar.path">
            <fileset dir="${project.lib}" id="castor.jar.fileset">
                <include name="castor-*.jar"/>
            </fileset>
        </path>
        <property name="castor.jar" refid="castor.jar.fileset" />

        <path id="ejb3-persistence.jar.path">
            <fileset dir="${project.lib}" id="ejb3-persistence.jar.fileset">
                <include name="ejb3-persistence-*.jar"/>
            </fileset>
        </path>
        <property name="ejb3-persistence.jar" refid="ejb3-persistence.jar.fileset" />

        <path id="hibernate-annotations.jar.path">
            <fileset dir="${project.lib}" id="hibernate-annotations.jar.fileset">
                <include name="hibernate-annotations-*.jar"/>
            </fileset>
        </path>
        <property name="hibernate-annotations.jar" refid="hibernate-annotations.jar.fileset" />

        <path id="hibernate-commons-annotations.jar.path">
            <fileset dir="${project.lib}" id="hibernate-commons-annotations.jar.fileset">
                <include name="hibernate-commons-annotations-*.jar"/>
            </fileset>
        </path>
        <property name="hibernate-commons-annotations.jar" refid="hibernate-commons-annotations.jar.fileset" />

        <path id="hibernate-validator.jar.path">
            <fileset dir="${project.lib}" id="hibernate-validator.jar.fileset">
                <include name="hibernate-validator-*.jar"/>
            </fileset>
        </path>
        <property name="hibernate-validator.jar" refid="hibernate-validator.jar.fileset" />

        <path id="hibernate-c3p0.jar.path">
            <fileset dir="${project.lib}" id="hibernate-c3p0.jar.fileset">
                <include name="hibernate-c3p0-*.jar"/>
            </fileset>
        </path>
        <property name="hibernate-c3p0.jar" refid="hibernate-c3p0.jar.fileset" />

        <path id="hibernate-jbosscache.jar.path">
            <fileset dir="${project.lib}" id="hibernate-jbosscache.jar.fileset">
                <include name="hibernate-jbosscache-*.jar"/>
            </fileset>
        </path>
        <property name="hibernate-jbosscache.jar" refid="hibernate-jbosscache.jar.fileset" />

        <path id="slf4j-api.jar.path">
            <fileset dir="${project.lib}" id="slf4j-api.jar.fileset">
                <include name="slf4j-*.jar"/>
            </fileset>
        </path>
        <property name="slf4j-api.jar" refid="slf4j-api.jar.fileset" />

        <path id="jakarta-oro.jar.path">
            <fileset dir="${project.lib}" id="jakarta-oro.jar.fileset">
                <include name="oro-*.jar"/>
            </fileset>
        </path>
        <property name="jakarta-oro.jar" refid="jakarta-oro.jar.fileset" />

        <path id="javaee.jar.path">
            <fileset dir="${project.lib}" id="javaee.jar.fileset">
                <include name="javaee-*.jar"/>
            </fileset>
        </path>
        <property name="javaee.jar" refid="javaee.jar.fileset" />

        <path id="jaxen.jar.path">
            <fileset dir="${project.lib}" id="jaxen.jar.fileset">
                <include name="jaxen-*.jar"/>
            </fileset>
        </path>
        <property name="jaxen.jar" refid="jaxen.jar.fileset" />

        <path id="jboss-aop-client.jar.path">
            <fileset dir="${project.lib}" id="jboss-aop-client.jar.fileset">
                <include name="jboss-aop-client-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-aop-client.jar" refid="jboss-aop-client.jar.fileset" />

        <path id="jboss-aspect-client.jar.path">
            <fileset dir="${project.lib}" id="jboss-aspect-client.jar.fileset">
                <include name="jboss-aspect-client-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-aspect-client.jar" refid="jboss-aspect-client.jar.fileset" />

        <path id="jbossall-client.jar.path">
            <fileset dir="${project.lib}" id="jbossall-client.jar.fileset">
                <include name="jbossall-client-*.jar"/>
            </fileset>
        </path>
        <property name="jbossall-client.jar" refid="jbossall-client.jar.fileset" />

        <path id="jboss-remoting.jar.path">
            <fileset dir="${project.lib}" id="jboss-remoting.jar.fileset">
                <include name="jboss-remoting-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-remoting.jar" refid="jboss-remoting.jar.fileset" />

        <path id="jboss-ejb3-client.jar.path">
            <fileset dir="${project.lib}" id="jboss-ejb3-client.jar.fileset">
                <include name="jboss-ejb3-client-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-ejb3-client.jar" refid="jboss-ejb3-client.jar.fileset" />

        <path id="jboss-ejb3-ext-api.jar.path">
            <fileset dir="${project.lib}" id="jboss-ejb3-ext-api.jar.fileset">
                <include name="jboss-ejb3-ext-api-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-ejb3-ext-api.jar" refid="jboss-ejb3-ext-api.jar.fileset" />

        <path id="jboss-annotations-ejb3.jar.path">
            <fileset dir="${project.lib}" id="jboss-annotations-ejb3.jar.fileset">
                <include name="jboss-annotations-ejb3-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-annotations-ejb3.jar" refid="jboss-annotations-ejb3.jar.fileset" />

        <path id="jboss-dependency.jar.path">
            <fileset dir="${project.lib}" id="jboss-dependency.jar.fileset">
                <include name="jboss-dependency-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-dependency.jar" refid="jboss-dependency.jar.fileset" />

        <path id="jboss-aop-jdk50.jar.path">
            <fileset dir="${project.lib}" id="jboss-aop-jdk50.jar.fileset">
                <include name="jboss-aop-jdk50-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-aop-jdk50.jar" refid="jboss-aop-jdk50.jar.fileset" />

        <path id="jboss-ejb3.jar.path">
            <fileset dir="${project.lib}" id="jboss-ejb3.jar.fileset">
                <include name="jboss-ejb3-ext-api-*.jar"/>
                <exclude name="jboss-ejb3-client-*.jar"/>
                <exclude name="jboss-ejb3x*.jar"/>
            </fileset>
        </path>
        <property name="jboss-ejb3.jar" refid="jboss-ejb3.jar.fileset" />

        <path id="jboss-system-jmx-client.jar.path">
            <fileset dir="${project.lib}" id="jboss-system-jmx-client.jar.fileset">
                <include name="jboss-system-jmx-client-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-system-jmx-client.jar" refid="jboss-system-jmx-client.jar.fileset" />

        <path id="jboss-system-jmx.jar.path">
            <fileset dir="${project.lib}" id="jboss-system-jmx.jar.fileset">
                <include name="jboss-system-jmx-*.jar"/>
                <exclude name="jboss-system-jmx-client-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-system-jmx.jar" refid="jboss-system-jmx.jar.fileset" />

        <path id="jboss-system-client.jar.path">
            <fileset dir="${project.lib}" id="jboss-system-client.jar.fileset">
                <include name="jboss-system-client-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-system-client.jar" refid="jboss-system-client.jar.fileset" />

        <path id="jboss-kernel.jar.path">
            <fileset dir="${project.lib}" id="jboss-kernel.jar.fileset">
                <include name="jboss-kernel-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-kernel.jar" refid="jboss-kernel.jar.fileset" />

        <path id="jboss-j2se.jar.path">
            <fileset dir="${project.lib}" id="jboss-j2se.jar.fileset">
                <include name="jboss-j2se-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-j2se.jar" refid="jboss-j2se.jar.fileset" />

        <path id="jboss-logging-spi.jar.path">
            <fileset dir="${project.lib}" id="jboss-logging-spi.jar.fileset">
                <include name="jboss-logging-spi-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-logging-spi.jar" refid="jboss-logging-spi.jar.fileset" />

        <path id="jta.jar.path">
            <fileset dir="${project.lib}" id="jta.jar.fileset">
                <include name="jta-*.jar"/>
            </fileset>
        </path>
        <property name="jta.jar" refid="jta.jar.fileset" />

        <path id="junit.jar.path">
            <fileset dir="${project.lib}" id="junit.jar.fileset">
                <include name="junit-*.jar"/>
            </fileset>
        </path>
        <property name="junit.jar" refid="junit.jar.fileset" />

        <path id="oscache.jar.path">
            <fileset dir="${project.lib}" id="oscache.jar.fileset">
                <include name="oscache-*.jar"/>
            </fileset>
        </path>
        <property name="oscache.jar" refid="oscache.jar.fileset" />

        <path id="urlrewrite.jar.path">
            <fileset dir="${project.lib}" id="urlrewrite.jar.fileset">
                <include name="urlrewrite-*.jar"/>
            </fileset>
        </path>
        <property name="urlrewrite.jar" refid="urlrewrite.jar.fileset" />

        <path id="sitemesh.jar.path">
            <fileset dir="${project.lib}" id="sitemesh.jar.fileset">
                <include name="sitemesh-*.jar"/>
            </fileset>
        </path>
        <property name="sitemesh.jar" refid="sitemesh.jar.fileset" />

        <path id="log4j.jar.path">
            <fileset dir="${project.lib}" id="log4j.jar.fileset">
                <include name="log4j-*.jar"/>
            </fileset>
        </path>
        <property name="log4j.jar" refid="log4j.jar.fileset" />

        <path id="myfaces-api.jar.path">
            <fileset dir="${project.lib}" id="myfaces-api.jar.fileset">
                <include name="myfaces-api-*.jar"/>
            </fileset>
        </path>
        <property name="myfaces-api.jar" refid="myfaces-api.jar.fileset" />

        <path id="mysql-connector-java.jar.path">
            <fileset dir="${project.lib}" id="mysql-connector-java.jar.fileset">
                <include name="mysql-connector-java-*.jar"/>
            </fileset>
        </path>
        <property name="mysql-connector-java.jar" refid="mysql-connector-java.jar.fileset" />
        <pathconvert property="database.driver.file" refid="mysql-connector-java.jar.path"/>

        <path id="pmd.jar.path">
            <fileset dir="${project.lib}" id="pmd.jar.fileset">
                <include name="pmd-*.jar"/>
            </fileset>
        </path>
        <property name="pmd.jar" refid="pmd.jar.fileset" />

        <path id="selenium-server.jar.path">
            <fileset dir="${project.lib}" id="selenium-server.jar.fileset">
                <include name="selenium-server-*.jar"/>
                <exclude name="selenium-server-coreless-*.jar"/>
                <exclude name="selenium-server-sources-*.jar"/>
                <exclude name="selenium-server-tests-*.jar"/>
            </fileset>
        </path>
        <property name="selenium-server.jar" refid="selenium-server.jar.fileset" />

        <path id="selenium-java-client-driver.jar.path">
            <fileset dir="${project.lib}" id="selenium-java-client-driver.jar.fileset">
                <include name="selenium-java-client-driver-*.jar"/>
                <exclude name="selenium-java-client-driver-sources-*.jar"/>
                <exclude name="selenium-java-client-driver-tests-*.jar"/>
            </fileset>
        </path>
        <property name="selenium-java-client-driver.jar" refid="selenium-java-client-driver.jar.fileset" />

        <path id="selenium-java-client-driver-tests.jar.path">
            <fileset dir="${project.lib}" id="selenium-java-client-driver-tests.jar.fileset">
                <include name="selenium-java-client-driver-tests-*.jar"/>
            </fileset>
        </path>
        <property name="selenium-java-client-driver-tests.jar" refid="selenium-java-client-driver-tests.jar.fileset" />

        <path id="spring.jar.path">
            <fileset dir="${project.lib}" id="spring.jar.fileset">
                <include name="spring-*.jar"/>
                <exclude name="spring-mock-*.jar"/>
                <exclude name="spring-richclient-full-*.jar"/>
                <exclude name="spring-osgi-*.jar"/>
            </fileset>
        </path>
        <property name="spring.jar" refid="spring.jar.fileset" />

        <path id="spring-mock.jar.path">
            <fileset dir="${project.lib}" id="spring-mock.jar.fileset">
                <include name="spring-mock-*.jar"/>
            </fileset>
        </path>
        <property name="spring-mock.jar" refid="spring-mock.jar.fileset" />

        <path id="javacsv.jar.path">
            <fileset dir="${project.lib}" id="javacsv.jar.fileset">
                <include name="javacsv-*.jar"/>
            </fileset>
        </path>
        <property name="javacsv.jar" refid="javacsv.jar.fileset" />

        <path id="csmapi.jar.path">
            <fileset dir="${project.lib}" id="csmapi.jar.fileset">
                <include name="csmapi-*.jar"/>
            </fileset>
        </path>
        <property name="csmapi.jar" refid="csmapi.jar.fileset" />

        <path id="svntask.jar.path">
            <fileset dir="${project.lib}" id="svntask.jar.fileset">
                <include name="svntask-*.jar"/>
            </fileset>
        </path>
        <property name="svntask.jar" refid="svntask.jar.fileset" />

        <path id="svnkit.jar.path">
            <fileset dir="${project.lib}" id="svnkit.jar.fileset">
                <include name="svnkit-*.jar"/>
            </fileset>
        </path>
        <property name="svnkit.jar" refid="svnkit.jar.fileset" />

        <path id="ganymed.jar.path">
            <fileset dir="${project.lib}" id="ganymed.jar.fileset">
                <include name="ganymed-*.jar"/>
            </fileset>
        </path>
        <property name="ganymed.jar" refid="ganymed.jar.fileset" />

        <path id="javasvn.jar.path">
            <fileset dir="${project.lib}" id="javasvn.jar.fileset">
                <include name="javasvn-*.jar"/>
            </fileset>
        </path>
        <property name="javasvn.jar" refid="javasvn.jar.fileset" />

        <path id="clm.jar.path">
            <fileset dir="${project.lib}" id="clm.jar.fileset">
                <include name="clm-*.jar"/>
            </fileset>
        </path>
        <property name="clm.jar" refid="clm.jar.fileset" />

        <path id="addressing.jar.path">
            <fileset dir="${project.lib}" id="addressing.jar.fileset">
                <include name="ws-addressing-*.jar"/>
            </fileset>
        </path>
        <property name="addressing.jar" refid="addressing.jar.fileset" />

        <path id="struts2-core.jar.path">
            <fileset dir="${project.lib}" id="struts2-core.jar.fileset">
                <include name="struts2-core-*.jar"/>
            </fileset>
        </path>
        <property name="struts2-core.jar" refid="struts2-core.jar.fileset" />

        <path id="xwork.jar.path">
            <fileset dir="${project.lib}" id="xwork.jar.fileset">
                <include name="xwork-*.jar"/>
            </fileset>
        </path>
        <property name="xwork.jar" refid="xwork.jar.fileset" />

        <path id="ognl.jar.path">
            <fileset dir="${project.lib}" id="ognl.jar.fileset">
                <include name="ognl-*.jar"/>
            </fileset>
        </path>
        <property name="ognl.jar" refid="ognl.jar.fileset" />

        <path id="displaytag.jar.path">
            <fileset dir="${project.lib}" id="displaytag.jar.fileset">
                <include name="displaytag-*.jar"/>
            </fileset>
        </path>
        <property name="displaytag.jar" refid="displaytag.jar.fileset" />

        <path id="freemarker.jar.path">
            <fileset dir="${project.lib}" id="freemarker.jar.fileset">
                <include name="freemarker-*.jar"/>
            </fileset>
        </path>
        <property name="freemarker.jar" refid="freemarker.jar.fileset" />

        <path id="jstl.jar.path">
            <fileset dir="${project.lib}" id="jstl.jar.fileset">
                <include name="jstl-*.jar"/>
            </fileset>
        </path>
        <property name="jstl.jar" refid="jstl.jar.fileset" />

        <path id="standard.jar.path">
            <fileset dir="${project.lib}" id="standard.jar.fileset">
                <include name="standard-*.jar"/>
            </fileset>
        </path>
        <property name="standard.jar" refid="standard.jar.fileset" />

        <path id="axis.jar.path">
            <fileset dir="${project.lib}" id="axis.jar.fileset">
                <include name="axis-1.4.2_10nci*.jar"/>
            </fileset>
        </path>
        <property name="axis.jar" refid="axis.jar.fileset" />

        <path id="jboss-cache.jar.path">
            <fileset dir="${project.lib}" id="jboss-cache.jar.fileset">
                <include name="jboss-cache-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-cache.jar" refid="jboss-cache.jar.fileset" />

        <path id="jboss-common-core.jar.path">
            <fileset dir="${project.lib}" id="jboss-common-core.jar.fileset">
                <include name="jboss-common-core-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-common-core.jar" refid="jboss-common-core.jar.fileset" />

        <path id="jboss-system.jar.path">
            <fileset dir="${project.lib}" id="jboss-system.jar.fileset">
                <include name="jboss-system-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-system.jar" refid="jboss-system.jar.fileset" />

        <path id="jboss-jmx.jar.path">
            <fileset dir="${project.lib}" id="jboss-jmx.jar.fileset">
                <include name="jboss-jmx-*.jar"/>
            </fileset>
        </path>
        <property name="jboss-jmx.jar" refid="jboss-jmx.jar.fileset" />

        <path id="jgroups.jar.path">
            <fileset dir="${project.lib}" id="jgroups.jar.fileset">
                <include name="jgroups-*.jar"/>
            </fileset>
        </path>
        <property name="jgroups.jar" refid="jgroups.jar.fileset" />

        <path id="concurrent.jar.path">
            <fileset dir="${project.lib}" id="concurrent.jar.fileset">
                <include name="concurrent-*.jar"/>
            </fileset>
        </path>
        <property name="concurrent.jar" refid="concurrent.jar.fileset" />

        <path id="ncicb-ant.jar.path">
            <fileset dir="${project.lib}" id="ncicb-ant.jar.fileset">
                <include name="ncicb-ant-*.jar"/>
            </fileset>
        </path>
        <property name="ncicb-ant.jar" refid="ncicb-ant.jar.fileset" />

        <path id="nci-commons-core.jar.path">
            <fileset dir="${project.lib}" id="nci-commons-core.jar.fileset">
                <include name="nci-commons-core-*.jar"/>
                <exclude name="*-1.2.11.jar"/>
            </fileset>
        </path>
        <property name="nci-commons-core.jar" refid="nci-commons-core.jar.fileset" />

        <path id="nci-commons-struts2.jar.path">
            <fileset dir="${project.lib}" id="nci-commons-struts2.jar.fileset">
                <include name="nci-commons-struts2-*.jar"/>
            </fileset>
        </path>
        <property name="nci-commons-struts2.jar" refid="nci-commons-struts2.jar.fileset" />

        <path id="ezmorph.jar.path">
            <fileset dir="${project.lib}" id="ezmorph.jar.fileset">
                <include name="ezmorph-*.jar"/>
            </fileset>
        </path>
        <property name="ezmorph.jar" refid="ezmorph.jar.fileset" />

        <path id="json-lib.jar.path">
            <fileset dir="${project.lib}" id="json-lib.jar.fileset">
                <include name="json-lib-*.jar"/>
            </fileset>
        </path>
        <property name="json-lib.jar" refid="json-lib.jar.fileset" />

        <path id="xalan.jar.path">
            <fileset dir="${project.lib}" id="xalan.jar.fileset">
                <include name="xalan-*.jar"/>
            </fileset>
        </path>
        <property name="xalan.jar" refid="xalan.jar.fileset" />

        <path id="serializer.jar.path">
            <fileset dir="${project.lib}" id="serializer.jar.fileset">
                <include name="serializer-*.jar"/>
            </fileset>
        </path>
        <property name="serializer.jar" refid="serializer.jar.fileset" />

        <path id="dozer.jar.path">
            <fileset dir="${project.lib}" id="dozer.jar.fileset">
                <include name="dozer-*.jar"/>
            </fileset>
        </path>
        <property name="dozer.jar" refid="dozer.jar.fileset" />

        <path id="javassist.jar.path">
            <fileset dir="${project.lib}" id="javassist.jar.fileset">
                <include name="javassist-*.jar"/>
            </fileset>
        </path>
        <property name="javassist.jar" refid="javassist.jar.fileset" />

        <path id="rmiio.jar.path">
            <fileset dir="${project.lib}" id="rmiio.jar.fileset">
                <include name="rmiio-*.jar"/>
            </fileset>
        </path>
        <property name="rmiio.jar" refid="rmiio.jar.fileset" />

        <path id="wsdl4j.jar.path">
            <fileset dir="${project.lib}" id="wsdl4j.jar.fileset">
                <include name="wsdl4j-*.jar"/>
            </fileset>
        </path>
        <property name="wsdl4j.jar" refid="wsdl4j.jar.fileset" />

        <path id="guava.jar.path">
            <fileset dir="${project.lib}" id="guava.jar.fileset">
                <include name="guava-*.jar"/>
            </fileset>
        </path>
        <property name="guava.jar" refid="guava.jar.fileset" />

        <path id="liquibase.jar.path">
            <fileset dir="${project.lib}" id="liquibase.jar.fileset">
                <include name="liquibase-*.jar"/>
            </fileset>
        </path>
        <property name="liquibase.jar" refid="liquibase.jar.fileset" />

        <path id="guice.jar.path">
            <fileset dir="${project.lib}" id="guice.jar.fileset">
                <include name="guice-*.jar"/>
            </fileset>
        </path>
        <property name="guice.jar" refid="guice.jar.fileset" />

        <path id="aopalliance.jar.path">
            <fileset dir="${project.lib}" id="aopalliance.jar.fileset">
                <include name="aopalliance-*.jar"/>
            </fileset>
        </path>
        <property name="aopalliance.jar" refid="aopalliance.jar.fileset" />

        <path id="guice-multibindings.jar.path">
            <fileset dir="${project.lib}" id="guice-multibindings.jar.fileset">
                <include name="multibindings-*.jar"/>
            </fileset>
        </path>
        <property name="guice-multibindings.jar" refid="guice-multibindings.jar.fileset" />

        <path id="guice-assistedinject.jar.path">
            <fileset dir="${project.lib}" id="guice-assistedinject.jar.fileset">
                <include name="guice-*.jar"/>
            </fileset>
        </path>
        <property name="guice-assistedinject.jar" refid="guice-assistedinject.jar.fileset" />

        <path id="wstx.jar.path">
            <fileset dir="${project.lib}" id="wstx.jar.fileset">
                <include name="wstx-*.jar"/>
            </fileset>
        </path>
        <property name="wstx.jar" refid="wstx.jar.fileset" />

        <path id="mockito.jar.path">
            <fileset dir="${project.lib}" id="mockito.jar.fileset">
                <include name="mockito-*.jar"/>
            </fileset>
        </path>
        <property name="mockito.jar" refid="mockito.jar.fileset" />

        <path id="gnu-regexp.jar.path">
            <fileset dir="${project.lib}" id="gnu-regexp.jar.fileset">
                <include name="gnu-regexp-*.jar"/>
            </fileset>
        </path>
        <property name="gnu-regexp.jar" refid="gnu-regexp.jar.fileset" />

        <path id="atlassian-all.jar.path">
            <fileset dir="${project.lib}" id="atlassian-all.jar.fileset">
                <include name="atlassian-*.jar"/>
            </fileset>
        </path>
        <property name="atlassian.jar" refid="atlassian-all.jar.fileset" />

        <path id="joda-time.jar.path">
            <fileset dir="${project.lib}" id="joda-time.jar.fileset">
                <include name="joda-time*.jar"/>
            </fileset>
        </path>
        <property name="joda-time.jar" refid="joda-time.jar.fileset" />


        <path id="jboss.dependencies.path">
            <fileset id="jboss.dependencies.fileset" dir="${project.lib}">
                <include name="${jboss-annotations-ejb3.jar}"/>
                <include name="${jbossall-client.jar}"/>
                <include name="${jboss-common-core.jar}"/>
                <include name="${jboss-cache.jar}"/>
                <include name="${jboss-jmx.jar}"/>
                <include name="${jboss-system.jar}"/>
                <include name="${jboss-kernel.jar}"/>
                <include name="${jboss-j2se.jar}"/>
                <include name="${jboss-logging-spi.jar}"/>
                <include name="${jboss-system-jmx-client.jar}"/>
                <include name="${jboss-system-jmx.jar}"/>
                <include name="${jboss-system-client.jar}"/>
                <include name="${jboss-aop-client.jar}"/>
                <include name="${jboss-aspect-client.jar}"/>
                <include name="${jboss-ejb3-client.jar}"/>
                <include name="${jboss-dependency.jar}"/>
                <include name="${jboss-aop-jdk50.jar}"/>
                <include name="${jboss-ejb3.jar}"/>
                <include name="${javassist.jar}"/>
                <include name="${hibernate-jbosscache.jar}"/>
                <include name="${jgroups.jar}"/>
            </fileset>
        </path>

        <path id="cn2magetab.dependencies.compile.path">
            <fileset refid="commons-cli.jar.fileset"/>
            <fileset refid="commons-io.jar.fileset"/>
            <fileset refid="commons-lang.jar.fileset"/>
            <fileset refid="log4j.jar.fileset"/>
            <fileset refid="javacsv.jar.fileset"/>
            <fileset refid="guice.jar.fileset"/>
            <fileset refid="aopalliance.jar.fileset"/>
            <fileset refid="nci-commons-core.jar.fileset"/>
        </path>

        <path id="cn2magetab.test.dependencies.path">
            <path refid="cn2magetab.dependencies.compile.path"/>
            <path refid="unit.test.dependencies.path"/>
        </path>

        <path id="common.compile.dependencies.path">
            <fileset refid="javaee.jar.fileset"/>
            <fileset refid="dom4j.jar.fileset"/>
            <fileset refid="affxfusion.jar.fileset"/>
            <fileset refid="cglib.jar.fileset"/>
            <fileset refid="commons-lang.jar.fileset"/>
            <fileset refid="clm.jar.fileset"/>
            <fileset refid="javacsv.jar.fileset"/>
            <fileset refid="mysql-connector-java.jar.fileset"/>
            <fileset refid="rmiio.jar.fileset"/>
            <fileset refid="xerces-J.jar.fileset"/>
            <fileset refid="xercesImpl.jar.fileset"/>
            <fileset refid="commons-configuration.jar.fileset"/>
            <fileset refid="guice.jar.fileset"/>
            <fileset refid="guice-multibindings.jar.fileset"/>
            <fileset refid="guice-assistedinject.jar.fileset"/>
            <fileset refid="wstx.jar.fileset"/>
            <fileset refid="slf4j-api.jar.fileset"/>
            <fileset id="common.grid.dependencies.fileset" dir="${project.lib}">
                <include name="${axis.jar}"/>
                <include name="${caGrid-core.jar}"/>
                <include name="${caGrid-data-common.jar}"/>
                <include name="${caGrid-sdkQuery32-core.jar}"/>
                <include name="${caGrid-data-stubs.jar}"/>
                <include name="${caGrid-cql.jar}"/>
                <include name="${ejb3-persistence.jar}"/>
                <include name="${hibernate.jar}"/>
                <include name="${hibernate-annotations.jar}"/>
                <include name="${hibernate-validator.jar}"/>
                <include name="${hibernate-commons-annotations.jar}"/>
                <include name="${nci-commons-core.jar}"/>
            </fileset>
            <fileset id="common.compile.partial.dependencies.fileset" dir="${project.lib}">
                <include name="${commons-beanutils.jar}"/>
                <include name="${commons-collections.jar}"/>
                <include name="${guava.jar}"/>
                <include name="slf4j*.jar"/>
                <include name="${commons-io.jar}"/>
                <include name="${log4j.jar}"/>
                <include name="${spring.jar}"/>
                <include name="${castor.jar}"/>
                <include name="${csmapi.jar}"/>
            </fileset>
            <fileset dir="${project.lib}">
            <include name="atlassian-core*.jar"/>
                <include name="atlassian-util*.jar"/>
                <include name="atlassian-event*.jar"/>
                <include name="atlassian-velocity*.jar"/>
                <include name="atlassian-trusted*.jar"/>
                <include name="atlassian-plugins*.jar"/>
                <include name="atlassian-template*.jar"/>
            <include name="sal-*.jar"/>
            <include name="package-scanner-*.jar"/>
            <include name="org.apache.felix*.jar"/>
            <include name="bndlib*.jar"/>
            <include name="spring-osgi-*.jar"/>
            <include name="velocity-*.jar"/>
            <include name="peaberry-*.jar"/>
            <include name="${xwork.jar}"/>
            </fileset>
        </path>
        <pathtofileset name="common.compile.dependencies.fileset" pathrefid="common.compile.dependencies.path" dir="${project.lib}"/>

        <path id="external.api.dependencies.path">
            <fileset refid="dozer.jar.fileset"/>
            <fileset refid="rmiio.jar.fileset"/>
            <fileset refid="guava.jar.fileset"/>
        </path>
        <pathtofileset name="external.api.dependencies.fileset" pathrefid="external.api.dependencies.path" dir="${project.lib}"/>

        <path id="ejb.compile.dependencies.path">
            <fileset refid="common.compile.dependencies.fileset"/>
            <fileset refid="jboss.dependencies.fileset"/>
            <fileset refid="external.api.dependencies.fileset"/>
            <fileset refid="ejb3-persistence.jar.fileset"/>
            <fileset refid="javassist.jar.fileset"/>
            <fileset refid="commons-compress.jar.fileset"/>
            <fileset refid="gnu-regexp.jar.fileset"/>
            <fileset refid="liquibase.jar.fileset"/>
        </path>

        <path id="grid.compile.dependencies.path">
            <fileset refid="common.compile.partial.dependencies.fileset"/>
            <fileset refid="common.grid.dependencies.fileset"/>
            <fileset id="grid.compile.partial.dependencies.fileset" dir="${project.lib}">
                <include name="${addressing.jar}"/>
                <include name="${cog-axis.jar}"/>
                <include name="${cog-jglobus.jar}"/>
                <include name="${commons-discovery.jar}"/>
                <include name="${jce.jar}"/>
                <include name="${wsrf_core_enum.jar}"/>
                <include name="${wsrf_core_stubs_enum.jar}"/>
                <include name="${wss4j.jar}"/>
                <include name="${xercesImpl.jar}"/>
            </fileset>
        </path>
        <pathtofileset name="grid.compile.dependencies.fileset" pathrefid="grid.compile.dependencies.path" dir="${project.lib}"/>


        <!-- all jars that should go in the caarray.ear!/lib/ -->
        <path id="war.compile.ear-provided.depenendencies.path">
            <fileset id="war.compile.ear-provided.depenendencies.fileset" dir="${project.lib}">
                <include name="${commons-compress.jar}"/>
                <include name="visualization*.jar"/>
                <include name="icu*.jar"/>
                <include name="${commons-fileupload.jar}"/>
                <include name="${json-lib.jar}"/>
                <include name="${jericho-html.jar}"/>
                <include name="${ezmorph.jar}"/>
            </fileset>
            <fileset refid="common.compile.dependencies.fileset"/>
            <path refid="ejb.compile.dependencies.path"/>
        </path>
        <pathtofileset name="war.compile.ear-provided.depenendencies.fileset" pathrefid="war.compile.ear-provided.depenendencies.path" dir="${project.lib}"/>

        <!-- all jars that are provided by the container -->
        <path id="war.compile.container-provided.depenendencies.path" >
            <fileset refid="xerces-J.jar.fileset"/>
            <fileset refid="xercesImpl.jar.fileset"/>
            <fileset refid="wstx.jar.fileset" />
        </path>
        <pathtofileset name="war.compile.container-provided.depenendencies.fileset" pathrefid="war.compile.container-provided.depenendencies.path" dir="${project.lib}"/>

        <path id="war.compile.dependencies.path">
            <!-- all jars that should go in caarray.war!/WEB-INF/lib/ -->
            <fileset id="war.compile.war-provided.depenendencies.fileset" dir="${project.lib}">
                <include name="${jstl.jar}"/>
                <include name="${standard.jar}"/>
                <include name="${oscache.jar}"/>
                <include name="${ajaxtags.jar}"/>
                <include name="${liquibase.jar}"/>
                <include name="${sitemesh.jar}"/>
                <include name="${displaytag.jar}"/>
                <include name="${struts2-core.jar}"/>
                <include name="${xwork.jar}"/>
                <include name="${freemarker.jar}"/>
                <include name="${nci-commons-struts2.jar}"/>
                <include name="${ognl.jar}"/>
                <include name="${urlrewrite.jar}"/>
            </fileset>

            <fileset refid="spring.jar.fileset" />

            <!-- all jars that should go in the caarray.ear!/lib/ -->
            <fileset refid="war.compile.ear-provided.depenendencies.fileset"/>

            <!-- all jars that are provided by the container -->
            <fileset refid="war.compile.container-provided.depenendencies.fileset" />

        </path>
        <pathtofileset name="war.compile.dependencies.fileset" pathrefid="war.compile.dependencies.path" dir="${project.lib}"/>

        <path id="pmd.dependencies.path">
            <fileset refid="asm.3.0.jar.fileset"/>
            <fileset refid="pmd.jar.fileset"/>
            <fileset refid="jaxen.jar.fileset"/>
            <fileset refid="backport-util-concurrent.jar.fileset"/>
        </path>

        <path id="cobertura.dependencies.path">
            <fileset refid="cobertura.jar.fileset"/>
            <fileset refid="asm.3.0.jar.fileset"/>
            <fileset refid="asm-tree.jar.fileset"/>
            <fileset refid="jakarta-oro.jar.fileset"/>
            <fileset refid="log4j.jar.fileset"/>
        </path>

        <path id="svn.dependencies.path">
            <fileset refid="svntask.jar.fileset"/>
            <fileset refid="svnkit.jar.fileset"/>
        </path>

        <path id="unit.test.dependencies.path">
            <fileset refid="jboss.dependencies.fileset"/>
            <fileset id="test.dependencies.fileset" dir="${project.lib}">
                <include name="${antlr.jar}"/>
                <include name="${asm.jar}"/>
                <include name="${c3p0.jar}"/>
                <include name="${hibernate-c3p0.jar}"/>
                <include name="${hibernate-jbosscache.jar}"/>
                <include name="${commons-logging.jar}" />
                <include name="${concurrent.jar}"/>
                <include name="${jgroups.jar}"/>
                <include name="${junit.jar}"/>
                <include name="${ledatastream.jar}"/>
                <include name="${mockito.jar}"/>
                <include name="hamcrest-*.jar"/>
            </fileset>
        </path>

        <path id="selenium.dependencies.path">
            <fileset refid="test.dependencies.fileset"/>
            <fileset refid="selenium-server.jar.fileset"/>
            <fileset refid="selenium-java-client-driver.jar.fileset"/>
            <fileset refid="selenium-java-client-driver-tests.jar.fileset"/>
        </path>

        <path id="client.dependencies.path">
            <fileset refid="jboss.dependencies.fileset"/>
            <fileset refid="common.compile.dependencies.fileset"/>
        </path>
        <pathtofileset name="client.dependencies.fileset" pathrefid="client.dependencies.path" dir="${project.lib}"/>

        <path id="client.test.dependencies.path">
            <fileset refid="jboss.dependencies.fileset"/>
            <fileset refid="common.compile.dependencies.fileset"/>
            <fileset refid="test.dependencies.fileset"/>
            <fileset refid="external.api.dependencies.fileset"/>
        </path>

        <path id="common.test.dependencies.path">
            <fileset refid="common.compile.dependencies.fileset"/>
            <fileset refid="jboss.dependencies.fileset"/>
            <fileset refid="test.dependencies.fileset"/>
        </path>

        <path id="ejb.test.dependencies.path">
            <fileset refid="xercesImpl.jar.fileset"/>
            <path refid="ejb.compile.dependencies.path"/>
            <fileset refid="jboss-annotations-ejb3.jar.fileset"/>
            <fileset refid="test.dependencies.fileset"/>
            <fileset refid="liquibase.jar.fileset"/>
            <path refid="jboss-ejb3.jar.path" />
            <fileset refid="jaxen.jar.fileset"/>
        </path>

        <path id="war.test.dependencies.path">
            <fileset refid="war.compile.dependencies.fileset"/>
            <fileset refid="test.dependencies.fileset"/>
             <fileset dir="${project.lib}">
                <include name="${spring-mock.jar}"/>
            </fileset>
        </path>

        <path id="grid.dependencies.lib.path">
            <fileset dir="${project.lib}" id="grid.dependencies.lib.fileset">
                <include name="${addressing.jar}" />
                <include name="${cog-axis.jar}" />
                <include name="${cog-jglobus.jar}" />
                <include name="${commons-discovery.jar}" />
                <include name="${jce.jar}" />
                <include name="${wsrf_core_enum.jar}"/>
                <include name="${wsrf_core_stubs_enum.jar}"/>
                <include name="${wss4j.jar}" />
                <include name="${xercesImpl.jar}" />
                <include name="${castor.jar}" />
            </fileset>
        </path>

        <path id="test.grid.dependencies.path">
            <fileset refid="grid.compile.dependencies.fileset"/>
            <fileset refid="jboss.dependencies.fileset"/>
            <fileset refid="test.dependencies.fileset"/>
            <fileset refid="grid.dependencies.caarray-grid-svc.legacy.build.fileset" />
            <fileset refid="grid.dependencies.caarray-grid-svc.v1_0.build.fileset" />
            <fileset refid="grid.dependencies.caarray-grid-svc.lib.fileset" />
            <path refid="caarray-client.common.grid.dependencies.path"/>
            <path refid="external.api.dependencies.path" />
        </path>

        <path id="caarray-client.common.dependencies.path">
            <fileset dir="${project.lib}" id="caarray-client.common.dependencies.fileset">
                <include name="${commons-collections.jar}" />
                <include name="${commons-lang.jar}" />
                <include name="${commons-io.jar}" />
                <include name="${commons-logging.jar}" />
                <include name="${log4j.jar}" />
                <include name="${javacsv.jar}"/>
            </fileset>
        </path>

        <path id="caarray-client.common.java.dependencies.path">
            <fileset refid="caarray-client.common.dependencies.fileset"/>
            <fileset refid="jboss.dependencies.fileset"/>
            <fileset dir="${project.lib}">
                <include name="${jboss-ejb3-ext-api.jar}" />
                <include name="${jboss-remoting.jar}" />
            </fileset>
        </path>
        <pathtofileset name="caarray-client.common.java.dependencies.fileset" pathrefid="caarray-client.common.java.dependencies.path" dir="${project.lib}"/>

        <path id="caarray-client.common.grid.dependencies.path">
            <fileset refid="caarray-client.common.dependencies.fileset"/>
            <fileset refid="grid.dependencies.lib.fileset"/>
            <fileset refid="xercesImpl.jar.fileset"/>
            <fileset dir="${project.lib}">
                <include name="${axis.jar}" />
                <include name="${javaee.jar}"/>
                <include name="${wsdl4j.jar}"/>
                <include name="${guava.jar}"/>
                <include name="${nci-commons-core.jar}"/>
                <include name="${caGrid-cql.jar}"/>
            </fileset>
        </path>
        <pathtofileset name="caarray-client.common.grid.dependencies.fileset" pathrefid="caarray-client.common.grid.dependencies.path" dir="${project.lib}"/>

        <path id="caarray-client.legacy.common.dependencies.path">
            <fileset dir="${project.lib}">
                <include name="${axis.jar}" />
                <include name="${caGrid-cql.jar}" />
                <include name="${csmapi.jar}" />
                <include name="${ejb3-persistence.jar}" />
                <include name="${hibernate.jar}" />
                <include name="${hibernate-annotations.jar}" />
                <include name="${hibernate-validator.jar}"/>
                <include name="${javassist.jar}" />
                <include name="${nci-commons-core.jar}" />
            </fileset>
        </path>
        <pathtofileset name="caarray-client.legacy.common.dependencies.fileset" pathrefid="caarray-client.legacy.common.dependencies.path" dir="${project.lib}"/>

        <path id="caarray-client.legacy.java.dependencies.path">
            <fileset refid="caarray-client.common.java.dependencies.fileset"/>
            <fileset refid="caarray-client.legacy.common.dependencies.fileset"/>
        </path>
        <pathtofileset name="caarray-client.legacy.java.dependencies.fileset" pathrefid="caarray-client.legacy.java.dependencies.path" dir="${project.lib}"/>

        <path id="caarray-client.legacy.grid.dependencies.path">
            <fileset refid="caarray-client.common.grid.dependencies.fileset"/>
            <fileset refid="caarray-client.legacy.common.dependencies.fileset"/>
        </path>
        <pathtofileset name="caarray-client.legacy.grid.dependencies.fileset" pathrefid="caarray-client.legacy.grid.dependencies.path" dir="${project.lib}"/>

        <path id="caarray-client.external.v1_0.java.dependencies.path">
            <fileset refid="caarray-client.common.java.dependencies.fileset"/>
            <fileset refid="external.api.dependencies.fileset"/>
            <fileset dir="${project.lib}" includes="${mysql-connector-java.jar}"/>
            <fileset refid="xercesImpl.jar.fileset"/>
        </path>
        <pathtofileset name="caarray-client.external.v1_0.java.dependencies.fileset" pathrefid="caarray-client.external.v1_0.java.dependencies.path" dir="${project.lib}"/>

        <path id="caarray-client.external.v1_0.grid.dependencies.path">
            <fileset refid="caarray-client.common.grid.dependencies.fileset"/>
        </path>
        <pathtofileset name="caarray-client.external.v1_0.grid.dependencies.fileset" pathrefid="caarray-client.external.v1_0.grid.dependencies.path" dir="${project.lib}"/>

        <taskdef resource="checkstyletask.properties">
            <classpath refid="checkstyle.jar.path"/>
            <classpath refid="commons-beanutils.jar.path"/>
            <classpath refid="antlr.jar.path"/>
            <classpath refid="commons-collections.jar.path"/>
            <classpath refid="commons-logging.jar.path"/>
            <classpath refid="liquibase.jar.path"/>
        </taskdef>

        <taskdef resource="tasks.properties" classpathref="cobertura.dependencies.path" />

        <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.dependencies.path" />

        <typedef resource="com/googlecode/svntask/svntask.xml" classpathref="svn.dependencies.path" />

        <taskdef name="ncitask" classname="gov.nih.ncicb.anttasks.PropertyValidator" classpathref="project.jars.path"/>

    </target>


    <!-- Datasource-configuration-related properties -->
    <property name="jta.transaction.factory" value="hibernate.transaction.factory_class org.hibernate.transaction.JTATransactionFactory" />
    <property name="jta.transaction.manager" value="hibernate.transaction.manager_lookup_class org.hibernate.transaction.JBossTransactionManagerLookup" />
    <property name="datasource.connection.provider" value="hibernate.connection.provider_class org.hibernate.connection.DatasourceConnectionProvider" />
    <property name="jdbc.transaction.factory" value="hibernate.transaction.factory_class org.hibernate.transaction.JDBCTransactionFactory" />
    <property name="hibernate.session.context" value="hibernate.current_session_context_class thread" />
    <property name="hibernate.connection.provider" value="hibernate.connection.provider_class org.hibernate.connection.C3P0ConnectionProvider" />
    <property name="comment.start" value="&lt;!-- " />
    <property name="comment.end" value=" -->" />
    <!-- Configuration files -->
    <property name="checkstyle.config" value="${resource.dir}/caarray_checks.xml" />

    <property name="jboss.deploy.dir" value="${jboss.home}/server/${jboss.server.name}/deploy" />
    <property name="jboss.lib.dir" value="${jboss.home}/server/${jboss.server.name}/lib" />

    <!-- File References -->
    <property name="mysql.datasource.file" value="caarray-mysql-ds.xml" />
    <property name="jboss-mail-service.file" value="mail-service.xml" />
    <property name="jboss-globus-serverinstance-config.zip" location="${resource.dir}/deploy/jboss-globus-serverinstance-config.zip" />

    <filterset id="caarray.filterset" onmissingfiltersfile="warn">
        <filtersfile file="${build.dir}/default.properties" />
        <filtersfile file="${build.dir}/local.properties" />
        <filtersfile file="${envpropertyfile}" />
    </filterset>

    <condition property="internal.grid.useJBoss" value="true">
        <istrue value="${grid.useJBoss}"/>
    </condition>

    <condition property="internal.grid.useGlobus" value="true">
        <istrue value="${grid.useGlobus}"/>
    </condition>

    <!-- ******************************************************************* -->
    <!-- ** CLEAN TARGETS                                                 ** -->
    <!-- ******************************************************************* -->

    <target name="clean" depends="clean:lib,
        clean:ivy-cache,
        clean:caarray-client.jar,
        clean:caarray-common.jar,
        clean:caarray-ejb.jar,
        clean:caarray.war,
        clean:caarray.ear,
        clean:site.dir,
        clean:test,
        clean:test-data,
        clean:target.dir,
        clean:caarray-grid-common,
        clean:caarray-grid-svc,
        clean:caarray-plugins,
        clean:caarraydb,
        clean-cn2magetab,
      clean-bda-lite-cfg-staging" description="Deletes all of the target directories" />

    <target name="clean:lib">
        <delete dir="${lib.dir}"/>
    </target>

    <target name="clean:ivy-cache" unless="ivy.noclean">
        <delete dir="${basedir}/master_build/.ivy2-caarray-cache"/>
    </target>

    <target name="clean:caarray-client.jar">
        <delete dir="${caarray-client.target.dir}" />
    </target>

    <target name="clean:caarray-common.jar">
        <delete dir="${caarray-common.target.dir}" />
    </target>

    <target name="clean:caarray-ejb.jar">
        <delete dir="${caarray-ejb.target.dir}" />
    </target>

    <target name="clean:caarray.war">
        <delete dir="${caarray-war.target.dir}" />
    </target>

    <target name="clean:caarray.ear">
        <delete dir="${caarray-ear.target.dir}" />
    </target>

    <target name="clean:test">
        <delete dir="${test.target.dir}" />
    </target>

    <target name="clean:test-data" unless="nocleantestdata">
        <delete dir="${test.data.target.dir}" />
    </target>

    <target name="clean:site.dir">
        <delete dir="${site.dir}" />
    </target>

    <target name="clean:target.dir">
        <delete dir="${target.dir}" />
    </target>

    <target name="clean:caarray-grid-common">
        <delete dir="${caarray-grid-svc.common.target.dir}"/>
    </target>

    <target name="clean:caarray-grid-svc">
        <for param="version" list="${caarray-grid-svc.versions}">
            <sequential>
                <ant dir="${caarray-grid-svc.base.dir}/@{version}" target="clean" inheritall="false">
                    <property name="caarray-grid-svc.common.target.dir" value="${caarray-grid-svc.common.target.dir}"/>
                </ant>
            </sequential>
        </for>
    </target>

    <target name="clean:caarray-plugins">
        <for param="plugin" list="${caarray-plugins.pluginList}">
            <sequential>
                <delete dir="${caarray-plugins.dir}/@{plugin}/target" />
            </sequential>
        </for>
        <delete dir="${caarray-bundled-plugins.dir}"/>
    </target>

    <target name="clean:caarraydb">
        <delete dir="${caarraydb.target.dir}" />
    </target>

    <target name="clean-cn2magetab">
        <delete dir="${cn2magetab.target.dir}"/>
    </target>


    <!-- ******************************************************************* -->
    <!-- ** MAIN TARGETS                                                  ** -->
    <!-- ******************************************************************* -->

    <target name="continuous-integration" depends="clean,init:third-party-paths,build-tags,build,check,database:reinitialize,test,javadoc"/>


    <target name="nightly-build" depends="continuous-integration,
        database:reinitialize,
        build-functional,
        test:functional" />


    <!-- ******************************************************************* -->
    <!-- ** PREPARATION TARGETS                                           ** -->
    <!-- ******************************************************************* -->

    <target name="prepare:create-local.properties" unless="local.properties.exists" depends="init:third-party-paths,prepare:check-for-local.properties">
        <touch file="${build.dir}/local.properties" />
    </target>

    <target name="prepare:check-for-local.properties">
        <available file="${build.dir}/local.properties" property="local.properties.exists" />
    </target>

    <!-- ******************************************************************* -->
    <!-- ** DATASOURCE CONFIGURATION TARGETS                              ** -->
    <!-- ******************************************************************* -->

    <!-- Copy hibernate files to classes directory and configure datasource and transaction management -->
    <target name="configure-datasource-for-deploy">
        <copy todir="${caarray-common.classes.dir}" overwrite="true">
            <fileset dir="${caarray-common.resources.dir}" includes="*hibernate*,treecache.xml,ValidatorMessages.properties" />
        </copy>
        <replace dir="${caarray-common.classes.dir}" includes="*.cfg.xml">
            <replacefilter token="@DATASOURCE_CONFIG_START@" value="${comment.end}" />
            <replacefilter token="@DATASOURCE_CONFIG_END@" value="${comment.start}" />
        </replace>
        <replace file="${caarray-common.classes.dir}/hibernate.properties">
            <replacefilter token="#@TRANSACTION_FACTORY@" value="${jta.transaction.factory}" />
            <replacefilter token="#@TRANSACTION_MANAGER@" value="${jta.transaction.manager}" />
            <replacefilter token="#@CONNECTION_PROVIDER@" value="${datasource.connection.provider}" />
        </replace>
        <move file="${caarray-common.classes.dir}/template.csm.new.hibernate.cfg.xml"
                toFile="${caarray-common.classes.dir}/csm/${csm.application.name}.csm.new.hibernate.cfg.xml"/>
    </target>

    <target name="configure-datasource-for-test">
        <copy todir="${caarray-common.test.classes.dir}" overwrite="true">
            <fileset dir="${caarray-common.resources.dir}" includes="*hibernate*,treecache.xml,MGEDOntology.owl,ValidatorMessages.properties" />
        </copy>
        <replace dir="${caarray-common.test.classes.dir}" includes="*.cfg.xml">
            <replacefilter token="@HIBERNATE_CONFIG_START@" value="${comment.end}" />
            <replacefilter token="@HIBERNATE_CONFIG_END@" value="${comment.start}" />
            <replacefilter token="@SERVERNAME@" value="${database.server}" />
            <replacefilter token="@PORT@" value="${database.port}" />
            <replacefilter token="@DBNAME@" value="${database.name}" />
            <replacefilter token="@DBUSER@" value="${database.user}" />
            <replacefilter token="@DBPASSWD@" value="${database.password}" />
        </replace>
        <replace file="${caarray-common.test.classes.dir}/hibernate.properties">
            <replacefilter token="#@TRANSACTION_FACTORY@" value="${jdbc.transaction.factory}" />
            <replacefilter token="#@SESSION_CONTEXT@" value="${hibernate.session.context}" />
            <replacefilter token="#@CONNECTION_PROVIDER@" value="${hibernate.connection.provider}" />
        </replace>
        <move file="${caarray-common.test.classes.dir}/template.csm.new.hibernate.cfg.xml"
                toFile="${caarray-common.test.classes.dir}/csm/${csm.application.name}.csm.new.hibernate.cfg.xml" />
    </target>

    <!-- ******************************************************************* -->
    <!-- ** COMPILE TARGETS                                               ** -->
    <!-- ******************************************************************* -->

    <target name="compile" depends="init:third-party-paths,compile:caarray-client.jar,
      compile:caarray-common.jar,
        compile:caarray-ejb.jar,
        compile:caarray.war,
        compile:caarray-grid-svc,
        compile:caarray-plugins" />

    <target name="compile:cn2magetab" depends="init:third-party-paths">
        <mkdir dir="${cn2magetab.classes.dir}" />
        <javac srcdir="${cn2magetab.src.dir}" destdir="${cn2magetab.classes.dir}" debug="true">
            <classpath refid="cn2magetab.dependencies.compile.path" />
        </javac>
    </target>

    <target name="compile:caarray-client.jar" depends="init:third-party-paths,compile:caarray-common.jar,compile:caarray-ejb.jar">
        <mkdir dir="${caarray-client.classes.dir}" />
        <javac srcdir="${caarray-client.src.dir}" destdir="${caarray-client.classes.dir}" debug="true">
            <classpath>
                <pathelement location="${caarray-common.classes.dir}" />
                <pathelement location="${caarray-ejb.classes.dir}" />
                <pathelement location="${caarray-common.resources.dir}" />
            </classpath>
            <classpath refid="common.compile.dependencies.path" />
        </javac>
    </target>

    <target name="compile:caarray-common.jar" depends="init:third-party-paths">
        <mkdir dir="${caarray-common.classes.dir}" />
        <javac srcdir="${caarray-common.src.dir}" destdir="${caarray-common.classes.dir}" debug="true">
            <classpath>
                <pathelement location="${caarray-common.resources.dir}" />
                <pathelement location="${caarray-common.test.files.dir}" />
            </classpath>
            <classpath refid="common.compile.dependencies.path" />
        </javac>
        <copy todir="${caarray-common.classes.dir}" overwrite="true" file="${caarray-common.resources.dir}/app-config.properties"/>
        <replace file="${caarray-common.classes.dir}/app-config.properties">
            <replacefilter token="@csm.application.name@" value="${csm.application.name}" />
        </replace>
    </target>

    <target name="compile:caarray-ejb.jar" depends="init:third-party-paths,compile:caarray-common.jar">
        <mkdir dir="${caarray-ejb.classes.dir}" />
        <javac srcdir="${caarray-ejb.src.dir}" destdir="${caarray-ejb.classes.dir}" debug="true">
            <classpath>
                <pathelement location="${caarray-common.classes.dir}" />
            </classpath>
            <classpath refid="ejb.compile.dependencies.path" />
        </javac>
    </target>

    <target name="compile:caarray.war" depends="init:third-party-paths,compile:caarray-common.jar,compile:caarray-ejb.jar">
        <echo message="${atlassian.jar}"/>
        <mkdir dir="${caarray-war.classes.dir}" />
        <javac srcdir="${caarray-war.src.dir}" destdir="${caarray-war.classes.dir}" debug="true">
            <classpath>
                <pathelement location="${caarray-common.classes.dir}" />
                <pathelement location="${caarray-ejb.classes.dir}" />
            </classpath>
            <classpath refid="war.compile.dependencies.path" />
        </javac>
    </target>

    <target name="compile:caarray-grid-svc.common.jar" depends="init:third-party-paths">
        <mkdir dir="${caarray-grid-svc.common.classes.dir}" />
        <javac srcdir="${caarray-grid-svc.common.src.dir}" destdir="${caarray-grid-svc.common.classes.dir}" debug="true">
            <classpath refid="common.compile.dependencies.path" />
        </javac>
    </target>

    <target name="compile:caarray-grid-svc" depends="init:third-party-paths,compile:caarray-common.jar,compile:caarray-ejb.jar,build:caarray-client.jar,build:caarray-grid-svc.common.jar">
        <for param="version" list="${caarray-grid-svc.versions}">
            <sequential>
                <copy file="${caarray-grid-svc.base.dir}/@{version}/deploy.properties.orig" tofile="${caarray-grid-svc.base.dir}/@{version}/deploy.properties">
                    <filterset>
                        <filter token="grid.index.url" value="${grid.index.url}" />
                        <filter token="caarray.grid-service.version" value="@{version}" />
                    </filterset>
                </copy>
                <ant dir="${caarray-grid-svc.base.dir}/@{version}" target="compile" inheritall="false">
                    <property name="jboss.server.hostname" value="${jboss.server.hostname}" />
                    <property name="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
                    <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
                    <property name="caarray-grid-svc.common.target.dir" value="${caarray-grid-svc.common.target.dir}"/>
                </ant>
            </sequential>
        </for>
    </target>

    <target name="compile:caarray-plugins" depends="init:third-party-paths, compile:caarray.war">
        <for param="plugin" list="${caarray-plugins.pluginList}">
            <sequential>
                <mkdir dir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.classes.subdir}" />
                <javac srcdir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.src.subdir}" destdir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.classes.subdir}" debug="true">
                    <classpath>
                        <pathelement location="${caarray-common.classes.dir}" />
                        <pathelement location="${caarray-ejb.classes.dir}" />
                        <pathelement location="${caarray-war.classes.dir}" />
                        <pathelement location="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.resources.subdir}" />
                    </classpath>
                    <classpath refid="war.compile.dependencies.path" />
                </javac>
            </sequential>
        </for>
    </target>

    <!-- ******************************************************************* -->
    <!-- ** SVN TARGETS                                                 ** -->
    <!-- ******************************************************************* -->
    <target name="svn:getinfo" description="obtain subversion revision info" unless="nosvn" depends="init:third-party-paths">
        <svn failonerror="true"><info path="${root.dir}" revisionProperty="svn.revision" urlProperty="svn.url" /></svn>
        <!--
          Note that if you explicitly define caarray.version it will take
          precedence over the one obtained from SVN
          -->
        <propertyregex property="svn.caarray.version" input="${svn.url}" regexp="\/([^\/]+)$" select="\1" casesensitive="false" />
        <echo message="found svn info: ${svn.url} ${svn.revision} ${svn.caarray.version}" />
    </target>

    <!-- ******************************************************************* -->
    <!-- ** BUILD TARGETS                                                 ** -->
    <!-- ******************************************************************* -->

  <target name="clean-build-for-bda-lite" depends="clean-build-with-zips, -configure-for-bda-lite"/>

    <property name="bda.lite.ear.cfg.properties.file" value="${caarray-ear.target.dir}/bda_lite_cfg/temp/bda_lite_cfg.properties"/>
    <property name="bda.lite.grid.cfg.properties.file" value="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/bda_lite_cfg.properties"/>

    <target name="-configure-for-bda-lite" depends="
      clean-bda-lite-cfg-staging,
      -create-deployment-properties-files,
      -configure-ear-for-bda-lite,
      -configure-grid-services-for-bda-lite,
      -configure-globus-instance-for-bda-lite"/>

  <target name="clean-bda-lite-cfg-staging">
    <delete dir="${caarray-ear.target.dir}/bda_lite_cfg"/>
    <mkdir dir="${caarray-ear.target.dir}/bda_lite_cfg/temp"/>
        <delete dir="${caarray-grid-svc.base.dir}/target"/>
        <mkdir dir="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/"/>
  </target>

  <target name="-create-deployment-properties-files">
    <echoproperties destfile="${bda.lite.ear.cfg.properties.file}"/>
    <copy file="${bda.lite.ear.cfg.properties.file}" tofile="${bda.lite.grid.cfg.properties.file}"/>
  </target>

  <target name="-configure-ear-for-bda-lite">
        <configure-caarray-ear
          project.properties="${basedir}/master_build/project.properties"
            temp.dir="${caarray-ear.target.dir}/bda_lite_cfg/temp"
            template.ear.path="${caarray.ear}"
            properties.file="${bda.lite.ear.cfg.properties.file}"/>
    <move file="${caarray-ear.target.dir}/bda_lite_cfg/temp/caarray.ear.to_deploy/caarray.ear" todir="${caarray-ear.target.dir}/bda_lite_cfg/"/>
        <delete dir="${caarray-ear.target.dir}/bda_lite_cfg/temp"/>
  </target>

    <target name="-configure-grid-services-for-bda-lite">
      <copy todir="${caarray-grid-svc.base.dir}/target/bda_lite_cfg" flatten="true">
            <fileset dir="${caarray-grid-svc.base.dir}">
                <include name="**/cagrid_CaArraySvc*.zip"/>
            </fileset>
        </copy>
        <configure-caarray-grid-services
            project.properties="${basedir}/master_build/project.properties"
            properties.file="${bda.lite.grid.cfg.properties.file}"
            temp.dir="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/temp"
            grid.template.basedir="${caarray-grid-svc.base.dir}/target/bda_lite_cfg"
            grid.target.basedir="${caarray-grid-svc.base.dir}/target/bda_lite_cfg"/>
      <delete dir="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/temp"/>
        <delete file="${bda.lite.grid.cfg.properties.file}"/>
    </target>

  <target name="-configure-globus-instance-for-bda-lite">
    <delete dir="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/temp"/>
        <mkdir dir="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/temp"/>
        <unzip src="${basedir}/build/resources/deploy/jboss-globus-serverinstance-config.zip" dest="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/temp"/>
    <replace dir="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/temp" token="localhost:8080" value="${grid.static.hostname}:${grid.static.port}">
        <include name="**/*.wsdl"/>
    </replace>
        <replace dir="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/temp" token="http://index.training.cagrid.org:8080/wsrf/services/DefaultIndexService" value="${grid.index.url}">
            <include name="**/*.xml"/>
        </replace>
        <replace dir="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/temp" token="@LOGICAL_HOST@" value="${grid.static.hostname}">
            <include name="**/*.wsdd"/>
        </replace>
    <xmltask source="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/temp/deploy/wsrf.war/WEB-INF/web.xml" dest="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/temp/deploy/wsrf.war/WEB-INF/web.xml">
            <xmlcatalog refid="bda.xml.catalog"/>
            <replace path="//init-param/param-name[text()='defaultPort']/following-sibling::param-value[1]/text()" withText="${grid.static.port}"/>
        </xmltask>
    <zip destfile="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/jboss-globus-serverinstance-config.zip">
            <zipfileset dir="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/temp" />
        </zip>
        <delete dir="${caarray-grid-svc.base.dir}/target/bda_lite_cfg/temp"/>
  </target>

    <target name="clean-build-with-zips" depends="clean,
        build,
        build:caarray-client.zip,
        create-grid-zip"/>

    <target name="build" description="Builds the application without deploying." depends="init:third-party-paths,
        build:caarray-client.jar,
        build:caarray-common.jar,
        build:caarray-ejb.jar,
        build:caarray.war,
        build:caarray.ear,
        build:caarray-grid-svc,
        build:caarray-plugins,
        build:cn2magetab"/>

    <target name="build-functional" depends="init:third-party-paths,
        build:caarray-client.jar,
        build:functional:caarray.ear,
        build:caarray-grid-svc" description="Builds the application without deploying." />

    <target name="build:cn2magetab" depends="init:third-party-paths,compile:cn2magetab">
        <mkdir dir="${cn2magetab.target.dir}/lib"/>
        <unjar dest="${cn2magetab.target.dir}/lib">
            <fileset refid="commons-cli.jar.fileset"/>
            <fileset refid="commons-io.jar.fileset"/>
            <fileset refid="commons-lang.jar.fileset"/>
            <fileset refid="log4j.jar.fileset"/>
            <fileset refid="javacsv.jar.fileset"/>
            <fileset refid="guice.jar.fileset"/>
            <fileset refid="guice.jar.fileset"/>
            <fileset refid="guice-assistedinject.jar.fileset"/>
            <fileset refid="guice-multibindings.jar.fileset"/>
            <fileset refid="aopalliance.jar.fileset"/>
            <fileset refid="nci-commons-core.jar.fileset"/>
        </unjar>
        <jar destfile="${cn2magetab.target.dir}/cn2magetab.jar">
            <manifest>
                <attribute name="Main-Class" value="gov.nih.nci.copynumberconverter.CopyNumberToMageTabDataMatrixConverter"/>
                <section name="gov/nih/nci/copynumberconverter/">
                    <attribute name="Specification-Title" value="cn2magetab" />
                    <attribute name="Specification-Version" value="${svn.url} ${svn.revision}" />
                    <attribute name="Specification-Vendor" value="5AM Solutions" />
                    <attribute name="Implementation-Title" value="cn2magetab" />
                    <attribute name="Implementation-Version" value="${svn.url} ${svn.revision}" />
                    <attribute name="Implementation-Vendor" value="5AM Solutions" />
                </section>
            </manifest>
            <fileset dir="${cn2magetab.classes.dir}"/>
            <fileset dir="${cn2magetab.target.dir}/lib"/>
        </jar>
    </target>

    <target name="build:caarray-client.jar" depends="build:caarray-client-legacy.jar,build:caarray-client-external.jar"/>

    <target name="build:caarray-client-legacy.jar" depends="init:third-party-paths,compile:caarray-client.jar,compile:caarray-common.jar,compile:caarray-ejb.jar,svn:getinfo">
        <mkdir dir="${caarray-client.target.dir}" />
        <jar destfile="${caarray-client.target.dir}/caarray-client-legacy.jar">
            <manifest>
                <section name="gov/nih/nci/caarray/">
                    <attribute name="Specification-Title" value="caArray" />
                    <attribute name="Specification-Version" value="${svn.url} ${svn.revision}" />
                    <attribute name="Specification-Vendor" value="5AM Solutions" />
                    <attribute name="Implementation-Title" value="caArray" />
                    <attribute name="Implementation-Version" value="${svn.url} ${svn.revision}" />
                    <attribute name="Implementation-Vendor" value="5AM Solutions" />
                </section>
            </manifest>
            <fileset dir="${caarray-client.classes.dir}">
                <exclude name="**/services/external/**/*.class" />
            </fileset>
            <fileset dir="${caarray-client.resources.dir}" />
            <fileset dir="${caarray-common.classes.dir}">
                <include name="**/domain/**" />
                <include name="**/util/**" />
                <include name="**/validation/**" />
                <include name="**/georgetown/**" />
                <include name="**/Protectable*" />
                <include name="**/security/PermissionDeniedException*" />
                <include name="**/security/Attribute*" />
            </fileset>
            <fileset dir="${caarray-ejb.classes.dir}">
                <include name="**/services/**/*Service.class" />
                <include name="**/services/**/*Exception.class" />
                <exclude name="**/services/external/**/*.class" />
            </fileset>
        </jar>
    </target>

    <macrodef name="build-caarray-client-external.jar">
        <attribute name="version"/>

        <sequential>
            <mkdir dir="${caarray-client.target.dir}" />
            <jar destfile="${caarray-client.target.dir}/caarray-client-external-@{version}.jar">
                <manifest>
                    <section name="gov/nih/nci/caarray/">
                        <attribute name="Specification-Title" value="caArray" />
                        <attribute name="Specification-Version" value="${svn.url} ${svn.revision}" />
                        <attribute name="Specification-Vendor" value="5AM Solutions" />
                        <attribute name="Implementation-Title" value="caArray" />
                        <attribute name="Implementation-Version" value="${svn.url} ${svn.revision}" />
                        <attribute name="Implementation-Vendor" value="5AM Solutions" />
                    </section>
                </manifest>
                <fileset dir="${caarray-client.classes.dir}">
                    <exclude name="**/services/CaArrayServer.class" />
                </fileset>
                <fileset dir="${caarray-client.resources.dir}" />
                <fileset dir="${caarray-common.classes.dir}">
                    <include name="**/external/@{version}/**" />
                    <include name="**/util/**" />
                </fileset>
                <fileset dir="${caarray-ejb.classes.dir}">
                    <include name="**/services/external/@{version}/**/*.class" />
                    <exclude name="**/services/external/@{version}/**/impl/*.class" />
                </fileset>
            </jar>
        </sequential>
    </macrodef>

    <target name="build:caarray-client-external.jar" depends="init:third-party-paths,compile:caarray-client.jar,compile:caarray-common.jar,compile:caarray-ejb.jar,svn:getinfo">
        <for param="version" list="${caarray-grid-svc.versions.external}">
            <sequential>
                <build-caarray-client-external.jar version="@{version}"/>
            </sequential>
        </for>
    </target>

    <target name="build:caarray-client.zip" depends="build:caarray-client-legacy.zip,build:caarray-client-external.zip"/>

    <target name="build:caarray-client-legacy.zip" depends="init:third-party-paths,build:caarray-client-legacy.jar,javadoc:caarray-client,build:caarray-grid-svc">
        <zip destfile="${caarray-client.target.dir}/${caarray.client-legacy-zip.zip.file}">
            <zipfileset dir="${caarray-client.target.dir}" includes="caarray-client-legacy.jar" prefix="${caarray.client-zip.name}_legacy_${caarray.version}"/>
            <zipfileset dir="${caarray-client.dir}/src/distribution/resources/legacy" prefix="${caarray.client-zip.name}_legacy_${caarray.version}"/>
            <zipfileset prefix="${caarray.client-zip.name}_legacy_${caarray.version}/lib/java" refid="caarray-client.legacy.java.dependencies.fileset" />
            <zipfileset prefix="${caarray.client-zip.name}_legacy_${caarray.version}/docs/api" dir="${caarray-client.target.dir}/docs/api" includes="legacy/**" />
            <zipfileset prefix="${caarray.client-zip.name}_legacy_${caarray.version}/docs/model" dir="${docs.dir}/analysis_and_design/models" includes="caarray_client_model.eap" />
            <zipfileset prefix="${caarray.client-zip.name}_legacy_${caarray.version}/lib/grid" refid="caarray-client.legacy.grid.dependencies.fileset" />
            <zipfileset prefix="${caarray.client-zip.name}_legacy_${caarray.version}/lib/grid" refid="grid.dependencies.caarray-grid-svc.lib.fileset" />
            <zipfileset prefix="${caarray.client-zip.name}_legacy_${caarray.version}/lib/grid" refid="grid.dependencies.caarray-grid-svc.legacy.build.fileset" />
            <zipfileset prefix="${caarray.client-zip.name}_legacy_${caarray.version}/lib/grid" file="${caarray-grid-svc.common.jar}" />
            <zipfileset prefix="${caarray.client-zip.name}_legacy_${caarray.version}/schema" dir="${caarray-grid-svc.base.dir}/legacy/schema/CaArraySvc" />
        </zip>
    </target>

    <macrodef name="build-caarray-client-external.zip">
        <attribute name="version"/>

        <sequential>
            <zip destfile="${caarray-client.target.dir}/${caarray.client-external-zip.zip.file}">
                <zipfileset dir="${caarray-client.target.dir}" includes="caarray-client-external-@{version}.jar" prefix="${caarray.client-zip.name}_external_v${caarray.api_version}"/>
                <zipfileset dir="${caarray-client.dir}/src/distribution/resources/external/@{version}" prefix="${caarray.client-zip.name}_external_v${caarray.api_version}"/>
                <zipfileset prefix="${caarray.client-zip.name}_external_v${caarray.api_version}/lib/java" refid="caarray-client.external.@{version}.java.dependencies.fileset" />
                <zipfileset prefix="${caarray.client-zip.name}_external_v${caarray.api_version}/docs/api" dir="${caarray-client.target.dir}/docs/api" includes="external/@{version}/**" />
                <zipfileset prefix="${caarray.client-zip.name}_external_v${caarray.api_version}/docs/model" dir="${docs.dir}/analysis_and_design/models" includes="caarray_external_model.eap" />
                <zipfileset prefix="${caarray.client-zip.name}_external_v${caarray.api_version}/lib/grid" refid="caarray-client.external.@{version}.grid.dependencies.fileset" />
                <zipfileset prefix="${caarray.client-zip.name}_external_v${caarray.api_version}/lib/grid" refid="grid.dependencies.caarray-grid-svc.lib.fileset" />
                <zipfileset prefix="${caarray.client-zip.name}_external_v${caarray.api_version}/lib/grid" refid="grid.dependencies.caarray-grid-svc.@{version}.build.fileset" />
                <zipfileset prefix="${caarray.client-zip.name}_external_v${caarray.api_version}/lib/grid" file="${caarray-grid-svc.common.jar}" />
                <zipfileset prefix="${caarray.client-zip.name}_external_v${caarray.api_version}/schema" dir="${caarray-grid-svc.base.dir}/@{version}/schema/CaArraySvc_v1_0" />
            </zip>
        </sequential>
    </macrodef>

    <target name="build:caarray-client-external.zip" depends="init:third-party-paths,build:caarray-client-external.jar,javadoc:caarray-client,build:caarray-grid-svc">
        <for param="version" list="${caarray-grid-svc.versions.external}">
            <sequential>
                <build-caarray-client-external.zip version="@{version}"/>
            </sequential>
        </for>
    </target>

    <target name="build:caarray-common.jar" depends="init:third-party-paths,compile:caarray-common.jar,configure-datasource-for-deploy,svn:getinfo">
        <mkdir dir="${caarray-common.target.dir}" />
        <pathconvert pathsep=" " property="flattened.common.dependencies" refid="common.compile.dependencies.path">
            <flattenmapper />
        </pathconvert>
        <echo file="${caarray-common.target.dir}/flattened_dependencies" message="./lib/${flattened.common.dependencies}" />
        <replace file="${caarray-common.target.dir}/flattened_dependencies" token=" " value=" ./lib/" />
        <loadfile srcfile="${caarray-common.target.dir}/flattened_dependencies" property="processed.common.dependencies.ready.for.manifest.classpath" />
        <jar destfile="${caarray-common.jar}">
            <manifest>
                <attribute name="Class-Path" value="${processed.common.dependencies.ready.for.manifest.classpath}" />
                <section name="gov/nih/nci/caarray/">
                    <attribute name="Specification-Title" value="caArray" />
                    <attribute name="Specification-Version" value="${svn.url} ${svn.revision}" />
                    <attribute name="Specification-Vendor" value="5AM Solutions" />
                    <attribute name="Implementation-Title" value="caArray" />
                    <attribute name="Implementation-Version" value="${svn.url} ${svn.revision}" />
                    <attribute name="Implementation-Vendor" value="5AM Solutions" />
                </section>
            </manifest>
            <fileset dir="${caarray-common.classes.dir}" />
        </jar>
    </target>

    <target name="build:caarray-plugins" depends="init:third-party-paths,compile:caarray-plugins,svn:getinfo">
        <mkdir dir="${caarray-bundled-plugins.dir}" />
        <for param="plugin" list="${caarray-plugins.pluginList}">
            <sequential>
                <mkdir dir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.target.subdir}" />
                <pathconvert pathsep=" " property="flattened.common.dependencies" refid="common.compile.dependencies.path">
                    <flattenmapper />
                </pathconvert>
                <copy todir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.classes.subdir}" overwrite="true">
                    <fileset dir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.resources.subdir}" includes="**/*" />
                </copy>
                <jar destfile="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.target.subdir}/@{plugin}-plugin.jar">
                    <manifest>
                        <section name="gov/nih/nci/caarray/@{plugin}">
                            <attribute name="Specification-Title" value="caArray" />
                            <attribute name="Specification-Version" value="${svn.url} ${svn.revision}" />
                            <attribute name="Specification-Vendor" value="5AM Solutions" />
                            <attribute name="Implementation-Title" value="caArray" />
                            <attribute name="Implementation-Version" value="${svn.url} ${svn.revision}" />
                            <attribute name="Implementation-Vendor" value="5AM Solutions" />
                        </section>
                    </manifest>
                    <fileset dir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.classes.subdir}" />
                </jar>
                <!-- Copy the jars to the "caarray-bundled-plugins.dir" directory -->
                <copy file="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.target.subdir}/@{plugin}-plugin.jar" todir="${caarray-bundled-plugins.dir}" />
            </sequential>
        </for>
        <!-- Zip the plugin jars and joda runtime jar dependency -->
        <create-plugin-bundle pluginJarsDir="${caarray-bundled-plugins.dir}" projectLibDir="${project.lib}" />
    </target>

    <target name="build:functional:caarray-common.jar" depends="build:caarray-common.jar, test:instrument-functional:caarray-common.jar" />

    <target name="build:caarray-ejb.jar" depends="init:third-party-paths,compile:caarray-ejb.jar,svn:getinfo">
        <mkdir dir="${caarray-ejb.target.dir}" />
        <pathconvert pathsep=" " property="flattened.ejb.dependencies" refid="ejb.compile.dependencies.path">
            <flattenmapper />
        </pathconvert>
        <echo file="${caarray-ejb.target.dir}/flattened_dependencies" message="./lib/${flattened.ejb.dependencies}" />
        <replace file="${caarray-ejb.target.dir}/flattened_dependencies" token=" " value=" ./lib/" />
        <loadfile srcfile="${caarray-ejb.target.dir}/flattened_dependencies" property="processed.ejb.dependencies.ready.for.manifest.classpath" />
        <copy todir="${caarray-ejb.classes.dir}" overwrite="true">
            <fileset dir="${caarray-ejb.resources.dir}" includes="**/*" />
        </copy>
        <propertyfile file="${caarray-ejb.classes.dir}/dataStorage.properties">
            <entry key="dataStorage.fileSystem.baseDir" value="${dataStorage.fileSystem.baseDir}"/>
            <entry key="dataStorage.fileDataEngine" value="${dataStorage.fileDataEngine}"/>
            <entry key="dataStorage.parsedDataEngine" value="${dataStorage.parsedDataEngine}"/>
        </propertyfile>
        <jar destfile="${caarray-ejb.jar}">
            <manifest>
                <attribute name="Class-Path" value="${processed.ejb.dependencies.ready.for.manifest.classpath}" />
                <section name="gov/nih/nci/caarray/">
                    <attribute name="Specification-Title" value="caArray" />
                    <attribute name="Specification-Version" value="${svn.url} ${svn.revision}" />
                    <attribute name="Specification-Vendor" value="5AM Solutions" />
                    <attribute name="Implementation-Title" value="caArray" />
                    <attribute name="Implementation-Version" value="${svn.url} ${svn.revision}" />
                    <attribute name="Implementation-Vendor" value="5AM Solutions" />
                </section>
            </manifest>
            <fileset dir="${caarray-ejb.classes.dir}" />
        </jar>
    </target>

    <target name="build:functional:caarray-ejb.jar" depends="build:caarray-ejb.jar, test:instrument-functional:caarray-ejb.jar" />

    <target name="build:caarray.war:scriptsAndStyles:minify" depends="init:third-party-paths">
        <if>
            <equals arg1="${minify}" arg2="true" />
            <then>
                <echo>css and js files will be minified</echo>
                <!-- compress and minify css files -->
                <for param="cssfile">
                    <path>
                        <fileset dir="${caarray-war.target.webapp.dir}" includes="/styles/*.css" />
                    </path>
                    <sequential>
                        <java jar="${yuicompressor.jar}" fork="true" failonerror="true">
                            <arg line="@{cssfile}" />
                            <arg line="-o @{cssfile}" />
                        </java>
                    </sequential>
                </for>
                <!-- compress and minify javascripts -->
                <for param="jsfile">
                    <path>
                        <fileset dir="${caarray-war.target.webapp.dir}" includes="/scripts/*.js, /scriptslib/*.js" />
                    </path>
                    <sequential>
                        <java jar="${yuicompressor.jar}" fork="true" failonerror="true">
                            <arg line="@{jsfile}" />
                            <arg line="-o @{jsfile}" />
                            <arg line="--nomunge" />
                        </java>
                    </sequential>
                </for>
            </then>
        </if>
    </target>

    <target name="build:caarray.war:scriptsAndStyles:copy-files">
        <mkdir dir="${caarray-war.target.webapp.dir}" />
        <copy todir="${caarray-war.target.webapp.dir}">
            <fileset dir="${caarray-war.webapp.dir}" />
        </copy>
    </target>

    <target name="build:caarray.war:scriptsAndStyles" depends="build:caarray.war:scriptsAndStyles:copy-files,build:caarray.war:scriptsAndStyles:minify"/>

    <target name="build:caarray.war" depends="init:third-party-paths,compile:caarray.war,svn:getinfo,build:caarray.war:scriptsAndStyles">
        <mkdir dir="${caarray-war.target.dir}" />
        <copy todir="${caarray-war.target.dir}/xml" file="${caarray-war.webapp.dir}/WEB-INF/web.xml" overwrite="true">
            <filterset>
                <filter token="svn.caarray.version" value="${svn.caarray.version}" />
                <filter token="svn.url" value="${svn.url}" />
                <filter token="svn.revision" value="${svn.revision}" />
                <filter token="build.time" value="${mili.time}" />
                <filter token="upt.url" value="${upt.url}" />
                <filter token="release-notes.url" value="${release-notes.url}" />
                <filter token="ldap.url" value="${ldap.url}" />
                <filter token="ldap.searchbase" value="${ldap.searchbase}" />
                <filter token="ldap.searchprefix" value="${ldap.searchprefix}" />
                <filter token="ldap.install" value="${ldap.install}" />
            </filterset>
        </copy>
        <copy todir="${caarray-war.classes.dir}">
            <fileset dir="${caarray-war.src.dir}" includes="*.xml,*.properties, template/**/*" />
        </copy>
        <propertyfile file="${caarray-plugins.properties.file}">
            <entry key="plugins.deploy.dir" value="${caarray-plugins.deploy.dir}"/>
            <entry key="plugins.bundle.zip" value="${caarray-plugins.bundledPlugins.zip}"/>
            <entry key="plugins.cache.dir" value="${caarray-plugins.deploy.cache.dir}"/>
            <entry key="plugins.bundleCache.dir" value="${caarray-plugins.deploy.bundleCache.dir}"/>
        </propertyfile>
        <war destfile="${caarray.war}" webxml="${caarray-war.target.dir}/xml/web.xml">
            <fileset dir="${caarray-war.target.webapp.dir}">
                <exclude name="WEB-INF/**" />
            </fileset>
            <webinf dir="${caarray-war.webapp.dir}/WEB-INF">
                <exclude name="web.xml" />
            </webinf>
            <classes dir="${caarray-war.classes.dir}" />
            <manifest>
                <section name="gov/nih/nci/caarray/">
                    <attribute name="Specification-Title" value="caArray" />
                    <attribute name="Specification-Version" value="${svn.url} ${svn.revision}" />
                    <attribute name="Specification-Vendor" value="5AM Solutions" />
                    <attribute name="Implementation-Title" value="caArray" />
                    <attribute name="Implementation-Version" value="${svn.url} ${svn.revision}" />
                    <attribute name="Implementation-Vendor" value="5AM Solutions" />
                </section>
            </manifest>
            <lib refid="war.compile.war-provided.depenendencies.fileset"/>
        </war>
    </target>

    <target name="build:functional:caarray.war" depends="build:caarray.war, test:instrument-functional:caarray.war" />

    <macrodef name="build-caarray.ear">
        <sequential>
            <mkdir dir="${caarray-ear.target.dir}" />
            <mkdir dir="${caarray-ear.target.dir}/xml" />
            <copy todir="${caarray-ear.target.dir}/xml">
                <fileset dir="${caarray-ear.resources.dir}" includes="*.xml" excludes="application.xml" />
            </copy>

            <copy file="${common.resources.jboss.conf.dir}/security-config.xml" tofile="${caarray-ear.target.dir}/xml/security-config.xml"/>
            <xmltask source="${caarray-ear.target.dir}/xml/security-config.xml" dest="${caarray-ear.target.dir}/xml/security-config.xml">
                <xmlcatalog refid="bda.xml.catalog"/>
                <replace path="//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsDBLoginModule']/module-option[@name='url']/text()" withText="${database.url}"/>
                <replace path="//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsDBLoginModule']/module-option[@name='user']/text()" withText="${database.user}"/>
                <replace path="//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsDBLoginModule']/module-option[@name='passwd']/text()" withText="${database.password}"/>
                <replace path="//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsDBLoginModule']/module-option[@name='driver']/text()" withText="${database.driver}"/>
            </xmltask>
            <if>
                <equals arg1="${ldap.authentication.enabled}" arg2="true" />
                <then>
                    <xmltask source="${caarray-ear.target.dir}/xml/security-config.xml" dest="${caarray-ear.target.dir}/xml/security-config.xml">
                        <xmlcatalog refid="bda.xml.catalog"/>
                        <replace path="//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsLDAPLoginModule']/module-option[@name='ldapHost']/text()" withText="${ldap.url}"/>
                        <replace path="//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsLDAPLoginModule']/module-option[@name='ldapSearchableBase']/text()" withText="${ldap.searchbase}"/>
                        <replace path="//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsLDAPLoginModule']/module-option[@name='ldapUserIdLabel']/text()" withText="${ldap.searchprefix}"/>
                    </xmltask>
                </then>
                <else>
                    <property name="remove.ldap.login.config.from.ear" value="true"/>
                    <if>
                        <equals arg1="${remove.ldap.login.config.from.ear}" arg2="true"/>
                        <then>
                            <xmltask source="${caarray-ear.target.dir}/xml/security-config.xml" dest="${caarray-ear.target.dir}/xml/security-config.xml">
                                <xmlcatalog refid="bda.xml.catalog"/>
                                <remove path="//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsLDAPLoginModule']"/>
                                <replace path="//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsDBLoginModule']/@flag" withText="required"/>
                            </xmltask>
                        </then>
                    </if>
                </else>
            </if>

            <copy todir="${caarray-ear.target.dir}/lib" flatten="true">
                <path refid="ejb.compile.dependencies.path" />
                <path refid="war.compile.ear-provided.depenendencies.path" />
            </copy>
            <pathconvert pathsep="|" property="flattened.ear.lib.dependencies">
                <fileset dir="${caarray-ear.target.dir}/lib"/>
                <flattenmapper />
            </pathconvert>
            <property name="application.xml.fragment.file" location="${caarray-ear.target.dir}/application.xml.fragment"/>
            <echo append="false" file="${application.xml.fragment.file}"><![CDATA[
            <!-- dependency jars -->]]></echo>
            <for param="file" list="${flattened.ear.lib.dependencies}" delimiter="|">
                <sequential>
                    <echo append="true" file="${application.xml.fragment.file}"><![CDATA[
    <module xmlns="http://java.sun.com/xml/ns/javaee">
        <java>lib/@{file}</java>
    </module>]]></echo>
                </sequential>
            </for>
            <echo append="true" file="${application.xml.fragment.file}"><![CDATA[
            <!-- end dependency jars -->]]></echo>
            <xmltask source="${caarray-ear.resources.dir}/application.xml" dest="${caarray-ear.target.dir}/application.xml">
                <insert path="//*[local-name()='module'][last()]" file="${application.xml.fragment.file}" position="after"/>
            </xmltask>
            <ear destfile="${caarray.ear}" appxml="${caarray-ear.target.dir}/application.xml" duplicate="preserve">
                <metainf dir="${caarray-ear.target.dir}/xml" includes="*.xml" excludes="jboss-service.xml" />
                <manifest>
                    <section name="gov/nih/nci/caarray/">
                        <attribute name="Specification-Title" value="caArray" />
                        <attribute name="Specification-Version" value="${svn.url} ${svn.revision}" />
                        <attribute name="Specification-Vendor" value="5AM Solutions" />
                        <attribute name="Implementation-Title" value="caArray" />
                        <attribute name="Implementation-Version" value="${svn.url} ${svn.revision}" />
                        <attribute name="Implementation-Vendor" value="5AM Solutions" />
                    </section>
                </manifest>
                <fileset dir="${caarray-ear.target.dir}/xml" includes="jboss-service.xml">
                </fileset>
                <fileset dir="${caarray-war.target.dir}">
                    <include name="caarray.war" />
                </fileset>
                <fileset dir="${caarray-ejb.target.dir}">
                    <include name="caarray-ejb.jar" />
                </fileset>
                <fileset dir="${caarray-common.target.dir}">
                    <include name="caarray-common.jar" />
                </fileset>
                <fileset dir="${caarray-ear.target.dir}">
                    <include name="lib/*.jar" />
                </fileset>
            </ear>
        </sequential>
    </macrodef>

    <target name="build:caarray.ear" depends="init:third-party-paths,build:caarray.war,build:caarray-ejb.jar,build:caarray-common.jar,svn:getinfo">
        <build-caarray.ear />
    </target>

    <target name="build:functional:caarray.ear" depends="init:third-party-paths,build:functional:caarray.war,build:functional:caarray-ejb.jar,build:functional:caarray-common.jar">
        <build-caarray.ear />
    </target>

    <target name="build:caarray-grid-svc.common.jar" depends="init:third-party-paths,compile:caarray-grid-svc.common.jar,svn:getinfo">
        <mkdir dir="${caarray-grid-svc.common.target.dir}" />
        <pathconvert pathsep=" " property="flattened.common.dependencies" refid="common.compile.dependencies.path">
            <flattenmapper />
        </pathconvert>
        <echo file="${caarray-common.target.dir}/flattened_dependencies" message="./lib/${flattened.common.dependencies}" />
        <replace file="${caarray-common.target.dir}/flattened_dependencies" token=" " value=" ./lib/" />
        <loadfile srcfile="${caarray-common.target.dir}/flattened_dependencies" property="processed.common.dependencies.ready.for.manifest.classpath" />
        <jar destfile="${caarray-grid-svc.common.jar}">
            <manifest>
                <attribute name="Class-Path" value="${processed.common.dependencies.ready.for.manifest.classpath}" />
                <section name="gov/nih/nci/caarray/">
                    <attribute name="Specification-Title" value="caArray Grid Common Library" />
                    <attribute name="Specification-Version" value="${svn.url} ${svn.revision}" />
                    <attribute name="Specification-Vendor" value="5AM Solutions" />
                    <attribute name="Implementation-Title" value="caArray Grid Common Library" />
                    <attribute name="Implementation-Version" value="${svn.url} ${svn.revision}" />
                    <attribute name="Implementation-Vendor" value="5AM Solutions" />
                </section>
            </manifest>
            <fileset dir="${caarray-grid-svc.common.classes.dir}" />
        </jar>
    </target>

    <target name="build:caarray-grid-svc" depends="init:third-party-paths,compile:caarray-grid-svc, build:caarray-grid-svc.common.jar">
        <for param="version" list="${caarray-grid-svc.versions}">
            <sequential>
                <ant dir="${caarray-grid-svc.base.dir}/@{version}" target="jars" inheritall="false">
                    <property name="jboss.server.hostname" value="${jboss.server.hostname}" />
                    <property name="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
                    <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
                    <property name="caarray-grid-svc.common.target.dir" value="${caarray-grid-svc.common.target.dir}"/>
                </ant>
            </sequential>
        </for>
    </target>

    <!-- ******************************************************************* -->
    <!-- ** TEST TARGETS                                                  ** -->
    <!-- ******************************************************************* -->

    <target name="test" unless="notest" depends="init:third-party-paths,test:unit" description="Executes the unit tests"/>

    <!-- Test Data Targets -->

    <target name="test:copy-files-to-target-dir-and-unpack-test-data" unless="notest" depends="init:third-party-paths">
        <outofdate>
            <sourcefiles>
                <fileset dir="${test.data.files.dir}" includes="**/*.zip"/>
            </sourcefiles>
            <mapper type="glob" dir="${test.data.files.dir}" from="*.zip" to="${test.data.target.dir}/*.zip"/>
            <sequential>
                <copy todir="${test.data.target.dir}">
                    <fileset dir="${test.data.files.dir}"/>
                </copy>
                <for param="zipfile">
                    <path>
                        <fileset dir="${test.data.target.dir}" includes="**/*.zip" />
                    </path>
                    <sequential>
                        <unzip overwrite="false" src="@{zipfile}" dest="@{zipfile}/.." />
                    </sequential>
                </for>
            </sequential>
        </outofdate>
    </target>

    <target name="test:compile:test-data-classes" unless="notest" depends="init:third-party-paths">
        <mkdir dir="${test.data.classes.dir}" />
        <javac srcdir="${test.data.src.dir}" destdir="${test.data.classes.dir}" debug="true">
        </javac>
    </target>

    <!-- JUnit Test Targets -->

    <target name="test:unit" unless="notest" depends="init:third-party-paths,test:junit-caarray-client.jar,
      test:instrument,
      test:junit-caarray-common.jar,
      test:junit-caarray-ejb.jar,
      test:junit-caarray.war,
      test:junit-caarray-plugins,
      test:junit-cn2magetab,
      test:junit-report,
      test:cobertura-report,
      test:cobertura-check">
        <fail if="junit.failure" message="There were JUnit failures." />
        <fail if="cobertura.failure" message="Test coverage was insufficient (see Cobertura report)." />
    </target>

    <!-- allows setting the "nocoverage" property to indicate that cobertura should not be invoked -->
    <target name="init:cobertura-runcheck">
      <condition property="nocobertura">
        <or>
          <isset property="notest"/>
          <isset property="nocoverage"/>
        </or>
      </condition>
    </target>

    <!-- cn2magetab -->

    <target name="test:instrument:cn2magetab" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths,compile:cn2magetab">
        <cobertura-instrument todir="${cn2magetab.instrumented.classes.dir}" datafile="${cobertura.file}">
            <fileset dir="${cn2magetab.classes.dir}">
                <include name="gov/nih/nci/**" />
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="test:compile:cn2magetab.test.classes" unless="notest" depends="init:third-party-paths,compile:cn2magetab">
        <mkdir dir="${cn2magetab.test.classes.dir}" />
        <javac srcdir="${cn2magetab.test.src.dir}" destdir="${cn2magetab.test.classes.dir}" debug="true">
            <classpath>
                <pathelement location="${cn2magetab.classes.dir}" />
                <path refid="cn2magetab.test.dependencies.path" />
            </classpath>
        </javac>
    </target>

    <target name="test:junit-cn2magetab" unless="notest" depends="init:third-party-paths,test:compile:cn2magetab.test.classes,test:instrument:cn2magetab">
        <caarray-run-junit-tests test.src.dir="${cn2magetab.test.src.dir}" instrumented.classes="${cn2magetab.instrumented.classes.dir}" xml.output.dir="${cn2magetab.target.dir}/junit" classpath="${cn2magetab.test.classes.dir};${cn2magetab.classes.dir};${caarray-common.classes.dir}" classpathref.id="cn2magetab.test.dependencies.path" />
    </target>

    <!-- caarray-client.jar -->

    <target name="test:instrument:caarray-client.jar" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths,compile:caarray-client.jar">
        <cobertura-instrument todir="${caarray-client.instrumented.classes.dir}" datafile="${cobertura.file}">
            <fileset dir="${caarray-client.classes.dir}">
                <include name="gov/nih/nci/caarray/**" />
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="test:instrument-functional:caarray-client.jar" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths,compile:caarray-client.jar">
        <cobertura-instrument todir="${caarray-client.instrumented.classes.dir}" datafile="${cobertura-functional.file}">
            <fileset dir="${caarray-client.classes.dir}">
                <include name="gov/nih/nci/caarray/**" />
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="test:compile:caarray-client.test.classes" unless="notest" depends="init:third-party-paths,compile:caarray-client.jar,test:compile:test-data-classes">
        <mkdir dir="${caarray-client.test.classes.dir}" />
        <javac srcdir="${caarray-client.test.src.dir}" destdir="${caarray-client.test.classes.dir}" debug="true">
            <classpath>
                <pathelement location="${test.data.classes.dir}" />
                <pathelement location="${caarray-client.classes.dir}" />
                <pathelement location="${caarray-client.test.files.dir}" />
                <pathelement location="${caarray-client.resources.dir}" />
                <path refid="common.compile.dependencies.path" />
                <path refid="jboss.dependencies.path"/>
                <path refid="unit.test.dependencies.path" />
            </classpath>
        </javac>
    </target>

    <target name="test:junit-caarray-client.jar" unless="notest" depends="init:third-party-paths,test:compile:caarray-client.test.classes,test:instrument:caarray-client.jar">
        <caarray-run-junit-tests test.src.dir="${caarray-client.test.src.dir}" xml.output.dir="${caarray-client.target.dir}/junit" instrumented.classes="${caarray-client.instrumented.classes.dir}" classpath="${caarray-client.test.classes.dir};${test.data.target.dir};${test.classes.dir};${caarray-client.test.files.dir};${caarray-client.classes.dir};${caarray-client.resources.dir};" classpathref.id="client.test.dependencies.path" />
    </target>

    <!-- caarray-common.jar -->

    <target name="test:instrument:caarray-common.jar" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths">
        <cobertura-instrument todir="${caarray-common.instrumented.classes.dir}" datafile="${cobertura.file}">
            <fileset dir="${caarray-common.classes.dir}">
                <include name="**/*.class" />
                <exclude name="**/external/**/*.class" />
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="test:instrument-functional:caarray-common.jar" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths,build:caarray-common.jar">
        <cobertura-instrument datafile="${cobertura-functional.file}">
            <fileset file="${caarray-common.jar}" />
        </cobertura-instrument>
    </target>

    <target name="test:compile:caarray-common.test.classes" unless="notest" depends="init:third-party-paths,compile:caarray-common.jar,test:compile:test-data-classes">
        <mkdir dir="${caarray-common.test.classes.dir}" />
        <javac srcdir="${caarray-common.test.src.dir}" destdir="${caarray-common.test.classes.dir}" debug="true">
            <classpath>
                <pathelement location="${test.data.classes.dir}" />
                <pathelement location="${caarray-common.classes.dir}" />
                <pathelement location="${caarray-common.test.files.dir}" />
                <pathelement location="${caarray-common.resources.dir}" />
            </classpath>
            <classpath refid="common.test.dependencies.path" />
        </javac>
    </target>

    <target name="test:junit-caarray-common.jar" unless="notest" depends="init:third-party-paths,test:compile:caarray-common.test.classes,test:instrument:caarray-common.jar,configure-datasource-for-test,test:copy-files-to-target-dir-and-unpack-test-data">
        <caarray-run-junit-tests test.src.dir="${caarray-common.test.src.dir}" xml.output.dir="${caarray-common.target.dir}/junit" instrumented.classes="${caarray-common.instrumented.classes.dir}" classpath="${caarray-common.test.classes.dir};${test.data.target.dir};${test.data.classes.dir};${caarray-common.classes.dir};${caarray-common.test.files.dir};" classpathref.id="common.test.dependencies.path" />
    </target>

    <!-- caarray-ejb.jar -->

    <target name="test:instrument:caarray-ejb.jar" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths,compile:caarray-ejb.jar">
        <cobertura-instrument todir="${caarray-ejb.instrumented.classes.dir}" datafile="${cobertura.file}">
            <fileset dir="${caarray-ejb.classes.dir}">
                <include name="**/*.class" />
                <exclude name="**/external/**/*.class" />
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="test:instrument-functional:caarray-ejb.jar" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths,build:caarray-ejb.jar">
        <cobertura-instrument datafile="${cobertura-functional.file}">
            <fileset file="${caarray-ejb.jar}" />
        </cobertura-instrument>
    </target>

    <target name="test:compile:caarray-ejb.test.classes" unless="notest" depends="init:third-party-paths,compile:caarray-ejb.jar,compile:caarray-client.jar,compile:caarray-common.jar,test:compile:caarray-common.test.classes,test:compile:test-data-classes">
        <mkdir dir="${caarray-ejb.test.classes.dir}" />
        <javac srcdir="${caarray-ejb.test.src.dir}" destdir="${caarray-ejb.test.classes.dir}" debug="true">
            <include name="**/*"/>
            <classpath>
                <pathelement location="${caarray-ejb.classes.dir}" />
                <pathelement location="${caarray-client.classes.dir}" />
                <pathelement location="${caarray-common.classes.dir}" />
                <pathelement location="${caarray-common.test.classes.dir}" />
                <pathelement location="${test.data.classes.dir}" />
            </classpath>
            <classpath refid="ejb.test.dependencies.path" />
            <classpath refid="mysql-connector-java.jar.path" />
        </javac>
    </target>

    <target name="test:junit-caarray-ejb.jar" unless="notest" depends="init:third-party-paths,test:compile:caarray-ejb.test.classes,test:instrument:caarray-ejb.jar,compile:caarray-client.jar,compile:caarray-common.jar,test:copy-files-to-target-dir-and-unpack-test-data, test:caarray-fileStorage-prepare">
        <propertyfile file="${caarray-ejb.test.classes.dir}/dataStorage.properties">
            <entry key="dataStorage.fileSystem.baseDir" value="${dataStorage.fileSystem.testBaseDir}"/>
            <entry key="dataStorage.fileDataEngine" value="${dataStorage.fileDataEngine}"/>
            <entry key="dataStorage.parsedDataEngine" value="${dataStorage.parsedDataEngine}"/>
        </propertyfile>
        <caarray-run-junit-tests test.src.dir="${caarray-ejb.test.src.dir}" xml.output.dir="${caarray-ejb.target.dir}/junit" instrumented.classes="${caarray-ejb.instrumented.classes.dir};${caarray-common.instrumented.classes.dir}" classpath="${caarray-ejb.test.classes.dir};${caarray-common.test.classes.dir};${test.data.target.dir};${test.data.classes.dir};${caarray-ejb.test.resources.dir};${caarray-ejb.resources.dir};${caarray-common.test.files.dir};${caarray-ejb.classes.dir};${caarray-client.classes.dir};${caarray-common.classes.dir};" classpathref.id="ejb.test.dependencies.path"/>
    </target>

    <target name="test:caarray-fileStorage-prepare" description="Prepare file storage test base directory.">
        <check-required-property name="dataStorage.fileSystem.testBaseDir" />
        <mkdir dir="${dataStorage.fileSystem.testBaseDir}" />
    </target>

    <!-- caarray-plugins -->

    <target name="test:instrument:caarray-plugins" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths,compile:caarray-plugins">
        <for param="plugin" list="${caarray-plugins.pluginList}">
            <sequential>
                <cobertura-instrument todir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.instrumented.classes.subdir}" datafile="${cobertura.file}">
                    <fileset dir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.classes.subdir}">
                        <include name="**/*.class" />
                    </fileset>
                </cobertura-instrument>
            </sequential>
        </for>
    </target>

    <target name="test:instrument-functional:caarray-plugins" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths,build:caarray-plugins">
        <for param="plugin" list="${caarray-plugins.pluginList}">
            <sequential>
                <cobertura-instrument todir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.instrumented.classes.subdir}" datafile="${cobertura-functional.file}">
                    <fileset dir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.classes.subdir}">
                        <include name="**/*.class" />
                    </fileset>
                </cobertura-instrument>
            </sequential>
        </for>
    </target>

    <target name="test:compile:caarray-plugins.test.classes" unless="notest" depends="init:third-party-paths,compile:caarray-plugins,test:compile:caarray-ejb.test.classes">
        <for param="plugin" list="${caarray-plugins.pluginList}">
            <sequential>
                <mkdir dir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.test.classes.subdir}" />
                <propertycopy property="requiredPlugins" override="true" from="caarray-plugins.@{plugin}.requires"/>
                <var name="plugin.classpath" value="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.classes.subdir};" />
                <echo message="required plugins: ${requiredPlugins}"/>
                <for param="requiredPlugin" list="${requiredPlugins}">
                    <sequential>
                        <var name="plugin.classpath" value="${plugin.classpath}${caarray-plugins.dir}/@{requiredPlugin}/${caarray-plugins.classes.subdir};"/>
                    </sequential>
                </for>
                <echo message="plugin cp: ${plugin.classpath}"/>

                <javac srcdir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.test.src.subdir}" destdir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.test.classes.subdir}" debug="true">
                    <classpath>
                        <pathelement path="${plugin.classpath}" />
                        <pathelement location="${caarray-ejb.classes.dir}" />
                        <pathelement location="${caarray-client.classes.dir}" />
                        <pathelement location="${caarray-common.classes.dir}" />
                        <pathelement location="${caarray-common.test.classes.dir}" />
                        <pathelement location="${caarray-ejb.test.classes.dir}" />
                        <pathelement location="${test.data.classes.dir}" />
                    </classpath>
                    <classpath refid="ejb.test.dependencies.path" />
                    <classpath refid="mysql-connector-java.jar.path" />
                </javac>
            </sequential>
        </for>
    </target>

    <target name="test:junit-caarray-plugins" unless="notest" depends="init:third-party-paths,test:compile:caarray-plugins.test.classes,test:instrument:caarray-plugins,test:copy-files-to-target-dir-and-unpack-test-data">
        <for param="plugin" list="${caarray-plugins.pluginList}">
            <sequential>
                <var name="plugin.test.classpath" value="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.test.classes.subdir};${caarray-ejb.test.classes.dir};${caarray-common.test.classes.dir};${test.data.target.dir};${test.data.classes.dir};${caarray-plugins.dir}/@{plugin}/${caarray-plugins.test.resources.subdir};${caarray-plugins.dir}/@{plugin}/${caarray-plugins.resources.subdir};${caarray-ejb.test.resources.dir};${caarray-ejb.resources.dir};${caarray-common.test.files.dir};${caarray-plugins.dir}/@{plugin}/${caarray-plugins.classes.subdir};${caarray-ejb.classes.dir};${caarray-client.classes.dir};${caarray-common.classes.dir};"/>
                <propertycopy property="requiredPlugins" override="true" from="caarray-plugins.@{plugin}.requires"/>
                <echo message="required plugins: ${requiredPlugins}"/>
                <for param="requiredPlugin" list="${requiredPlugins}">
                    <sequential>
                        <var name="plugin.test.classpath" value="${plugin.test.classpath}${caarray-plugins.dir}/@{requiredPlugin}/${caarray-plugins.classes.subdir};"/>
                    </sequential>
                </for>
                <caarray-run-junit-tests test.src.dir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.test.src.subdir}"
                    xml.output.dir="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.target.subdir}/junit"
                    instrumented.classes="${caarray-plugins.dir}/@{plugin}/${caarray-plugins.instrumented.classes.subdir};${caarray-ejb.instrumented.classes.dir};${caarray-common.instrumented.classes.dir}"
                    classpath="${plugin.test.classpath}" classpathref.id="ejb.test.dependencies.path"
                    forkmode="perTest"/>
            </sequential>
        </for>
    </target>

    <!-- caarray.war -->

    <target name="test:instrument:caarray.war" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths,compile:caarray.war">
        <cobertura-instrument todir="${caarray-war.instrumented.classes.dir}" datafile="${cobertura.file}">
            <!-- do not have good way of testing the upload handler via junit for the time being -->
            <fileset dir="${caarray-war.classes.dir}">
                <include name="**/*.class" />
                <exclude name="**/fileupload/*.class" />
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="test:instrument-functional:caarray.war" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths,build:caarray.war">
        <cobertura-instrument datafile="${cobertura-functional.file}">
            <fileset file="${caarray.war}" />
        </cobertura-instrument>
    </target>

    <target name="test:compile:caarray-war.test.classes" unless="notest" depends="init:third-party-paths,compile:caarray.war,compile:caarray-common.jar,compile:caarray-ejb.jar,test:compile:caarray-ejb.test.classes,test:compile:caarray-common.test.classes,test:compile:test-data-classes">
        <mkdir dir="${caarray-war.test.classes.dir}" />
        <javac srcdir="${caarray-war.test.src.dir}" destdir="${caarray-war.test.classes.dir}" debug="true">
            <include name="**/*"/>
            <classpath>
                <pathelement location="${test.data.classes.dir}" />
                <pathelement location="${caarray-war.classes.dir}" />
                <pathelement location="${caarray-common.classes.dir}" />
                <pathelement location="${caarray-ejb.classes.dir}" />
                <pathelement location="${caarray-ejb.test.classes.dir}" />
                <pathelement location="${caarray-common.test.classes.dir}" />
                <pathelement location="${caarray-common.test.files.dir}" />
            </classpath>
            <classpath refid="war.test.dependencies.path" />
        </javac>
    </target>

    <target name="test:junit-caarray.war" unless="notest" depends="init:third-party-paths,test:compile:caarray-war.test.classes,test:instrument:caarray.war,compile:caarray-ejb.jar,compile:caarray-common.jar,test:compile:caarray-ejb.test.classes,configure-datasource-for-test,test:copy-files-to-target-dir-and-unpack-test-data">
        <copy todir="${caarray-war.classes.dir}">
            <fileset dir="${caarray-war.src.dir}" includes="struts.xml,struts.properties,validators.xml" />
        </copy>
        <caarray-run-junit-tests test.src.dir="${caarray-war.test.src.dir}" xml.output.dir="${caarray-war.target.dir}/junit" instrumented.classes="${caarray-war.instrumented.classes.dir}" classpath="${caarray-war.test.classes.dir};${caarray-war.classes.dir};${caarray-common.test.classes.dir};${caarray-common.test.files.dir};${caarray-common.classes.dir};${caarray-ejb.classes.dir};${caarray-ejb.test.classes.dir};${test.data.target.dir};${test.data.classes.dir};" classpathref.id="war.test.dependencies.path" />
    </target>

    <target name="test:junit-report" unless="notest" depends="init:third-party-paths">
        <mkdir dir="${site.dir}/junit/unit" />
        <mkdir dir="${test.target.dir}/junit" />
        <junitreport todir="${site.dir}/junit/unit">
            <fileset dir="${caarray-client.target.dir}/junit">
                <include name="TEST-*.xml" />
            </fileset>
            <fileset dir="${caarray-common.target.dir}/junit">
                <include name="TEST-*.xml" />
            </fileset>
            <fileset dir="${caarray-ejb.target.dir}/junit">
                <include name="TEST-*.xml" />
            </fileset>
            <fileset dir="${caarray-war.target.dir}/junit">
                <include name="TEST-*.xml" />
            </fileset>
            <fileset dir="${cn2magetab.target.dir}/junit">
                <include name="TEST-*.xml" />
            </fileset>
            <fileset dir="${caarray-plugins.dir}">
                <include name="**/target/junit/TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${site.dir}/junit/unit" />
        </junitreport>
    </target>

    <!-- Cobertura Test Targets -->
    <target name="test:cobertura-report" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths">
        <cobertura-report format="xml" destdir="${site.dir}/cobertura/unit" datafile="${cobertura.file}">
            <fileset dir="${caarray-client.src.dir}" />
            <fileset dir="${caarray-common.src.dir}" />
            <fileset dir="${caarray-ejb.src.dir}" />
            <fileset dir="${caarray-plugins.dir}" includes="**/src/main/java/**/*.java" />
            <fileset dir="${caarray-war.src.dir}" />
            <fileset dir="${cn2magetab.src.dir}" />
        </cobertura-report>
        <cobertura-report format="html" destdir="${site.dir}/cobertura/unit" datafile="${cobertura.file}">
            <fileset dir="${caarray-client.src.dir}" />
            <fileset dir="${caarray-common.src.dir}" />
            <fileset dir="${caarray-ejb.src.dir}" />
            <fileset dir="${caarray-war.src.dir}" />
            <fileset dir="${cn2magetab.src.dir}" />
        </cobertura-report>
    </target>

    <target name="test:cobertura-check" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths">
        <cobertura-check failureproperty="cobertura.failure" datafile="${cobertura.file}" haltonfailure="false" linerate="0" packagebranchrate="0" packagelinerate="0" totalbranchrate="70" totallinerate="78" />
    </target>

    <!-- Functional (Selenium) and API Test Targets -->
    <target name="-test:functional:setup" depends="deploy:functional:caarray.ear, deploy:caarray-grid-svc-jboss, deploy:start-jboss-servers, test:wait-for-jboss-servers"/>

    <target
        name="test:instrument"
        depends="
            test:instrument:cn2magetab,
            test:instrument:caarray-client.jar,
            test:instrument:caarray-common.jar,
            test:instrument:caarray-ejb.jar,
            test:instrument:caarray.war"/>

    <target name="test:api" depends="
        init:third-party-paths,
        test:instrument,
        test:functional,
        test:api:run-tests,
        test:grid:run-tests,
        deploy:stop-jboss,
        test:functional:report,
        test:functional:cobertura-report">
        <fail if="junit.failure" message="There were functional test failures." />
    </target>

    <target name="test:functional" depends="
        init:third-party-paths,
        test:functional:prepare,
        -test:functional:setup,
        test:api:run-tests,
        test:grid:run-tests,
        database:reinitialize,
        test:functional:run-tests,
        deploy:stop-jboss,
        test:functional:report,
        test:functional:cobertura-report">
        <fail if="junit.failure" message="There were functional test failures." />
    </target>

    <target name="test:functional:instrument" unless="notest" depends="
        init:third-party-paths,
        test:instrument-functional:caarray-client.jar,
        test:instrument-functional:caarray-common.jar,
        test:instrument-functional:caarray-ejb.jar,
        test:instrument-functional:caarray.war"/>

    <target name="test:functional:prepare" unless="notest" depends="init:third-party-paths,test:instrument,test:functional:instrument">
        <copy tofile="${build.dir}/cobertura.ser" file="${cobertura-functional.file}" />
        <copy todir="${jboss.lib.dir}" overwrite="true" flatten="true">
            <fileset refid="cobertura.jar.fileset"/>
        </copy>
    </target>

    <target name="test:functional:cobertura-report" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths,test:functional:cobertura-report-functional-only,
        test:functional:cobertura-report-check-unit,
        test:functional:cobertura-report-merged" />

    <target name="test:functional:cobertura-report-functional-only" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths">
        <move file="${build.dir}/cobertura.ser" tofile="${cobertura-functional.file}" />
        <cobertura-report format="xml" destdir="${site.dir}/cobertura/functional" datafile="${cobertura-functional.file}">
            <fileset dir="${caarray-client.src.dir}" />
            <fileset dir="${caarray-common.src.dir}" />
            <fileset dir="${caarray-ejb.src.dir}" />
            <fileset dir="${caarray-war.src.dir}" />
        </cobertura-report>
        <cobertura-report format="html" destdir="${site.dir}/cobertura/functional" datafile="${cobertura-functional.file}">
            <fileset dir="${caarray-client.src.dir}" />
            <fileset dir="${caarray-common.src.dir}" />
            <fileset dir="${caarray-ejb.src.dir}" />
            <fileset dir="${caarray-war.src.dir}" />
        </cobertura-report>
    </target>

    <target name="test:functional:cobertura-report-check-unit" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths">
        <available file="${cobertura.file}" property="cobertura.unit.exists" />
    </target>

    <target name="test:functional:cobertura-report-merged" if="cobertura.unit.exists" unless="nocobertura" depends="init:cobertura-runcheck,init:third-party-paths">
        <cobertura-merge datafile="${cobertura-merged.file}">
            <fileset file="${cobertura-merged.file}" />
            <fileset file="${cobertura.file}" />
        </cobertura-merge>
        <cobertura-report format="xml" destdir="${site.dir}/cobertura/merged" datafile="${cobertura-merged.file}">
            <fileset dir="${caarray-client.src.dir}" />
            <fileset dir="${caarray-common.src.dir}" />
            <fileset dir="${caarray-ejb.src.dir}" />
            <fileset dir="${caarray-war.src.dir}" />
        </cobertura-report>
        <cobertura-report format="html" destdir="${site.dir}/cobertura/merged" datafile="${cobertura-merged.file}">
            <fileset dir="${caarray-client.src.dir}" />
            <fileset dir="${caarray-common.src.dir}" />
            <fileset dir="${caarray-ejb.src.dir}" />
            <fileset dir="${caarray-war.src.dir}" />
        </cobertura-report>
    </target>

    <target name="test:check-functional-test-results" unless="notest" depends="init:third-party-paths">
        <fail if="junit.failure" message="There were functional test failures." />
    </target>

    <target name="test:selenium:start-server" unless="notest" depends="init:third-party-paths,test:selenium:stop-server">
        <echo message="Starting Selenium RC server on port ${selenium.server.port}" />
        <java jar="${project.lib}/${selenium-server.jar}" fork="true" spawn="true">
            <arg value="-port" />
            <arg value="${selenium.server.port}" />
            <arg value="-debug" />
            <arg value="-log" />
            <arg value="selenium.log" />
        </java>
    </target>

    <target name="test:selenium:stop-server" unless="notest" depends="init:third-party-paths">
        <mkdir dir="${target.dir}/temp" />
        <get taskname="selenium-shutdown" src="http://localhost:${selenium.server.port}/selenium-server/driver/?cmd=shutDown" dest="${target.dir}/temp/selenium-shutdown-result.txt" ignoreerrors="true" />
        <echo taskname="selenium-shutdown" message="DGF Errors during shutdown are expected" />
    </target>

    <target name="test:functional:compile-tests" unless="notest" depends="init:third-party-paths,test:selenium:compile-tests,test:api:compile-tests,test:grid:compile-tests" />

    <target name="test:selenium:compile-tests" unless="notest" depends="init:third-party-paths,compile:caarray-common.jar,compile:caarray-client.jar,compile:caarray-ejb.jar,test:compile:test-data-classes">
        <mkdir dir="${test.classes.dir}" />
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" debug="true">
            <classpath>
                <pathelement location="${caarray-client.classes.dir}" />
                <pathelement location="${caarray-common.classes.dir}" />
                <pathelement location="${caarray-ejb.classes.dir}" />
                <pathelement location="${test.data.classes.dir}" />
            </classpath>
            <classpath refid="ejb.compile.dependencies.path" />
            <classpath refid="selenium.dependencies.path" />
            <exclude name="**/api/**" />
        </javac>
    </target>

    <target name="test:api:compile-tests" unless="notest" depends="init:third-party-paths,build:caarray-client.jar">
        <mkdir dir="${test.classes.dir}" />
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" debug="true">
            <classpath>
                <fileset dir="${caarray-client.target.dir}" includes="caarray-client*.jar" />
                <path refid="common.test.dependencies.path" />
                <path refid="external.api.dependencies.path" />
            </classpath>
            <include name="gov.nih.nci.caarray.test.base.TestProperties.java" />
            <include name="**/api/**/java/**" />
        </javac>
    </target>

    <target name="test:grid:compile-tests" unless="notest" depends="init:third-party-paths,build:caarray-client.jar,build:caarray-grid-svc">
        <mkdir dir="${test.classes.dir}" />
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" debug="true">
            <classpath>
                <fileset dir="${caarray-client.target.dir}" includes="caarray-client*.jar" />
                <path refid="test.grid.dependencies.path" />
            </classpath>
            <include name="gov.nih.nci.caarray.test.base.TestProperties.java" />
            <include name="**/api/**/grid/**" />
        </javac>
    </target>

    <target name="test:functional:run-tests" unless="notest" depends="init:third-party-paths,test:selenium:run-tests" />

    <target name="test:functional:report" unless="notest" depends="init:third-party-paths">
        <mkdir dir="${site.dir}/junit/selenium" />
        <mkdir dir="${site.dir}/junit/api/java" />
        <mkdir dir="${site.dir}/junit/api/grid" />
        <if>
            <available file="${test.target.dir}/junit/selenium" type="dir"/>
            <then>
                <junitreport todir="${site.dir}/junit/selenium">
                <fileset dir="${test.target.dir}/junit/selenium">
                    <include name="TEST-*.xml" />
                </fileset>
                <report format="frames" todir="${site.dir}/junit/selenium" />
            </junitreport>
            </then>
        </if>
        <if>
            <available file="${test.target.dir}/junit/api/java" type="dir"/>
            <then>
                <junitreport todir="${site.dir}/junit/api/java">
                <fileset dir="${test.target.dir}/junit/api/java">
                    <include name="TEST-*.xml" />
                </fileset>
                <report format="frames" todir="${site.dir}/junit/api/java" />
            </junitreport>
            </then>
        </if>
        <if>
            <available file="${test.target.dir}/junit/api/grid" type="dir"/>
            <then>
                <junitreport todir="${site.dir}/junit/api/grid">
                <fileset dir="${test.target.dir}/junit/api/grid">
                    <include name="TEST-*.xml" />
                </fileset>
                <report format="frames" todir="${site.dir}/junit/api/grid" />
            </junitreport>
            </then>
        </if>
    </target>

    <target name="test:selenium:run-tests:do-run" unless="notest" depends="init:third-party-paths">
        <caarray-run-junit-tests
            test.src.dir="${test.src.dir}"
            source.include="**/gov/nih/nci/caarray/test/functional/*Test.java"
            xml.output.dir="${test.target.dir}/junit/selenium"
            classpath="${test.classes.dir};${test.data.classes.dir};${test.data.target.dir};"
            classpathref.id="selenium.dependencies.path"/>
    </target>

    <target name="test:selenium:run-tests" unless="notest" depends="init:third-party-paths,test:selenium:compile-tests,test:copy-files-to-target-dir-and-unpack-test-data,build:caarray-client.jar,test:selenium:start-server,test:selenium:run-tests:do-run,test:selenium:stop-server"/>

    <target name="test:selenium:prepare-selenium-server.jar" unless="notest" depends="init:third-party-paths">
        <jar update="true" jarfile="${selenium-server.jar}" basedir="${test.resources.dir}/selenium" />
    </target>

    <target name="test:api:run-tests" unless="notest" depends="init:third-party-paths,test:api:compile-tests,build:caarray-client.jar">
        <echo> make sure you run "ant test:api:init-data" to setup test data</echo>
        <caarray-run-junit-tests test.src.dir="${test.src.dir}" xml.output.dir="${test.target.dir}/junit/api/java"
            instrumented.classes="${caarray-common.instrumented.classes.dir}"
            classpath="${test.classes.dir};${caarray-client.classes.dir};${caarray-client.resources.dir};${caarray-ejb.classes.dir};${caarray-common.classes.dir}"
            classpathref.id="client.test.dependencies.path"
            source.include="**/api/**/java/**/SearchServiceTest.java" source.exclude="**/Abstract*.java" />
    </target>

    <target name="test:wait-for-jboss-servers">
        <waitfor maxwait="8" maxwaitunit="minute" checkevery="500">
            <http url="http://${jboss.server.hostname}:${jboss.server.port}/caarray/home.action"/>
        </waitfor>
        <echo message="carray JBoss started properly."/>

        <waitfor maxwait="8" maxwaitunit="minute" checkevery="500">
            <http url="http://${grid.server.hostname}:${grid.server.port}/wsrf/services/cagrid/CaArraySvc"/>
        </waitfor>
        <echo message="grid services JBoss started properly."/>
    </target>

    <target name="test:api-wrapper">
        <antcall target="test:wait-for-jboss-servers" inheritAll="true" inheritRefs="true"/>
        <antcall target="deploy:stop-jboss-servers" inheritAll="true" inheritRefs="true"/>
        <antcall target="test:api:init-data" inheritAll="true" inheritRefs="true"/>
        <antcall target="test:api" inheritAll="true" inheritRefs="true"/>
        <antcall target="deploy:stop-jboss-servers" inheritAll="true" inheritRefs="true"/>
        <antcall target="test:selenium:stop-server" inheritAll="true" inheritRefs="true"/>
    </target>

    <target name="deploy:cleaup-testing-installation" depends="deploy:stop-jboss-servers">
        <delete dir="${application.base.path}"/>
    </target>

    <target name="test:api:init-data" unless="notest" depends="init:third-party-paths">
        <antcall target="database:dropAll"/>

        <!--
        the dump file was created with :
        mysqldump -compact -add-drop-table -u root caarraydb | gzip > caarraydb.sql.gz
        NOTE: you may have to prepend the sql file with "SET foreign_key_checks = 0;"

        -->
        <mkdir dir="${test.target.dir}"/>
        <gunzip src="${test.dir}/src/test/sql/caarraydb.sql.gz" dest="${test.target.dir}/caarraydb.sql"/>
        <echo message="about to import the DB dump..."/>
        <exec executable="${mysql.executable}" input="${test.target.dir}/caarraydb.sql">
            <arg value="-u"/><arg value="${database.user}"/>
            <arg value="-p${database.password}"/>
            <arg value="-h"/><arg value="${database.server}"/>
            <arg value="-P"/><arg value="${database.port}"/>
            <arg value="${database.name}"/>
        </exec>
        <echo message="done importing the DB dump."/>
        <antcall target="database:update"/>
    </target>

    <target name="test:grid:run-tests" unless="notest"  depends="init:third-party-paths,test:grid:compile-tests,build:caarray-client.jar,build:caarray-grid-svc">
        <caarray-run-junit-tests test.src.dir="${test.src.dir}" xml.output.dir="${test.target.dir}/junit/api/grid"
            classpath="${test.classes.dir};${caarray-common.classes.dir};${caarray-ejb.classes.dir};${caarray-grid-svc.common.jar};${caarray-client.resources.dir};"
            classpathref.id="test.grid.dependencies.path"
            source.include="**/api/**/grid/**/ModelApiTest.java" source.exclude="**/Abstract*.java" >
                <extentions>
                    <sysproperty key="globoss.server.http.port" value="${grid.server.port}" /><!-- same server, same port -->
                </extentions>
            </caarray-run-junit-tests>
    </target>

    <!-- ******************************************************************* -->
    <!-- ** CHECK TARGETS                                                 ** -->
    <!-- ******************************************************************* -->

    <target name="check" unless="nocheck" depends="init:third-party-paths,check:checkstyle,check:pmd">
        <fail if="checkstyle.failure" message="There were Checkstyle failures." />
        <fail if="pmd.failure" message="There were PMD failures." />
    </target>

    <target name="check:checkstyle" depends="init:third-party-paths">
        <mkdir dir="${site.dir}/checkstyle" />
        <!-- Checkstyle chokes on @throws CustomChangeException in gov.nih.nci.caarray.upgrade.AbstractCustomChange.java -->
        <!-- exclude the Fix* migrations pending resolution of how to treat them (ARRAY-1942) -->
        <property name="checkstyle-caarray-ejb-excludes" value="**/AbstractCustomChange.java, **/upgrade/Fix*.java" />

        <checkstyle config="${checkstyle.config}" failureProperty="checkstyle.failure" failOnViolation="false" maxerrors="0" maxwarnings="0">
            <classpath>
                <pathelement location="${caarray-common.jar}" />
                <pathelement location="${caarray-ejb.jar}" />
                <pathelement location="${caarray-war.classes.dir}" />
                <pathelement location="${cn2magetab.classes.dir}" />
            </classpath>
            <classpath refid="common.compile.dependencies.path" />
            <formatter type="xml" tofile="${site.dir}/checkstyle/checkstyle.xml" />
            <fileset dir="${caarray-common.src.dir}" includes="**/*.java" />
            <fileset dir="${caarray-ejb.src.dir}" includes="**/*.java" excludes="${checkstyle-caarray-ejb-excludes}" />
            <fileset dir="${caarray-war.src.dir}" includes="**/*.java" />
            <fileset dir="${cn2magetab.src.dir}" includes="**/*.java" />
            <fileset dir="${caarray-plugins.dir}">
                <include name="*/${caarray-plugins.src.subdir}/**/*.java" />
            </fileset>
        </checkstyle>
        <xslt in="${site.dir}/checkstyle/checkstyle.xml" out="${site.dir}/checkstyle/checkstyle.html" style="${resource.dir}/checkstyle-frames-errors.xsl">
            <param name="output.dir" expression="${site.dir}/checkstyle" />
            <classpath refid="checkstyle.jar.path"/>
            <classpath refid="serializer.jar.path"/>
            <classpath refid="xalan.jar.path"/>
        </xslt>
    </target>

    <target name="check:pmd" depends="init:third-party-paths">
        <mkdir dir="${site.dir}/pmd" />
        <mkdir dir="${site.dir}/pmd-jsp" />

        <pmd failonerror="false" rulesetfiles="${resource.dir}/pmd-ruleset.xml" failurespropertyname="pmd.failure" targetjdk="1.5">
            <formatter type="xml" toFile="${site.dir}/pmd/pmd-report.xml" toConsole="false" />
            <fileset dir="${caarray-common.src.dir}">
                <include name="**/*.java" />
            </fileset>
            <fileset dir="${caarray-war.src.dir}">
                <include name="**/*.java" />
            </fileset>
            <fileset dir="${caarray-ejb.src.dir}">
                <include name="**/*.java" />
            </fileset>
            <fileset dir="${caarray-plugins.dir}">
                <include name="*/${caarray-plugins.src.subdir}/**/*.java" />
            </fileset>
            <fileset dir="${cn2magetab.src.dir}">
                <include name="**/*.java" />
            </fileset>
        </pmd>

        <pmd failonerror="false" rulesetfiles="${resource.dir}/pmd-jsp-ruleset.xml" failurespropertyname="pmd.jsp.failure" targetjdk="1.5">
            <formatter type="xml" toFile="${site.dir}/pmd-jsp/pmd-jsp-report.xml" toConsole="false" />
            <fileset dir="${caarray-war.webapp.dir}">
                <include name="**/*.jsp" />
            </fileset>
        </pmd>

        <xslt in="${site.dir}/pmd/pmd-report.xml" out="${site.dir}/pmd/pmd-report.html" style="${resource.dir}/pmd-report-per-class.xslt">
        </xslt>

        <xslt in="${site.dir}/pmd-jsp/pmd-jsp-report.xml" out="${site.dir}/pmd-jsp/pmd-jsp-report.html" style="${resource.dir}/pmd-report-per-class.xslt">
        </xslt>
    </target>

    <target name="check:pmd:update-eclipse-projects" depends="init:third-party-paths">
        <copy file="${resource.dir}/pmd-ruleset.xml" tofile="${caarray-client.dir}/.ruleset" />
        <copy file="${resource.dir}/pmd-ruleset.xml" tofile="${caarray-common.dir}/.ruleset" />
        <copy file="${resource.dir}/pmd-ruleset.xml" tofile="${caarray-war.dir}/.ruleset" />
        <copy file="${resource.dir}/pmd-ruleset.xml" tofile="${caarray-ejb.dir}/.ruleset" />
    </target>

    <!-- ******************************************************************* -->
    <!-- ** SITE TARGETS                                                  ** -->
    <!-- ******************************************************************* -->


    <!-- ******************************************************************* -->
    <!-- ** SQL TARGETS                                                   ** -->
    <!-- ******************************************************************* -->

    <target name="database:init-sql" depends="init:third-party-paths">
        <delete dir="${caarraydb.sql.dir}"/>
        <mkdir dir="${caarraydb.sql.dir}" />
        <dependset>
            <srcfileset dir="${caarray-common.src.dir}">
                <include name="gov/nih/nci/caarray/domain/**/*.java" />
            </srcfileset>
            <srcfileset dir="${caarray-common.resources.dir}">
                <include name="*.hbm.xml" />
                <include name="hibernate.cfg.xml" />
                <include name="hibernate.properties" />
            </srcfileset>
            <targetfileset dir="${site.dir}/sql" />
        </dependset>
        <copy todir="${caarraydb.sql.dir}">
            <filterset refid="caarray.filterset" />
            <fileset dir="${caarraydb.sql.src.dir}" includes="**/*.sql" />
        </copy>
    </target>

    <target name="database:init-hibernatetool-taskdef" depends="init:third-party-paths">
        <taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="project.jars.path">
            <classpath>
                <pathelement location="${caarray-common.classes.dir}" />
                <pathelement location="${caarray-common.resources.dir}" />
            </classpath>
        </taskdef>
    </target>

    <target name="database:generate-drop-schema-sql" depends="init:third-party-paths,compile:caarray-common.jar,configure-datasource-for-test,database:init-sql,database:init-hibernatetool-taskdef">
        <hibernatetool destdir="${caarraydb.sql.dir}">
            <annotationconfiguration configurationfile="${caarray-common.test.classes.dir}/hibernate.cfg.xml" propertyfile="${caarray-common.test.classes.dir}/hibernate.properties" namingstrategy="gov.nih.nci.caarray.util.NamingStrategy" />
            <hbm2ddl drop="true" create="false" export="false" outputfilename="drop_schema.sql" />
        </hibernatetool>
    </target>

    <target name="database:generate-create-schema-sql" depends="init:third-party-paths,configure-datasource-for-test,compile:caarray-common.jar,database:init-sql,database:init-hibernatetool-taskdef">
        <hibernatetool destdir="${caarraydb.sql.dir}">
            <annotationconfiguration configurationfile="${caarray-common.test.classes.dir}/hibernate.cfg.xml" propertyfile="${caarray-common.test.classes.dir}/hibernate.properties" namingstrategy="gov.nih.nci.caarray.util.NamingStrategy" />
            <hbm2ddl drop="false" create="true" export="false" outputfilename="create_schema.sql" />
            <classpath>
                <pathelement location="${caarray-common.classes.dir}" />
                <pathelement location="${caarray-common.resources.dir}" />
            </classpath>
            <classpath refid="hibernate.jar.path" />
        </hibernatetool>
    </target>

    <target name="database:generate-schema-sql" depends="init:third-party-paths,database:generate-drop-schema-sql, database:generate-create-schema-sql" />

    <target name="database:generate-mged-sql" depends="init:third-party-paths,compile:caarray-common.jar,database:init-sql">
        <java classname="gov.nih.nci.caarray.util.owlparser.ParseMgedOntology" failonerror="true">
            <arg value="${caarraydb.sql.dir}" />
            <classpath>
                <pathelement location="${caarray-common.classes.dir}" />
                <pathelement location="${caarray-common.resources.dir}" />
            </classpath>
            <classpath refid="common.compile.dependencies.path" />
        </java>
    </target>

    <target name="database:reinitialize" depends="init:third-party-paths,database:dropAll,database:update" unless="nodbintegration" description="Completely reset caarraydb by dropping database, recreating, and creating schema, and populating with initial data"/>

    <target name="database:liquibase-taskdef" depends="init:third-party-paths">
        <path id="liquibase.dependencies.path">
            <pathelement location="${caarray-common.jar}" />
            <pathelement location="${caarray-ejb.jar}" />
            <fileset refid="liquibase.jar.fileset"/>
            <fileset refid="mysql-connector-java.jar.fileset"/>
            <fileset refid="log4j.jar.fileset"/>
            <fileset refid="nci-commons-core.jar.fileset"/>
            <fileset refid="javaee.jar.fileset"/>
            <fileset refid="affxfusion.jar.fileset"/>
            <fileset refid="commons-io.jar.fileset"/>
            <fileset refid="guice.jar.fileset"/>
            <fileset refid="guice-assistedinject.jar.fileset"/>
            <fileset refid="guice-multibindings.jar.fileset"/>
            <fileset refid="aopalliance.jar.fileset"/>
            <fileset refid="hibernate.jar.fileset"/>
            <fileset refid="hibernate-commons-annotations.jar.fileset"/>
            <fileset refid="slf4j-api.jar.fileset"/>
            <fileset refid="javassist.jar.fileset"/>
            <fileset refid="csmapi.jar.fileset"/>
            <fileset refid="common.compile.dependencies.fileset"/>
            <fileset refid="dozer.jar.fileset"/>
            <fileset refid="jaxen.jar.fileset"/>
            <fileset refid="asm.jar.fileset"/>
            <fileset refid="antlr.jar.fileset"/>
            <fileset refid="jboss-aop-client.jar.fileset"/>
            <pathelement path="${caarraydb.sql.src.dir}/liquibase" />
        </path>

        <taskdef resource="liquibasetasks.properties">
            <classpath refid="liquibase.dependencies.path"/>
        </taskdef>
    </target>

    <target name="database:update" depends="init:third-party-paths,build:caarray-common.jar,build:caarray-ejb.jar,database:liquibase-taskdef" unless="nodbintegration" description="Run all needed schema creation, population and updates scripts to get database to correct state">
        <updateDatabase
            driver="${database.driver}"
            url="${database.url}"
            username="${database.user}"
            password="${database.password}"
            classpathref="liquibase.dependencies.path"
            changeLogFile="db-upgrade.xml">
            <changeLogProperty name="csm.application.name" value="${csm.application.name}"/>
            <changeLogProperty name="environment" value="${environment}"/>
        </updateDatabase>
    </target>

    <target name="database:dropAll" depends="init:third-party-paths,build:caarray-ejb.jar,database:liquibase-taskdef" unless="nodbintegration" description="Drop all database tables and other objects">
        <dropAllDatabaseObjects
            driver="${database.driver}"
            url="${database.url}"
            username="${database.user}"
            password="${database.password}"
            classpathref="liquibase.dependencies.path"/>
    </target>

  <!-- ******************************************************************* -->
  <!-- ** STANDALONE DATABASE UPDATE TARGETS                            ** -->
  <!-- ******************************************************************* -->

  <target name="bda-lite:database:update:prepare" depends="init:third-party-paths,build:caarray-common.jar,build:caarray-ejb.jar" description="Prepares a zip file that contains all required artifacts for standalone db update.">
    <property name="db-standalone.dir" value="${software.dir}/target/database-standalone" />
    <property name="db-standalone.work.dir" value="${db-standalone.dir}/work" />
    <property name="db-standalone.build.dir" value="${db-standalone.work.dir}/build" />
    <property name="db-standalone.caarray-common.dir" value="${db-standalone.work.dir}/caarray-common.jar" />
    <property name="db-standalone.caarray-ejb.dir" value="${db-standalone.work.dir}/caarray-ejb.jar" />
    <property name="db-standalone.caarraydb.dir" value="${db-standalone.work.dir}/caarraydb" />
    <property name="db-standalone.lib.dir" value="${db-standalone.work.dir}/lib" />
    <property name="db-standalone.master-build.dir" value="${db-standalone.work.dir}/master_build" />
    <property name="db-standalone.target.dir" value="${db-standalone.work.dir}/target" />

    <mkdir dir="${db-standalone.dir}" />
    <mkdir dir="${db-standalone.work.dir}" />
    <mkdir dir="${db-standalone.build.dir}" />
    <copy todir="${db-standalone.build.dir}">
      <fileset dir="${software.dir}/build">
        <include name="build.xml" />
        <include name="default.properties" />
        <include name="macrodefs.xml" />
      </fileset>
    </copy>
    <!-- Update the Database properties in default.properties file -->
    <replaceregexp file="${db-standalone.build.dir}/default.properties" match="database.port=.*" replace="database.port=${database.port}" byline="true" />
    <replaceregexp file="${db-standalone.build.dir}/default.properties" match="database.name=.*" replace="database.name=${database.name}" byline="true" />
    <replaceregexp file="${db-standalone.build.dir}/default.properties" match="database.user=.*" replace="database.user=${database.user}" byline="true" />
    <replaceregexp file="${db-standalone.build.dir}/default.properties" match="database.server=.*" replace="database.server=${database.server}" byline="true" />
    <replaceregexp file="${db-standalone.build.dir}/default.properties" match="database.driver=.*" replace="database.driver=${database.driver}" byline="true" />
    <replaceregexp file="${db-standalone.build.dir}/default.properties" match="database.password=.*" replace="database.password=${database.password}" byline="true" />
    <replaceregexp file="${db-standalone.build.dir}/default.properties" match="database.url=.*" replace="database.url=${database.url}" byline="true" />
    <replaceregexp file="${db-standalone.build.dir}/default.properties" match="database.type=.*" replace="database.type=${database.type}" byline="true" />
    <replaceregexp file="${db-standalone.build.dir}/default.properties" match="environment=.*" replace="environment=${environment}" byline="true" />

    <mkdir dir="${db-standalone.caarray-common.dir}" />
    <copy todir="${db-standalone.caarray-common.dir}" file="${caarray-common.jar}" />
    <mkdir dir="${db-standalone.caarray-ejb.dir}" />
    <copy todir="${db-standalone.caarray-ejb.dir}" file="${caarray-ejb.jar}" />
    <mkdir dir="${db-standalone.caarraydb.dir}" />
    <copy todir="${db-standalone.caarraydb.dir}">
      <fileset dir="${caarraydb.sql.src.dir}" includes="**/*.*" />
    </copy>
    <mkdir dir="${db-standalone.lib.dir}" />
    <copy todir="${db-standalone.lib.dir}">
      <fileset dir="${lib.dir}" includes="**/*.jar" />
    </copy>
    <mkdir dir="${db-standalone.master-build.dir}" />
    <copy todir="${db-standalone.master-build.dir}">
      <fileset dir="${software.dir}/master_build">
        <include name="caarray-ivy-build.xml" />
        <include name="ivy-caarray-settings.xml" />
        <include name="ivy-caarray.xml" />
        <include name="project.properties" />
      </fileset>
    </copy>
    <mkdir dir="${db-standalone.target.dir}" />
    <copy todir="${db-standalone.target.dir}/bda-utils">
      <fileset dir="${software.dir}/target/bda-utils" includes="**/*.*" />
    </copy>

    <!-- Zip the artifacts -->
    <zip destfile="${db-standalone.dir}/caarray-database-standalone-update.zip">
            <zipfileset dir="${db-standalone.work.dir}" />
        </zip>
  </target>

  <target name="bda-lite:database:update" description="Executes the standalone database update scripts.">
    <path id="bda-lite:liquibase.dependencies.path">
      <fileset dir="${basedir}/caarray-common.jar" includes="**/*.jar" />
      <fileset dir="${basedir}/caarray-ejb.jar" includes="**/*.jar" />
            <fileset dir="${basedir}/target/bda-utils" includes="**/*.jar" />
      <fileset dir="${basedir}/lib/caarray-project" includes="**/*.jar" />
          <pathelement path="${basedir}/caarraydb/liquibase" />
      </path>

    <taskdef resource="liquibasetasks.properties">
            <classpath refid="bda-lite:liquibase.dependencies.path"/>
        </taskdef>

    <updateDatabase
          driver="${database.driver}"
            url="${database.url}"
            username="${database.user}"
            password="${database.password}"
            classpathref="bda-lite:liquibase.dependencies.path"
            changeLogFile="db-upgrade.xml">
            <changeLogProperty name="csm.application.name" value="${csm.application.name}"/>
            <changeLogProperty name="environment" value="${environment}"/>
        </updateDatabase>
    </target>

    <!-- ******************************************************************* -->
    <!-- ** LOCAL DEPLOY TARGETS                                                ** -->
    <!-- ******************************************************************* -->

    <target name="deploy:no-upgrade" depends="init:third-party-paths,deploy:caarray.ear,deploy:caarray-grid-svc" description="Deploy the application and grid services" />
    <target name="deploy" depends="init:third-party-paths,deploy:caarray.ear,deploy:caarray-grid-svc,database:update" description="Deploy the application and grid services" />

    <target name="deploy:caarray.ear-dependencies" depends="init:third-party-paths,prepare:create-local.properties">
        <copy file="${common.resources.jboss.conf.dir}/${mysql.datasource.file}" todir="${jboss.deploy.dir}" overwrite="true">
            <filterset refid="caarray.filterset" />
        </copy>
        <copy todir="${jboss.lib.dir}" overwrite="true" flatten="true">
            <fileset refid="log4j.jar.fileset" />
            <fileset refid="mysql-connector-java.jar.fileset"/>
        </copy>
        <copy file="${common.resources.jboss.conf.dir}/${jboss-mail-service.file}" todir="${jboss.deploy.dir}">
            <filterset refid="caarray.filterset" />
        </copy>
        <delete dir="${jboss.deploy.dir}/jbossweb-tomcat55.sar/jsf-libs" includes="commons-lang*.jar" quiet="true"/>
    </target>

    <target name="deploy:caarray.ear" depends="init:third-party-paths,build:caarray.ear,deploy:caarray.ear-dependencies, deploy:caarray-plugins, deploy:caarray-fileStorage">
        <copy file="${caarray.ear}" todir="${jboss.deploy.dir}" />
    </target>

    <target name="deploy:caarray-plugins" depends="init:third-party-paths,build:caarray-plugins">
           <process-plugins pluginJarsRootDir="${caarray-bundled-plugins.dir}" />
    </target>

    <target name="deploy:caarray-fileStorage" depends="init:third-party-paths">
        <process-filestorage />
    </target>

    <target name="deploy:functional:caarray.ear" depends="init:third-party-paths,build:functional:caarray.ear,deploy:caarray.ear-dependencies">
        <copy file="${caarray.ear}" todir="${jboss.deploy.dir}" />
    </target>

    <target name="deploy:caarray-grid-svc" depends="init:third-party-paths,deploy:caarray-grid-svc-globus, deploy:caarray-grid-svc-jboss"/>

    <target name="deploy:caarray-grid-svc-globus" depends="init:third-party-paths,build:caarray-grid-svc,prepare:create-local.properties" if="internal.grid.useGlobus">
        <for param="version" list="${caarray-grid-svc.versions}">
            <sequential>
                <ant dir="${caarray-grid-svc.base.dir}/@{version}" target="deployGlobus" inheritall="false">
                    <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
                    <property name="caarray-grid-svc.common.target.dir" value="${caarray-grid-svc.common.target.dir}"/>
                </ant>
            </sequential>
        </for>
    </target>

    <target name="deploy:caarray-grid-svc-jboss" depends="init:third-party-paths,build:caarray-grid-svc,prepare:create-local.properties" if="internal.grid.useJBoss">
        <unzip src="${jboss-globus-serverinstance-config.zip}" dest="${globoss.server.instance.home}" />
        <replace file="${globoss.server.instance.home}/deploy/wsrf.war/WEB-INF/etc/globus_wsrf_core/server-config.wsdd">
            <replacefilter token="@LOGICAL_HOST@" value="${grid.static.hostname}" />
        </replace>
        <for param="version" list="${caarray-grid-svc.versions}">
            <sequential>
                <ant dir="${caarray-grid-svc.base.dir}/@{version}" target="deployJBoss" inheritall="false">
                    <property name="jboss.dir" value="${globoss.home}"/>
                    <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
                    <property name="caarray-grid-svc.common.target.dir" value="${caarray-grid-svc.common.target.dir}"/>
                    <property name="index.service.url" value="${grid.index.url}"/>
                </ant>
                <if>
                    <equals arg1="@{version}" arg2="legacy"/>
                    <then>
                        <var name="version.label" value=""/>
                    </then>
                    <else>
                        <var name="version.label" value="_@{version}"/>
                    </else>
                </if>
                <delete dir=".carray_deploy_temp"/>
                <mkdir dir=".carray_deploy_temp"/>
                <unzip src="${globoss.server.instance.home}/deploy/wsrf.war/WEB-INF/lib/CaArraySvc${version.label}-common.jar" dest=".carray_deploy_temp" />
                <replaceregexp byline="true" match="^(java.naming.provider.url)=(.*)" replace="\1=jnp://${jboss.server.hostname}:${jboss.server.jndi.port}">
                    <fileset dir=".carray_deploy_temp">
                        <include name="**/jndi.properties"/>
                    </fileset>
                </replaceregexp>
                <jar jarfile="${globoss.server.instance.home}/deploy/wsrf.war/WEB-INF/lib/CaArraySvc${version.label}-common.jar" compress="false" update="true">
                    <fileset dir=".carray_deploy_temp">
                        <include name="*/**" />
                    </fileset>
                </jar>
                <delete dir=".carray_deploy_temp"/>
            </sequential>
        </for>
    </target>

    <target name="undeploy" description="Undeploys the application from JBoss and Globoss" depends="init:third-party-paths,undeploy:caarray.ear,undeploy:caarray-plugins,undeploy:caarray-grid-svc" />

    <target name="undeploy:caarray.ear" description="Undeploys the application from JBoss" depends="init:third-party-paths">
        <delete file="${jboss.deploy.dir}/${mysql.datasource.file}" />
        <delete file="${jboss.deploy.dir}/caarray.ear" />
        <delete file="${jboss.deploy.dir}/mail-service.xml" />
    </target>

    <target name="undeploy:caarray-plugins" description="Undeploys plugins and cleans out the cache" depends="init:third-party-paths">
        <delete>
            <fileset dir="${caarray-plugins.deploy.dir}" includes="**/*"/>
        </delete>
        <delete>
            <fileset dir="${caarray-plugins.deploy.cache.dir}" includes="**/*"/>
        </delete>
        <delete>
            <fileset dir="${caarray-plugins.deploy.bundleCache.dir}" includes="**/*"/>
        </delete>
        <delete file="${caarray-plugins.bundledPlugins.zip}"/>
    </target>

    <target name="undeploy:caarray-grid-svc" depends="init:third-party-paths,undeploy:caarray-grid-svc-globus, undeploy:caarray-grid-svc-jboss"/>

    <target name="undeploy:caarray-grid-svc-globus" depends="init:third-party-paths,prepare:create-local.properties" if="internal.grid.useJBoss">
        <for param="version" list="${caarray-grid-svc.versions}">
            <sequential>
                <ant dir="${caarray-grid-svc.base.dir}/@{version}" target="undeployJBoss" inheritall="false">
                    <property name="jboss.dir" value="${globoss.home}"/>
                    <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
                    <property name="caarray-grid-svc.common.target.dir" value="${caarray-grid-svc.common.target.dir}"/>
                </ant>
            </sequential>
        </for>
    </target>

    <target name="undeploy:caarray-grid-svc-jboss" depends="init:third-party-paths,prepare:create-local.properties">
        <ant dir="${caarray-grid-svc.base.dir}/@{version}" target="undeployJBoss" inheritall="false">
            <property name="jboss.dir" value="${globoss.home}"/>
            <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
            <property name="caarray-grid-svc.common.target.dir" value="${caarray-grid-svc.common.target.dir}"/>
        </ant>
    </target>

    <target name="deploy:stop-jboss-servers" depends="deploy:stop-jboss, deploy:stop-grid-jboss"/>

    <target name="deploy:start-jboss-servers" depends="deploy:start-jboss, deploy:start-grid-jboss"/>

    <target name="deploy:stop-jboss" depends="init:third-party-paths">
        <if>
            <available file="${jboss.home}/bin" type="dir"/>
            <then>
                <jboss-stop-jboss
                    jboss.home="${jboss.home}"
                    jboss.server.hostname="${jboss.server.hostname}"
                    jboss.server.jndi.port="${jboss.server.jndi.port}"
                    jboss.server.name="${jboss.server.name}"
                    jboss.web.user="${jboss.web.user}"
                    jboss.web.password="${jboss.web.password}"/>
            </then>
        </if>
    </target>

    <target name="deploy:stop-grid-jboss" depends="init:third-party-paths">
        <if>
            <available file="${application.base.path}/${grid.relative.path}/bin" type="dir"/>
            <then>
                <jboss-stop-jboss
                    jboss.home="${application.base.path}/${grid.relative.path}"
                    jboss.server.hostname="${grid.server.hostname}"
                    jboss.server.jndi.port="${grid.server.jndi.port}"
                    jboss.server.name="${grid.server.name}"
                    jboss.web.user="${grid.web.user}"
                    jboss.web.password="${grid.web.password}"/>
            </then>
        </if>
    </target>

    <target name="deploy:start-jboss" depends="init:third-party-paths,deploy:stop-jboss">
        <jboss-start-jboss jboss.home="${jboss.home}" jboss.server.name="${jboss.server.name}"/>
    </target>

    <target name="deploy:start-grid-jboss" depends="init:third-party-paths,deploy:stop-grid-jboss">
        <jboss-start-jboss jboss.home="${application.base.path}/${grid.relative.path}" jboss.server.name="${grid.server.name}"/>
    </target>

    <target name="deploy:start-jboss-and-deploy" depends="init:third-party-paths,deploy:stop-jboss,deploy:caarray.ear,deploy:start-jboss"/>

    <target name="deploy:copy-jsp" description="Copies the jsp's over to the unpacked war directory in jboss" depends="init:third-party-paths">
        <for param="toDir">
            <path>
                <dirset dir="${jboss.deploy.dir}/../tmp" includes="*/caarray.war" />
            </path>
            <sequential>
                <copy todir="@{toDir}">
                    <fileset dir="${caarray-war.webapp.dir}">
                        <include name="**/*.jsp" />
                        <include name="**/*.jspf" />
                        <include name="**/*.css" />
                        <include name="**/*.js" />
                        <include name="**/*.jpg" />
                        <include name="**/*.gif" />
                        <include name="**/*.png" />
                        <include name="**/*.faces" />
                        <include name="**/*.tag" />
                        <include name="**/*.tagf" />
                    </fileset>
                </copy>
            </sequential>
        </for>
    </target>

    <target name="create-grid-zip" depends="init:third-party-paths">
        <for param="version" list="${caarray-grid-svc.versions}">
            <sequential>
                <var name="caarraysvc.temp.dir" value="${caarray-grid-svc.base.dir}/@{version}/build/cagrid_CaArraySvc" />
                <mkdir dir="${caarraysvc.temp.dir}" />
                <ant dir="${caarray-grid-svc.base.dir}/@{version}" target="createDeploymentZip" inheritall="false">
                    <property name="jboss.dir" value="${caarraysvc.temp.dir}" />
                    <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
                    <property name="caarray-grid-svc.common.target.dir" value="${caarray-grid-svc.common.target.dir}"/>
                </ant>
            </sequential>
        </for>
    </target>

    <target name="redeploy" description="Developer undeploy, clean, redeploy" depends="clean, init:third-party-paths, undeploy, database:reinitialize, deploy" />

    <target name="redeploy:caarray.ear" description="Developer undeploy, clean, redeploy for the ear only" depends="clean, init:third-party-paths, undeploy:caarray.ear, database:reinitialize, deploy:caarray.ear" />

    <!-- Tag property to display on front page -->
    <target name="build-tags" depends="init:third-party-paths,-get-version-info, -command-build-with-tag, -build-with-tag, -build-without-tag" />

    <target name="-get-version-info" depends="init:third-party-paths">
        <condition property="buildtagbuilt.null">
            <and>
                <not>
                    <isset property="build.tag_built" />
                </not>
            </and>
        </condition>
        <!-- If svn.tag is populated and build.tag_built is null, use svn.tag -->
        <condition property="command.line.build.with.tag">
            <and>
                <isset property="svn.tag" />
                <not>
                    <isset property="build.tag_built" />
                </not>
            </and>
        </condition>
    </target>

    <target name="-command-build-with-tag" if="command.line.build.with.tag" depends="init:third-party-paths">
        <echo> Building WITH Tag, Command Line...</echo>
        <property name="caarray.version" value="${svn.tag}" />
        <echo> caarray.version=${caarray.version}</echo>
    </target>

    <target name="-build-with-tag" unless="buildtagbuilt.null" depends="init:third-party-paths">
        <echo> Building WITH Tag...</echo>
        <property name="caarray.version" value="${build.tag_built}(${buildNumber})|${build.date_time}" />
        <echo> caarray.version=${caarray.version}</echo>
    </target>

    <!-- Missing - if build master types a value in Build as Version: -->

    <target name="-build-without-tag" if="buildtagbuilt.null" depends="init:third-party-paths">
        <echo> Building WITHOUT Tag...</echo>
        <property name="caarray.version" value="trunk(${buildNumber})|${build.date_time}" />
        <echo> caarray.version=${caarray.version}</echo>
    </target>

    <target name="display-properties" depends="init:third-party-paths">
        <echo> Diagnostics...</echo>
        <echoproperties><propertyset negate="yes" > <propertyref regex="passw" /> </propertyset></echoproperties>
    </target>

    <target name="pre-build-checks" depends="init:third-party-paths">
        <ant inheritAll="true" inheritRefs="true" antfile="${basedir}/build/test-build.xml" target="pre-build-checks">
            <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
        </ant>
    </target>

    <target name="post-build-checks" depends="init:third-party-paths">
        <ant inheritAll="true" inheritRefs="true" antfile="${basedir}/build/test-build.xml" target="post-build-checks">
            <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
        </ant>
    </target>

    <!-- ******************************************************************* -->
    <!-- ** DOCUMENTATION TARGETS                                         ** -->
    <!-- ******************************************************************* -->

    <target name="javadoc" depends="javadoc:all" description="Generates javadoc for all source code" />

    <target name="init:javadoc-dependencies" depends="init:third-party-paths">
        <path id="javadoc.classpath">
            <pathelement path="${caarray-client.classes.dir}" />
            <pathelement path="${caarray-common.classes.dir}" />
            <pathelement path="${caarray-ejb.classes.dir}" />
            <path refid="project.jars.path" />
        </path>
    </target>

    <target name="javadoc:all" depends="init:javadoc-dependencies,compile:caarray-client.jar,compile:caarray-common.jar,compile:caarray-ejb.jar,compile:caarray.war,build:caarray-grid-svc">
        <mkdir dir="${site.dir}/docs/api" />
        <javadoc destdir="${site.dir}/docs/api" classpathref="javadoc.classpath">
            <packageset dir="${caarray-client.src.dir}" />
            <packageset dir="${caarray-common.src.dir}" />
            <packageset dir="${caarray-ejb.src.dir}" />
            <packageset dir="${caarray-war.src.dir}" />
            <packageset dir="${caarray-grid-svc.base.dir}/common/src" />
            <packageset dir="${caarray-grid-svc.base.dir}/v1_0/src" />
            <packageset dir="${caarray-grid-svc.base.dir}/legacy/src" />
            <packageset dir="${cn2magetab.src.dir}" />
        </javadoc>
    </target>

    <target name="javadoc:caarray-client-legacy" depends="init:javadoc-dependencies,compile:caarray-client.jar,compile:caarray-common.jar,compile:caarray-ejb.jar,build:caarray-grid-svc">
        <mkdir dir="${caarray-client.target.dir}/docs/api/legacy" />
        <javadoc destdir="${caarray-client.target.dir}/docs/api/legacy" classpathref="javadoc.classpath">
            <packageset dir="${caarray-client.src.dir}" />
            <packageset dir="${caarray-common.src.dir}">
                <include name="**/util/**" />
                <include name="**/domain/**" />
                <include name="**/georgetown/**" />
            </packageset>
            <fileset dir="${caarray-ejb.src.dir}">
                <include name="**/services/**/*Service.java" />
                <include name="**/services/**/*Exception.java" />
                <exclude name="**/services/external/**/*.java" />
            </fileset>
            <packageset dir="${caarray-grid-svc.base.dir}/common/src" />
            <packageset dir="${caarray-grid-svc.base.dir}/legacy/src" />
        </javadoc>
    </target>

    <macrodef name="javadoc-caarray-client-external">
        <attribute name="version" />

        <sequential>
            <mkdir dir="${caarray-client.target.dir}/docs/api/external/@{version}" />
            <javadoc destdir="${caarray-client.target.dir}/docs/api/external/@{version}" classpathref="javadoc.classpath">
                <packageset dir="${caarray-client.src.dir}" />
                <packageset dir="${caarray-common.src.dir}">
                    <include name="**/util/**" />
                    <include name="**/external/@{version}/**" />
                </packageset>
                <fileset dir="${caarray-ejb.src.dir}">
                    <include name="**/services/external/@{version}/**/*Service.java" />
                    <include name="**/services/external/@{version}/**/*Exception.java" />
                </fileset>
                <packageset dir="${caarray-grid-svc.base.dir}/common/src" />
                <packageset dir="${caarray-grid-svc.base.dir}/@{version}/src" />
            </javadoc>
        </sequential>
    </macrodef>

    <target name="javadoc:caarray-client-external" depends="init:javadoc-dependencies,compile:caarray-client.jar,compile:caarray-common.jar,compile:caarray-ejb.jar,build:caarray-grid-svc">
        <for param="version" list="${caarray-grid-svc.versions.external}">
            <sequential>
                <javadoc-caarray-client-external version="@{version}"/>
            </sequential>
        </for>
    </target>

    <target name="javadoc:caarray-client" depends="javadoc:caarray-client-legacy, javadoc:caarray-client-external"/>

    <macrodef name="create-plugin-bundle" description="Creates the plugin bundle zip file from the individual plugin jars and the joda time dependency jar">
        <attribute name="pluginJarsDir" />
        <attribute name="projectLibDir" />
        <sequential>
            <!-- Zip the plugin jars and joda runtime jar dependency -->
            <zip destfile="@{pluginJarsDir}/${caarray-plugins.bundledPlugins.zip.name}" filesonly="true">
                <fileset dir="@{projectLibDir}" includes="joda-time*.jar" />
                <fileset dir="@{pluginJarsDir}"  includes="*.jar" />
            </zip>
            <!-- Delete the individual plugin jar files -->
            <delete>
                <fileset dir="@{pluginJarsDir}" includes="*.jar"/>
            </delete>
        </sequential>
    </macrodef>
</project>
