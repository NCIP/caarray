<project name="macrodefs">
    <!-- Common properties being re-used in /software/build/build.xml and /master_build/install.xml-->
    <property name="plugins.deploy.baseDir" value="${caarray.resources.baseDir}/osgi" />
    <property name="caarray-plugins.deploy.dir" value="${plugins.deploy.baseDir}/plugins" />
    <property name="caarray-plugins.deploy.cache.dir" value="${plugins.deploy.baseDir}/cache" />
    <property name="caarray-plugins.deploy.bundleCache.dir" value="${plugins.deploy.baseDir}/bundle-cache" />
    <property name="caarray-plugins.bundledPlugins.zip.name" value="caarray-bundled-plugins.zip" />
    <property name="caarray-plugins.bundledPlugins.zip" value="${plugins.deploy.baseDir}/${caarray-plugins.bundledPlugins.zip.name}" />

    <macrodef name="caarray-run-junit-tests">
        <attribute name="test.src.dir" />
        <attribute name="xml.output.dir" />
        <attribute name="classpath" default="" />
        <attribute name="instrumented.classes" default="" />
        <attribute name="classpathref.id" default="no.dependencies.path" />
        <attribute name="source.include" default="${test.source.include}" />
        <attribute name="source.exclude" default="${test.source.exclude}" />
        <attribute name="forkmode" default="once" />    	
        <element name="extentions" optional="yes"/>
        <sequential>
            <mkdir dir="@{xml.output.dir}" />
            <property name="jdwp.port" value="8686"/>
            <property name="should.suspend.vm.for.debugging" value="n"/>
            <property name="test.browser" value="*firefox"/>
            <junit printsummary="on" failureproperty="junit.failure" fork="true" forkmode="@{forkmode}" maxmemory="1024m">
                <jvmarg value="-Xdebug"/>
                <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jdwp.port},server=y,suspend=${should.suspend.vm.for.debugging}"/>
                <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.file}" />
                <sysproperty key="server.hostname" value="${jboss.server.hostname}" />
                <sysproperty key="server.port" value="${jboss.server.port}" />
                <sysproperty key="server.jndi.port" value="${jboss.server.jndi.port}" />
                <sysproperty key="globoss.server.hostname" value="${globoss.server.hostname}" />
                <sysproperty key="globoss.server.http.port" value="${globoss.server.http.port}" />
                <sysproperty key="selenium.server.port" value="${selenium.server.port}" />
                <sysproperty key="test.browser" value="${test.browser}" />

                <classpath>
                    <pathelement path="@{instrumented.classes}" />
                    <pathelement path="@{classpath}" />
                </classpath>
                <classpath refid="@{classpathref.id}" />
                <classpath refid="cobertura.dependencies.path" />
                <formatter type="xml" />
                <batchtest todir="@{xml.output.dir}">
                    <fileset dir="@{test.src.dir}">
                        <include name="@{source.include}" />
                        <exclude name="@{source.exclude}" />
                    </fileset>
                </batchtest>

                <extentions/>
            </junit>
        </sequential>
    </macrodef>

    <macrodef name="display-properties">
        <attribute name="v" default="NOT SET" />
        <element name="some-tasks" optional="yes" />
        <sequential>
            <echo>database.url=${database.url}</echo>
            <echo>database.user=${database.user}</echo>
            <echo>database.password=${database.password}</echo>
            <some-tasks />
        </sequential>
    </macrodef>

    <macrodef name="process-plugins" description="Prepare directories for plugin deployment">
        <attribute name="pluginJarsRootDir" />
        <sequential>
            <echo message="caarray.resources.baseDir=${caarray.resources.baseDir}" />
            <check-required-property name="plugins.deploy.baseDir" />
            <mkdir dir="${plugins.deploy.baseDir}" />
            <mkdir dir="${caarray-plugins.deploy.dir}" />
            <mkdir dir="${caarray-plugins.deploy.cache.dir}" />
            <mkdir dir="${caarray-plugins.deploy.bundleCache.dir}" />
            <!-- Copy the bundled plugin zip file over  -->
            <copy file="@{pluginJarsRootDir}/${caarray-plugins.bundledPlugins.zip.name}" todir="${plugins.deploy.baseDir}" />
        </sequential>
    </macrodef>
    
    <macrodef name="process-filestorage" description="Prepare directory for file storage">
        <sequential>
            <property name="dataStorageFileSystemLiteral" value="file-system" />
            <if>
                <or>
                    <equals arg1="${dataStorage.fileDataEngine}" arg2="${dataStorageFileSystemLiteral}"/>
                    <equals arg1="${dataStorage.parsedDataEngine}" arg2="${dataStorageFileSystemLiteral}"/>
                </or>
                <then>
                    <check-required-property name="dataStorage.fileSystem.baseDir" />
                    <mkdir dir="${dataStorage.fileSystem.baseDir}" />
                </then>
            </if>
        </sequential>
    </macrodef>
    
    <macrodef name="check-required-property" description="Check that the property is set and not blank">
        <attribute name="name" />
        <sequential> 
            <property name="caarray.property.notDefined" value="must be defined." />
            <fail message="The property '@{name}' ${caarray.property.notDefined}"> 
                <condition>
                    <or>
                        <equals arg1="${@{name}}" arg2="" />
                        <not><isset property="@{name}"/></not>
                    </or>
                </condition> 
            </fail> 
        </sequential>
    </macrodef>
</project>