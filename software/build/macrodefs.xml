<project name="macrodefs">

    <macrodef name="run-junit-tests">
        <attribute name="test.src.dir" />
        <attribute name="xml.output.dir" />
        <attribute name="classpath" default="" />
        <attribute name="instrumented.classes" default="" />

        <sequential>
            <mkdir dir="@{xml.output.dir}" />
            <junit printsummary="on" failureproperty="junit.failure" fork="true" forkmode="once" maxmemory="256m">
                <sysproperty key="net.sourceforge.cobertura.datafile"
                             file="${cobertura.file}" />
                <sysproperty key="server.hostname" value="${jboss.server.hostname}"/>
                <sysproperty key="server.port" value="${jboss.server.port}"/>
                <sysproperty key="server.jndi.port" value="${jboss.server.jndi.port}"/>
                <sysproperty key="selenium.server.port" value="${selenium.server.port}"/>

                <classpath>
                    <pathelement path="@{instrumented.classes}" />
                    <pathelement path="@{classpath}" />
                  <path refid="cobertura.classpath" />
                </classpath>
                <formatter type="xml" />
                <batchtest todir="@{xml.output.dir}">
                    <fileset dir="@{test.src.dir}">
                        <include name="**/*Test.java" />
                        <exclude name="**/Abstract*Test.java" />
                    </fileset>
                </batchtest>
            </junit>
        </sequential>
    </macrodef>

    <macrodef name="display-properties">
      <attribute name="v" default="NOT SET"/>
      <element name="some-tasks" optional="yes"/>
      <sequential>
        <echo>database.url=${database.url}</echo>
	    <echo>database.user=${database.user}</echo>
	    <echo>database.password=${database.password}</echo>
        <some-tasks/>
      </sequential>
    </macrodef>

    <macrodef name="run-sql-script" description="By default this will use the database.url, to use drop database &amp; user use the database.system.url property">
        <attribute name="sql.file" />
        <attribute name="sql.delimiter" default=";" />
        <attribute name="sql.delimitertype" default="normal" />
        <attribute name="database.url" default="${database.url}" />
        <attribute name="database.user" default="${database.user}" />
        <attribute name="database.password" default="${database.password}" />
        <sequential>
            <sql driver="${database.driver}"
                 url="@{database.url}"
                 userid="@{database.user}"
                 password="@{database.password}"
                 src="@{sql.file}"
                 onerror="abort"
                 autocommit="true"
                 delimiter="@{sql.delimiter}"
                 delimitertype="@{sql.delimitertype}"
                 keepformat="true">
                <classpath>
                    <pathelement location="${mysql-connector.jar}"/>
                </classpath>
            </sql>
        </sequential>
    </macrodef>
	
    <macrodef name="remote-ssh" description="This is a remote SSH procedure. It will use SSH connection defaults as defined in the environment property file to initiate SSH connections and execure remote unix commands. The command is a mandatory attribute to this macrodef.">
    	<attribute name="remote-ssh.command" />
    	<attribute name="remote-ssh.port" default="${ssh.port}" />
    	<attribute name="remote-ssh.host" default="${ssh.server.hostname}" />
    	<attribute name="remote-ssh.user" default="${ssh.server.username}" />
    	<attribute name="remote-ssh.keyfile" default="${ssh.key.file}" />
    	<attribute name="remote-ssh.sleep" default="5" />
    	<sequential>
    	    <sshexec port="@{remote-ssh.port}" 
    	    	   host="@{remote-ssh.host}" 
    	    	   username="@{remote-ssh.user}"
    	    	   keyfile="@{remote-ssh.keyfile}"
    	    	   trust="true" 
    	    	   passphrase="" 
    	    	   verbose="true" 
    	    	   command="@{remote-ssh.command}" />
    		<sleep seconds="@{remote-ssh.sleep}" />
        </sequential>
    </macrodef>

</project>
