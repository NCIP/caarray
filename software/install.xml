<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: install.xml 4757 2008-05-15 20:43:31Z zengje $
$HeadURL: http://gforge.nci.nih.gov/svnroot/caarray/trunk/software/install.xml $
-->
<project name="caarray-installer" default="upgrade" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        Apache Ant-based installer for caArray2.
    </description>

    <!-- Properties file related properties and tasks -->
    <property environment="env" />
    <property file="project.properties"/>
    <property name="properties.file" value="${basedir}/upgrade.properties"/>
    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
    <property file="${properties.file}" />

    <!-- Generic properties -->
    <property name="lib.dir" value="${basedir}/lib" />
    <property name="working.dir" value="${basedir}/working" />


    <!-- Install Time properties -->
    <!-- Source and target directories -->
    <property name="bda-utils.dir.src" value="${bda-utils.dir}" />
    <property name="tools.dir.src" value="${basedir}/${tools.dist.relative.dir}" />
    <property name="common.dir.src" value="${basedir}/${common.dist.relative.dir}" />
    <property name="common.dir.target" value="${working.dir}/${common.dist.relative.dir}" />
    <property name="db.dir.target" value="${working.dir}/${db.dist.relative.dir}" />
    <property name="jboss-conf.dir.target" value="${working.dir}/${jboss-conf.dist.relative.dir}" />

    <!-- *-ds.xml and EAR -->
    <property name="caarray.dir.dist" value="${basedir}/${caarray.dist.relative.dir}" />
    <property name="caarray.ds.file" value="caarray-mysql-ds.xml" />
    <property name="mail.service.file" value="mail-service.xml" />
    <property name="caarray.ear.file" value="caarray.ear" />

    <property name="temp.dir" value="${basedir}/temp" />
    <property name="this.dir" value="${basedir}" />

    <!-- grid service-related properties -->
    <property name="caarray-grid-svc.versions" value="legacy,v1_0" />

    <!-- Paths -->
    <path id="bda-utils.classpath">
        <fileset dir="${bda-utils.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <!-- Task definitions -->
    <taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml">
        <classpath>
            <pathelement location="${bda-utils.dir}/antunit-1.0.jar" />
        </classpath>
    </taskdef>
    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
        <classpath>
            <pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
            <pathelement location="${bda-utils.dir}/bcel-5.1.jar"/>
            <pathelement location="${bda-utils.dir}/commons-httpclient-3.0.1.jar"/>
            <pathelement location="${bda-utils.dir}/commons-logging-1.0.4.jar"/>
            <pathelement location="${bda-utils.dir}/ivy-1.3.1.jar"/>
        </classpath>
    </taskdef>

    <!-- Conditionals -->
    <available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
    <!-- caarray can use either Oracle or MySQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
    <switch value="${database.type}">
        <case value="oracle">
            <property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
            <property name="is.oracle" value="true"/>
            <property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
            <property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
        </case>
        <case value="mysql">
            <property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
            <property name="is.mysql" value="true"/>
            <property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.5.jar"/>
            <property name="database.driver" value="com.mysql.jdbc.Driver"/>
        </case>
        <case value="postgresql">
            <property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
            <property name="is.postgresql" value="true"/>
            <property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-603.jar"/>
            <property name="database.driver" value="org.postgresql.Driver"/>
        </case>
        <default>
            <fail message="Invalid database type ${database.type}"/>
        </default>
    </switch>

    <!-- figure out whether to use install-properties.template or upgrade-proprties.template -->
    <propertyregex property="properties.file.type"
        input="${properties.file}"
        regexp=".*(install|upgrade).*"
        select="\1"
        />
    <echo message="Properties file type = ${properties.file.type}"/>
    <if>
        <equals arg1="${properties.file.type}" arg2="install" />
        <then>
            <property name="properties.template.file" value="install-properties.template" />
        </then>
        <elseif>
            <equals arg1="${properties.file.type}" arg2="upgrade" />
            <then>
                <property name="properties.template.file" value="upgrade-properties.template" />
            </then>
        </elseif>
    </if>
    <!-- Includes-->
    <import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />


    <!-- Read db configs from existing ds.xml if it exists -->
    <available file="${jboss.home}/server/${jboss.server.name}/deploy/${caarray.ds.file}" property="ds.exists"/>
    <if>
        <isset property="ds.exists"/>
        <then>
            <jboss-read-dbconfig
                jboss.ds-xml.file="${caarray.ds.file}"
                />
        </then>
        <else>
            <echo message="Warning- could not find ${jboss.home}/server/${jboss.server.name}/deploy/${caarray.ds.file}"/>
        </else>
    </if>

    <!-- There is any issue with copying files with a filtersfile, any properties with a value of
        another property do not get expanded (xx=${yy} @xx@ will be replaced with ${yy} not the
        value).  I have defined a filter set below for these properties, I then two two copies
        one to the resource.dir.temp using the filterset and then one to the desired directory
        with the filter file.  If you add new properties that refer to other properties in the
        properties file please add them to the filterset-pre below.
         Also you should include properties that are declared in this file, like database info below.
    -->
    <property name="resource.dir.temp" value="${working.dir}/tmp" />
    <filterset id="filterset.pre">
        <filter token="application.base.path" value="${application.base.path}"/>
        <filter token="application.url" value="${application.url}"/>
        <filter token="database.url" value="${database.url}"/>
        <filter token="database.user" value="${database.user}"/>
        <filter token="database.password" value="${database.password}"/>
        <filter token="database.clm.url" value="${database.url}"/>
        <filter token="database.system.url" value="${database.system.url}"/>
        <filter token="jboss.home" value="${jboss.home}"/>
        <!-- added internal properties that may be used in a filtered copy -->
        <filter token="database.driver" value="${database.driver}"/>
        <filter token="database.dialect" value="${database.dialect}"/>
        <filter token="hibernate.cfg.file.path" value="${hibernate.cfg.file.path}"/>
    </filterset>


    <!-- Start logging -->
    <mkdir dir="${log.dir}" />
    <tstamp>
        <format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
    </tstamp>
    <record loglevel="debug" name="${log.dir}/install-${install.time}.debug.log" action="start"/>
    <record loglevel="info" name="${log.dir}/install-${install.time}.info.log" action="start"/>


    <!-- Installer section -->
    <target name="diag">
        <echoproperties/>
    </target>

    <!-- Clean up destination directory -->
    <target name="install:clean" description="Removes all files from the local filesystem">
        <sleep seconds="5" />
        <delete dir="${application.base.path}" quiet="false" />
    </target>

    <!-- Does directory management and copy some files with filtering to ensure token expansion -->
    <target name="install:init" description="Does directory management to initialize install">
        <mkdir dir="${working.dir}" />
        <delete dir="${working.dir}"/>
        <mkdir dir="${working.dir}" />
        <mkdir dir="${resource.dir.temp}"/>
        <!-- Copy files to ensure values containing variables are expanded, such properties are stored in filterset.pre -->
        <copy todir="${resource.dir.temp}" filtering="true">
            <fileset dir="${common.dir.src}">
                <include name="**/*"/>
            </fileset>
            <filterset refid="filterset.pre"/>
        </copy>
        <copy todir="${common.dir.target}" filtering="true">
            <fileset dir="${resource.dir.temp}">
                <include name="**/*"/>
            </fileset>
            <filterset>
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
            </filterset>
        </copy>
    </target>

    <!-- Wrapper install database target, depends on both MySQL and Oracle sub-targets, ifs should ensure only one is run.  Target path can be skipped by exlude.database also calls upgrade:database -->
    <target name="install:database" description="Re-creates database and users from baseline and applys incremental database changes." unless="exclude.database" depends="install:init">
        <property name="caarraydb.sql.dir" value="${db.dir.target}/tmp" />
        <copy todir="${caarraydb.sql.dir}" filtering="true">
            <fileset dir="${db.dir.target}">
                <include name="**/*"/>
            </fileset>
            <filterset>
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
            </filterset>
        </copy>
        <ant antfile="${this.dir}/build-caarray-app.xml" target="database:execute-sql">
            <property name="no.ivy" value="true" />
            <property name="schema.sql.exists" value="true" />
        </ant>
        <delete dir="${caarraydb.sql.dir}"/>
    </target>

    <target name="install:jboss:binaries" description="Unzip JBoss binary" unless="exclude.jboss">
        <java jar="${tools.dir.src}/${jboss.binaries.file}" fork="true">
            <arg line="-installGroup ejb3 installpath=${jboss.home}"/>
        </java>
        <if>
            <os family="unix"/>
            <then>
                <chmod dir="${jboss.home}/bin" perm="ugo+rx" includes="**/*.sh"/>
            </then>
        </if>
    </target>

    <target name="install:jboss:grid-binaries" description="Unzip JBoss binary for grid services" unless="exclude.jboss.grid">
        <unzip dest="${application.base.path}" src="${tools.dir.src}/${jboss.grid-binaries.file}" />
    </target>

    <target name="install:jboss:caarray" description="Deploy caarray caarray.ear" unless="exclude.jboss">
        <!-- added to ensure working.dirs are fresh for our install -->
        <delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
        <delete dir="${jboss.home}/server/${jboss.server.name}/work"/>

        <copy file="${temp.dir}/caarray.ear.to_deploy/${caarray.ear.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
        <copy file="${database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
    </target>

    <target name="install:jboss:caarray:re-configure" description="Update xml files in meta-inf directory of ear that have deployment attributes">
        <delete dir="${temp.dir}" />
        <mkdir dir="${temp.dir}/caarray.ear.to_deploy" />
        <mkdir dir="${temp.dir}/caarray.ear" />
        <mkdir dir="${temp.dir}/caarray-common.jar" />
        <unzip src="${caarray.dir.dist}/${caarray.ear.file}" dest="${temp.dir}/caarray.ear/" />
        <unjar src="${temp.dir}/caarray.ear/caarray-common.jar" dest="${temp.dir}/caarray-common.jar"/>
        <unjar src="${temp.dir}/caarray.ear/caarray.war" dest="${temp.dir}/caarray.war"/>
        <move file="${temp.dir}/caarray-common.jar/csm/caarray.csm.new.hibernate.cfg.xml" tofile="${temp.dir}/caarray-common.jar/csm/${csm.application.name}.csm.new.hibernate.cfg.xml"/>
        <jar destfile="${temp.dir}/caarray.ear/caarray-common.jar" basedir="${temp.dir}/caarray-common.jar" update="false" manifest="${temp.dir}/caarray-common.jar/META-INF/MANIFEST.MF"/>

        <propertyregex property="corrected.database.url" input="${database.url}" regexp="(.*)\?" select="\1"/>

        <if>
            <equals arg1="${ldap.authentication.disabled}" arg2="false" />
            <then>
                <copy filtering="true" file="${jboss-conf.dir.target}/security-config-ldap.xml" tofile="${temp.dir}/caarray.ear/META-INF/security-config.xml">
                    <filterset refid="filterset.pre"/>
                </copy>
                <replaceregexp file="${temp.dir}/caarray.ear/META-INF/security-config.xml" match="&amp;" replace="&amp;amp;" byline="false"/>
                <xmltask source="${temp.dir}/caarray.ear/META-INF/security-config.xml" dest="${temp.dir}/caarray.ear/META-INF/security-config.xml">
                    <xmlcatalog refid="bda.xml.catalog"/>
                    <replace path="(//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsLDAPLoginModule']/module-option[@name='ldapHost']/text()" withText="${ldap.host}"/>
                    <replace path="(//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsLDAPLoginModule']/module-option[@name='ldapSearchableBase']/text()" withText="${ldap.searchbase}"/>
                    <replace path="(//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsLDAPLoginModule']/module-option[@name='ldapUserIdLabel']/text()" withText="${ldap.searchprefix}"/>
                    <replace path="(//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsDBLoginModule']/module-option[@name='url']/text()" withText="${corrected.database.url}"/>
                    <replace path="(//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsDBLoginModule']/module-option[@name='user']/text()" withText="${database.user}"/>
                    <replace path="(//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsDBLoginModule']/module-option[@name='passwd']/text()" withText="${database.password}"/>
                    <replace path="(//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsDBLoginModule']/module-option[@name='driver']/text()" withText="${database.driver}"/>
                </xmltask>
            </then>
            <else>
                <copy file="${jboss-conf.dir.target}/security-config.xml" tofile="${temp.dir}/caarray.ear/META-INF/security-config.xml">
                    <filterset refid="filterset.pre"/>
                </copy>
                <replaceregexp file="${temp.dir}/caarray.ear/META-INF/security-config.xml" match="&amp;" replace="&amp;amp;" byline="false"/>
                <xmltask source="${temp.dir}/caarray.ear/META-INF/security-config.xml" dest="${temp.dir}/caarray.ear/META-INF/security-config.xml">
                    <xmlcatalog refid="bda.xml.catalog"/>
                    <replace path="(//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsDBLoginModule']/module-option[@name='url']/text()" withText="${corrected.database.url}"/>
                    <replace path="(//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsDBLoginModule']/module-option[@name='user']/text()" withText="${database.user}"/>
                    <replace path="(//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsDBLoginModule']/module-option[@name='passwd']/text()" withText="${database.password}"/>
                    <replace path="(//authentication/login-module[@code='com.fiveamsolutions.nci.commons.authentication.CommonsDBLoginModule']/module-option[@name='driver']/text()" withText="${database.driver}"/>
                </xmltask>
            </else>
        </if>

        <!-- set the mergeDuplicateBiomaterialsMigrator.renameHybridizations value (default it to false as it is not set in GUI "fresh" install, upgrade installer sets the value so) -->
        <property name="mergeDuplicateBiomaterialsMigrator.renameHybridizations" value="true"/>
        <xmltask source="${temp.dir}/caarray.war/WEB-INF/classes/db-migrations.xml" dest="${temp.dir}/caarray.war/WEB-INF/classes/db-migrations.xml">
            <xmlcatalog refid="bda.xml.catalog"/>
            <replace path="//migrator-class/@renameHybridizations" withText="${mergeDuplicateBiomaterialsMigrator.renameHybridizations}"/>
        </xmltask>

        <!-- set the UptUrl value -->
        <replaceregexp file="${temp.dir}/caarray.war/WEB-INF/web.xml" match="uptUrl&lt;/param-name&gt;\s{0,}&lt;param-value&gt;(.*)&lt;/param-value&gt;" replace="uptUrl&lt;/param-name&gt;&lt;param-value&gt;${upt.url}&lt;/param-value&gt;" byline="false"/>

        <!-- set the ldap-related servlet parameters -->
        <xmltask source="${temp.dir}/caarray.war/WEB-INF/web.xml" dest="${temp.dir}/caarray.war/WEB-INF/web.xml">
            <xmlcatalog refid="bda.xml.catalog"/>
            <replace path="//*[local-name()='param-name'][text()='ldapHost']/following-sibling::*/text()" withText="${ldap.host}"/>
            <replace path="//*[local-name()='param-name'][text()='ldapSearchableBase']/following-sibling::*/text()" withText="${ldap.searchbase}"/>
            <replace path="//*[local-name()='param-name'][text()='ldapUserIdLabel']/following-sibling::*/text()" withText="${ldap.searchprefix}"/>
        </xmltask>

        <!-- make sure migration sql scripts get filtered to get property values (insert registration email, etc.) -->
        <copy todir="${temp.dir}/caarray.war/WEB-INF/classes/temp" filtering="true" overwrite="true">
            <fileset dir="${temp.dir}/caarray.war/WEB-INF/classes">
                <include name="*.sql"/>
            </fileset>
            <filterset>
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
            </filterset>
        </copy>
        <copy todir="${temp.dir}/caarray.war/WEB-INF/classes" overwrite="true">
            <fileset dir="${temp.dir}/caarray.war/WEB-INF/classes/temp">
                <include name="*.sql"/>
            </fileset>
        </copy>
        <delete dir="${temp.dir}/caarray.war/WEB-INF/classes/temp"/>

        <war destfile="${temp.dir}/caarray.ear/caarray.war">
            <fileset dir="${temp.dir}/caarray.war"/>
        </war>

        <ear destfile="${temp.dir}/caarray.ear.to_deploy/${caarray.ear.file}" appxml="${temp.dir}/caarray.ear/META-INF/application.xml" update="false" duplicate="preserve">
            <metainf dir="${temp.dir}/caarray.ear/META-INF" includes="*.xml" excludes="jboss-service.xml" />
            <fileset dir="${temp.dir}/caarray.ear">
                <include name="**/*" />
            </fileset>
        </ear>

        <!-- punt old commons lang jar -->
        <delete dir="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/jsf-libs" includes="commons-lang*.jar" quiet="true"/>
    </target>

    <target name="install:jboss:caarray:configure" description="Configure caarray application" unless="exclude.jboss">
        <copy file="${jboss-conf.dir.target}/${caarray.ds.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
        <copy file="${jboss-conf.dir.target}/${mail.service.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
    </target>

    <!-- Wrapper target to configure jboss container, not deployed application -->
    <target name="install:jboss:configure" description="Configure caArray JBoss installation" unless="exclude.jboss"
        depends="install:jboss:binaries,
        -install:jboss:configure:ports,
        -install:jboss:configure:log4j,
        -install:jboss:configure:secure-console,
        -install:jboss:configure:update-shutdown,
        -install:jboss:configure:java_opts,
        -install:jboss:configure:tomcat,
        -install:jboss:configure:update-runscripts
        "/>
    
    <target name="-install:jboss:configure:tomcat" description="Configure tomcat web container for caArray JBoss installation.">
        <!-- set the ldap-related servlet parameters -->
        <xmltask source="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml" dest="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml">
            <xmlcatalog refid="bda.xml.catalog"/>
            <attr path="//Connector" attr="emptySessionPath" value="false"/>
        </xmltask>
    </target>

    <!-- Configure ports used by JBOSS (either bindings or editing jboss config.files) -->
    <target name="-install:jboss:configure:ports" description="Configure caarray" unless="exclude.jboss">
        <replaceregexp file="${bda-utils.dir}/resource/template-binding.xml" byline="true"
            match="@grid."
            replace="@jboss."/>

        <jboss-bindings
            jboss.server.bindingfile.location="${jboss.home}/server/${jboss.server.name}/conf/bindings.xml"
            jboss.server.binding.template.location="${bda-utils.dir}/resource/template-binding.xml"
            />
    </target>

    <target name="-install:jboss:configure:log4j" unless="exclude.jboss" description="Configures log4j.xml for caArray JBoss server.">
		<echo message="Configuring ${jboss.home}/server/${jboss.server.name}/conf/log4j.xml."/>
        <copy file="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml" tofile="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml.original"/>
		<loadfile property="log4j.fragment" srcFile="${jboss-conf.dir.target}/log4j.fragment.xml"/>
		<loadfile property="existing.log4j.contents" srcFile="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml"/>
		<propertyregex property="caarray.custom.cfg.target.text"
			input="${existing.log4j.contents}"
			regexp="&lt;!-- start caarray custom configuration[\d\D]*end caarray custom configuration --&gt;"
			select="\0"
			global="true"
			/>
		<if>
			<isset property="caarray.custom.cfg.target.text" />
			<then>
			    <replace file="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml" token="${caarray.custom.cfg.target.text}" value="${log4j.fragment}"/>
			</then>
			<else>
				<replace file="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml" token="&lt;/log4j:configuration&gt;" value="${log4j.fragment}${line.separator}&lt;/log4j:configuration&gt;"/>
			</else>
		</if>
    </target>

    <target name="-install:jboss:configure:secure-console" description="Configure JBoss ports using bindings files" unless="exclude.jboss">
        <secure-jboss-console/>
    </target>

    <!-- Calls to bda macros for basic functionality -->
    <target name="install:jboss:stop" if="jboss.exists" unless="exclude.jboss">
        <jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port}"/>
        <jboss-stop-jboss />
    </target>
    <target name="install:jboss:start"  unless="exclude.jboss">
        <if>
            <not>
                <isset property="exclude.start.servers"/>
            </not>
            <then>
                <jboss-start-jboss />
            </then>
        </if>
        <sleep seconds="15"/>
    </target>
    <target name="install:validation:pre-install">
        <validate-pre-install />
    </target>
    <target name="install:validation:pre-install:ports">
        <validate-ports-preinstall />
    </target>
    <target name="install:grid:start"  unless="exclude.jboss.grid">
        <if>
            <not>
                <isset property="exclude.start.servers"/>
            </not>
            <then>
                <jboss-start-jboss jboss.home="${grid.home}"/>
            </then>
        </if>
        <sleep seconds="15"/>
    </target>

    <target name="install:grid:stop" if="jboss.exists" unless="exclude.jboss.grid">
        <jboss-stop-jboss jboss.home="${grid.home}" jboss.server.hostname="${grid.server.hostname}" jboss.server.jndi.port="${grid.server.jndi.port}"/>
    </target>



    <target name="install:validation:post-install">
        <if>
            <not>
                <isset property="exclude.start.servers"/>
            </not>
            <then>
                <validate-post-install />
            </then>
        </if>
    </target>

    <target name="-install:jboss:configure:update-shutdown" unless="exclude.jboss">
        <jboss-update-shutdown />
    </target>

     <target name="-install:jboss:configure:java_opts" description="Updates JAVA_OPTS">
         <caarray-jboss-configure-java_opts/>
    </target>

    <target name="-install:jboss:configure:update-runscripts" description="Updates run.bat and run.sh so remote RMI clients can connect.">
        <set-host-flag-in-start-jboss-scripts jboss.bin.dir="${jboss.home}/bin" host.flag.value="${jboss.server.hostname}"/>
    </target>
    
    <target name="-set:target:port:configuration:file">
        <property name="jboss.bin.dir" value="${jboss.home}/bin"/>
        <osfamily property="os.family"/>
        <switch value="${os.family}">
            <case value="unix">
                <property name="target.port.configuration.file" value="${jboss.bin.dir}/run.conf"/>
            </case>
            <case value="mac">
                <property name="target.port.configuration.file" value="${jboss.bin.dir}/run.conf"/>
            </case>
            <case value="windows">
                <property name="target.port.configuration.file" value="${jboss.bin.dir}/run.bat"/>
            </case>
        </switch>
        <loadfile srcFile="${target.port.configuration.file}" property="port.configuration.file.contents"/>
    </target>
    
    <target name="-install:jboss:configure:api:streaming:port" description="Configures the java API file streaming port number." depends="-set:target:port:configuration:file">
        <propertyregex property="current.java.api.filestreaming.port.value" input="${port.configuration.file.contents}" regexp="com.healthmarketscience.rmiio.exporter.port=(\d{1,})" select="\1" />
        <if>
            <isset property="current.java.api.filestreaming.port.value" />
            <then>
                <replaceregexp file="${target.port.configuration.file}"
                    match="com.healthmarketscience.rmiio.exporter.port=\d{1,}"
                    replace="com.healthmarketscience.rmiio.exporter.port=${java.api.filestreaming.port}"
                    byline="true"/>

            </then>
            <else>
                <caarray-jboss-configure-java_opts jboss.bin.dir="${jboss.bin.dir}"/>
            </else>
        </if>
    </target>

    <!-- Wrapper target to deploy JBOSS container -->
    <target name="install:jboss" unless="exclude.jboss"
        depends="
        install:validation:pre-install,
        install:jboss:stop,
        install:validation:pre-install:ports,
        install:clean,
        install:init,
        install:jboss:binaries,
        install:jboss:caarray:re-configure,
        install:jboss:caarray,
        install:jboss:caarray:configure,
        install:jboss:configure,
        install:jboss:start
        " />

    <!-- Wrapper target to deploy all containers to one server -->
    <target name="install" description="Installs and configures JBOSS, creates database, and deploys application"
        depends="
        install:validation:pre-install,
        install:jboss:stop,
        install:grid:stop,
        install:validation:pre-install:ports,
        install:clean,
        install:init,
        install:database,
        install:jboss,
        install:jboss:start,
        install:carray-grid,
        install:grid:start,
        install:validation:post-install
        "/>


    <!-- Wrapper target to upgrade jboss container. Does not install or configure binaries -->
    <target name="upgrade:jboss" unless="exclude.jboss"
        depends="
        install:validation:pre-install,
        install:jboss:stop,
        install:jboss:caarray:re-configure,
        -install:jboss:configure:secure-console,
        -install:jboss:configure:update-runscripts,
        -install:jboss:configure:tomcat,
        -install:jboss:configure:api:streaming:port,
        -install:jboss:configure:log4j,
        install:jboss:caarray,
        install:jboss:start
        " />

    <!-- Wrapper target to upgrade all container. Does not install or configure binaries -->
    <target name="upgrade" description="Deploys application and runs incremental database build"
        depends="
        upgrade:init,
        install:validation:pre-install,
        install:jboss:stop,
        install:grid:stop,
        upgrade:jboss,
        upgrade:carray-grid,
        install:grid:start,
        install:validation:post-install
        "/>


    <target name="install:carray-grid" description="Grouping of caArray Grid application targets"
        depends="install:jboss:grid-binaries,
        install:grid:deploy,
        install:grid:configure
        "/>

    <target name="upgrade:carray-grid" description="Grouping of caArray Grid application targets"
        depends="install:grid:deploy,
        -install:grid:configure:wsdl,
        -install:grid:configure:serviceMetadataXml,
        -install:grid:configure:secure-console,
        -install:grid:configure:webXml
    "/>

    <target name="install:grid:configure" description="Configure caarray" unless="exclude.jboss"
        depends="install:jboss:grid-binaries,
        -install:grid:configure:update-shutdown,
        -install:grid:configure:ports,
        -install:grid:configure:wsdl,
        -install:grid:configure:serviceMetadataXml,
        -install:grid:configure:secure-console,
        -install:grid:configure:webXml
        "/>

    <target name="-install:grid:configure:update-shutdown">
        <jboss-update-shutdown jboss.home="${grid.home}" jboss.server.hostname="${grid.server.hostname}" jboss.server.jndi.port="${grid.server.jndi.port}" />
    </target>

    <target name="-install:grid:configure:secure-console" description="Configure JBoss ports using bindings files" unless="exclude.jboss">
        <secure-jboss-console jboss.home="${grid.home}" jboss.server.name="${grid.server.name}" jboss.web.user="${grid.web.user}" jboss.web.password="${grid.web.password}"/>
    </target>

    <target name="install:grid:deploy" description="Deploy Caarray2 grid service applications.">
        <delete >
            <fileset dir="${grid.home}/server/default/deploy" includes="wsrf.war"/>
        </delete>
        <delete>
            <fileset dir="${grid.home}/server/default/lib" includes="cog-jglobus.jar cog-tomcat.jar cryptix32.jar cryptix.jar cryptix-asn1.jar jce-jdk13-125.jar log4j-1.2.8.jar puretls.jar"/>
        </delete>
        <for param="version" list="${caarray-grid-svc.versions}">
            <sequential>
                <if>
                    <equals arg1="legacy" arg2="@{version}" />
                    <then>
                        <var name="version.label" value=""/>
                    </then>
                    <else>
                        <var name="version.label" value="_@{version}"/>
                    </else>
                </if>
                <unzip dest="${temp.dir}/grid${version.label}" src="${basedir}/grid/cagrid_CaArraySvc${version.label}.zip"/>

                <unzip src="${temp.dir}/grid${version.label}/WEB-INF/lib/CaArraySvc${version.label}-common.jar" dest="${temp.dir}/grid${version.label}/WEB-INF/lib/CaArraySvc${version.label}-common" />

                <replaceregexp byline="true" match="^(java.naming.provider.url)=(.*)" replace="\1=jnp://${jboss.server.hostname}:${jboss.server.jndi.port}">
                    <fileset dir="${temp.dir}/grid${version.label}/WEB-INF/lib/CaArraySvc${version.label}-common">
                        <include name="**/jndi.properties"/>
                    </fileset>
                </replaceregexp>

                <delete file="${temp.dir}/grid${version.label}/WEB-INF/lib/CaArraySvc${version.label}-common.jar" />

                <jar jarfile="${temp.dir}/grid${version.label}/WEB-INF/lib/CaArraySvc${version.label}-common.jar" compress="false" manifest="${temp.dir}/grid${version.label}/WEB-INF/lib/CaArraySvc${version.label}-common/META-INF/MANIFEST.MF">
                    <fileset dir="${temp.dir}/grid${version.label}/WEB-INF/lib/CaArraySvc${version.label}-common">
                        <include name="*/**" />
                    </fileset>
                </jar>

                <delete dir="${temp.dir}/grid${version.label}/WEB-INF/lib/CaArraySvc${version.label}-common" />

                <zip destfile="${basedir}/grid/cagrid_CaArraySvc${version.label}.zip">
                    <zipfileset dir="${temp.dir}/grid${version.label}" />
                </zip>

                <unzip dest="${grid.home}/server/default/deploy/wsrf.war" src="${basedir}/grid/cagrid_CaArraySvc${version.label}.zip" />
            </sequential>
        </for>
        <unzip dest="${grid.home}/server/default" src="${basedir}/grid/jboss-globus-serverinstance-config.zip" />
    </target>

    <target name="-install:grid:configure:ports" description="Configure grid service based on properties">

        <replaceregexp file="${bda-utils.dir}/resource/template-binding.xml" byline="true"
            match="@jboss."
            replace="@grid."/>
        <echo message="grid.home :: ${grid.home}"/>
        <jboss-bindings
            jboss.home="${grid.home}" jboss.server.bindingfile.location="${grid.home}/server/default/conf/bindings.xml"
        />
    </target>

    <target name="-install:grid:configure:serviceMetadataXml" description="Configure caArray's grid service serviceMetadata.xml.">
        <for param="service.metadata.xml.file">
            <path>
                <fileset dir="${grid.home}/server/${jboss.server.name}/deploy/wsrf.war/WEB-INF/etc">
                    <include name="cagrid_CaArraySvc*/serviceMetadata.xml"/>
                </fileset>
            </path>
            <sequential>
                <xmltask source="@{service.metadata.xml.file}" dest="@{service.metadata.xml.file}">
                    <xmlcatalog refid="bda.xml.catalog"/>
                    <!-- set ResearchCenter element's attributes -->
                    <replace path="//*[local-name()='ResearchCenter']/@displayName" withText="${research.center.displayName}"/>
                    <replace path="//*[local-name()='ResearchCenter']/@shortName" withText="${research.center.shortName}"/>

                    <!-- set ResearchCenter element's child address element's attributes -->
                    <replace path="//*[local-name()='ResearchCenter']/*[local-name()='Address']/@country" withText="${research.center.address.country}"/>
                    <replace path="//*[local-name()='ResearchCenter']/*[local-name()='Address']/@locality" withText="${research.center.address.locality}"/>
                    <replace path="//*[local-name()='ResearchCenter']/*[local-name()='Address']/@postalCode" withText="${research.center.address.postalCode}"/>
                    <replace path="//*[local-name()='ResearchCenter']/*[local-name()='Address']/@stateProvince" withText="${research.center.address.stateProvince}"/>
                    <replace path="//*[local-name()='ResearchCenter']/*[local-name()='Address']/@street1" withText="${research.center.address.street1}"/>

                    <!-- set ResearchCenter element's child pointOfContactCollection elements' child PointOfContact element's attributes -->
                    <replace path="//*[local-name()='ResearchCenter']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']/@affiliation" withText="${point.of.contact.affiliation}"/>
                    <replace path="//*[local-name()='ResearchCenter']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']/@email" withText="${point.of.contact.email}"/>
                    <replace path="//*[local-name()='ResearchCenter']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']/@firstName" withText="${point.of.contact.firstName}"/>
                    <replace path="//*[local-name()='ResearchCenter']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']/@lastName" withText="${point.of.contact.lastName}"/>
                    <replace path="//*[local-name()='ResearchCenter']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']/@phoneNumber" withText="${point.of.contact.phoneNumber}"/>
                    <replace path="//*[local-name()='ResearchCenter']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']/@role" withText="${point.of.contact.role}"/>
                </xmltask>
            </sequential>
        </for>
    </target>

    <target name="-install:grid:configure:webXml" description="Configure caArray's grid service web.xml.">
        <xmltask source="${grid.home}/server/${jboss.server.name}/deploy/wsrf.war/WEB-INF/web.xml" dest="${grid.home}/server/${jboss.server.name}/deploy/wsrf.war/WEB-INF/web.xml">
            <xmlcatalog refid="bda.xml.catalog"/>
            <replace path="/web-app/servlet/init-param/param-value[text()='80']/text()" withText="${grid.static.port}"/>
        </xmltask>
    </target>

    <target name="-install:grid:configure:wsdl" description="Configure grid service based on properties">
        <replace dir="${grid.home}/server/${jboss.server.name}/deploy" token="%token.server.hostname%:%token.jboss.jndi.port%" value="${grid.server.hostname}:${grid.server.port}">
            <include name="wsrf.war/**/*.wsdl" />
        </replace>
        <replace dir="${grid.home}/server/${jboss.server.name}/deploy" token="localhost:8080" value="${grid.server.hostname}:${grid.server.port}">
            <include name="wsrf.war/**/*.wsdl" />
        </replace>
        <replaceregexp byline="true" match="^(.*wsa:Address.).*(.\/wsa:Address.)" replace="\1${grid.index.url}\2">
            <fileset dir="${grid.home}/server/${grid.server.name}/deploy">
                <include name="wsrf.war/WEB-INF/etc/cagrid_CaArraySvc*/CaArraySvc*_registration.xml"/>
            </fileset>
        </replaceregexp>
        <replace dir="${grid.home}/server/${grid.server.name}/deploy" token="@LOGICAL_HOST@" value="${grid.static.hostname}">
            <include name="wsrf.war/WEB-INF/etc/globus_wsrf_core/server-config.wsdd"/>
        </replace>
    </target>

    <target name="upgrade:init">
        <echo  message="Checking if database properties exist.  If they do not on an upgrade install then ${jboss.home}/server/${jboss.server.name}/deploy/${caarray.ds.file} may not exist."/>
        <property name="db.prop.list" value="database.url,database.user,database.password,database.name"/>
        <properties-exist properties.list="${db.prop.list}"/>

        <!-- Copy files to ensure values containing variables are expanded, such properties are stored in filterset.pre -->
        <copy todir="${resource.dir.temp}" filtering="true">
            <fileset dir="${common.dir.src}">
                <include name="**/*"/>
            </fileset>
            <filterset refid="filterset.pre"/>
        </copy>
        <copy todir="${common.dir.target}" filtering="true">
            <fileset dir="${resource.dir.temp}">
                <include name="**/*"/>
            </fileset>
            <filterset>
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
            </filterset>
        </copy>
    </target>

    <macrodef name="set-host-flag-in-start-jboss-scripts">
        <attribute name="jboss.bin.dir" />
        <attribute name="host.flag.value" />
        <sequential>
            <replaceregexp match="(org.jboss.Main) (?!--host=)" replace="org.jboss.Main --host=@{host.flag.value} " byline="true">
                <fileset dir="@{jboss.bin.dir}">
                    <include name="run.bat"/>
                    <include name="run.sh"/>
                </fileset>
            </replaceregexp>
        </sequential>
    </macrodef>
    
    <macrodef name="caarray-jboss-configure-java_opts">
        <attribute name="jboss.bin.dir" default="${jboss.home}/bin" />
        <attribute name="jboss.java.opts" default="${jboss.java.opts}" />
        <sequential>

            <propertyregex property="jboss.java.opts.is.set"
                input="@{jboss.java.opts}"
                regexp="^([^\$]\S+)"
                select="\1"
                />
            <echo message="jboss.java.opts.is.set = ${jboss.java.opts.is.set}"/>
            <if>
                <and>
                    <available file="@{jboss.bin.dir}/run.conf"/>
                    <isset property="jboss.java.opts.is.set"/>
                </and>
                <then>
                    <echo message="Setting JBoss java options"/>
                    <osfamily property="os.family"/>
                    <echo message="os.family=${os.family}"/>
                    <switch value="${os.family}">
                        <case value="unix">
                            <replaceregexp file="@{jboss.bin.dir}/run.conf" byline="true"
                                match="^(\s+JAVA_OPTS)=(.*)"
                                replace="#\1=\2${line.separator}# added by macro${line.separator}\1=&quot;@{jboss.java.opts}&quot;"
                                />
                                </case>
                        <case value="mac">
                            <replaceregexp file="@{jboss.bin.dir}/run.conf" byline="true"
                                match="^(\s+JAVA_OPTS)=(.*)"
                                replace="#\1=\2${line.separator}# added by macro${line.separator}\1=&quot;@{jboss.java.opts}&quot;"
                                />
                        </case>
                        <case value="windows">
                            <var name="run.bat.match" unset="true"/>
                            <loadfile
                                property="run.bat.match"
                                srcFile="@{jboss.bin.dir}/run.bat">
                                <filterchain>
                                    <linecontainsregexp>
                                        <regexp pattern="JAVA_OPTS.*Dbda=bda"/>
                                    </linecontainsregexp>
                                </filterchain>
                            </loadfile>
                            <if>
                                <isset property="run.bat.match"/>
                                <then>
                                    <replaceregexp file="@{jboss.bin.dir}/run.bat" byline="true"
                                        match="(.*JAVA_OPTS.*)-Dbda=bda -Dprogram.name=%PROGNAME% (.*)"
                                        replace="\1 -Dbda=bda -Dprogram.name=%PROGNAME% @{jboss.java.opts}"
                                        />
                                </then>
                                <else>
                                    <replaceregexp file="@{jboss.bin.dir}/run.bat" byline="true"
                                        match="^(echo\s+JAVA_OPTS.*)"
                                        replace=" rem Overriding JAVA_OPTS, added by bda${line.separator}set JAVA_OPTS= -Dbda=bda -Dprogram.name=%PROGNAME% @{jboss.java.opts}${line.separator}\1"
                                        />
                                </else>
                            </if>
                        </case>
                    </switch>
                </then>
                <else>
                    <echo message="Java options not updated because @{jboss.bin.dir} does not exist or jboss.java.opts has not value (@{jboss.java.opts})."/>
                </else>
            </if>
        </sequential>
    </macrodef>

</project>