<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: build.xml 4753 2008-05-15 18:24:16Z saksass $
$HeadURL: http://gforge.nci.nih.gov/svnroot/generic/trunk/software/build.xml $
-->
<project name="clm-llt" default="build:all" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	xmlns:cs="antlib:com.puppycrawl.tools.checkstyle"
	>
	<description>
		Builds the CLM/LLT
	</description>
	
	<property name="build.dir" location="." />
	<property name="software.dir" location=".." />
	<property name="common.dir" location="${software.dir}/common" />
	
	<property name="db.src.dir" value="${common.dir}/resources/db" />
	<property name="db-install.src.dir" value="${db.src.dir}/db-install" />
	<property name="db-upgrade.src.dir" value="${db.src.dir}/db-upgrade" />
		
	<import file="build-bda-master.xml"/>
	
	<!-- Property file related properties and tasks -->
	<property name="project.name" value="clm-llt"/>
	<property environment="env" />

	<!-- Properties that relate to how to call build targets from sub-projects-->
	<!-- Working directory passed to Ant tasks -->
	<property name="clm.base.dir" value="${software.dir}/api"/>
	<property name="llt.base.dir" value="${software.dir}/locator_webapp"/>

	<!-- Build file names relative working dir above, if the basedir of the sub-project ant script is ".." you should set the *.basdir to and the build file should include the dir and build file name from the *.base.dir -->
	<property name="clm.build.file" value="build.xml"/>
	<property name="llt.build.file" value="build.xml"/>
	
	<!-- The target name that should be called from the sub-project build file -->
	<property name="llt.build.target" value="run"/>
	<property name="clm.build.target" value="run"/>
    
	<!-- Distribution Structure properties, used to copy files into the distribution area.
       		Use project.propertie relative dir names becasue they are used by install also-->
	<property name="clm.dist.dir" value="${dist.exploded.dir}/${clm.dist.relative.dir}" />
	<property name="llt.dist.dir" value="${dist.exploded.dir}/${llt.dist.relative.dir}" />

	<!-- Targets -->
	<target name="diagnostics" description="diagnostics">
		<echoproperties/>
		<diagnostics/>
	</target>

	<target name="clean">
		<mkdir dir="${dist.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${temp.dir}"/>
	</target>

	<target name="init" >
		<mkdir dir="${target.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${common.dist.dir}" />
		<mkdir dir="${tools.dist.dir}" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${download.dir}" />
		<mkdir dir="${pt.dir}" />
		<mkdir dir="${clm.dist.dir}" />
		<mkdir dir="${llt.dist.dir}" />
		<available file="${jboss.dest.file}" property="jboss.tools.exists"/>
	</target>

	<target name="ivy:clean" description="Clean">
		<ivy:settings file="${ivy.settings.file}" />
		<ivy:cleancache />
		<ant inheritAll="false" inheritRefs="false" antfile="bda-ivy-build.xml"
			target="ivy-cleancache">
			<property name="bda-utils.dir" value="${bda-utils.dir}"/>
			<property name="lib.dir" value="${lib.dir}"/>
		</ant>
		
	</target>

	<!-- Wrapper build target, call appropriate builds for sub-projects -->
	<target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions"
		depends="
		clean,
		init,
		build:llt"/>

	<!-- Build generic-query-grid sub-project produces project level artifact -->
	<target name="build:clm" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${clm.build.file}"
			target="${clm.build.target}"
			dir="${clm.base.dir}" >
			<property name="dist" value="${clm.dist.dir}" />
		</ant>
	</target>

	<target name="build:llt" depends="init, build:clm">
		<ant inheritAll="false" inheritRefs="false" antfile="${llt.build.file}"
			target="${llt.build.target}"
			dir="${llt.base.dir}" >
			<property name="dist.home" value="${llt.dist.dir}" />
		</ant>
	</target>


	<!-- Produces all distributions: installer, upgrader and source -->
	<target name="dist" description="Makes all distributions: installer, upgrader and source"
		depends="
		build:all,
		dist:installer,
		dist:upgrader,
		dist:src"
	      	/>

	<target name="dist:src">
		<!-- Add tasks here to zip up src into a distribution, may require some additoinal properties for distribution name" -->
	</target>

	<!-- Wrapper target that downloads all required binaries from Common Tools Repository -->
	<target name="dist:tools:retrieve" description="Downloads binary support tools form common tools repository"
		depends="
		init,
		dist:tools:retrieve:jboss
		" />

	<!-- Creates the installer distribution used by automated or manual remote installations -->
	<target name="dist:installer" depends="dist:installer:prep">
		<delete file="${dist.dir}/${clm.install.zip.file}"/>
		<zip destfile="${dist.dir}/${clm.install.zip.file}" basedir="${dist.exploded.dir}"/>
	</target>

	<!-- Creates upgrader distribution -->
	<target name="dist:upgrader" depends="dist:upgrader:prep">
		<delete file="${dist.dir}/${clm.upgrade.zip.file}"/>
		<zip destfile="${dist.dir}/${clm.upgrade.zip.file}" basedir="${dist.dir}"/>
	</target>

	<!-- Installs the application locally. Requires a local instance of mysql. Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).  Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) installs. It only supports using those properties files for now, so if you want to change install time properites edit these files. -->
	<target name="deploy:local:install" depends="dist:installer:prep" description="Installs the application and required binaries on the local machine, used for developer desktops and ci environments" >
		<!-- Copies over all files so linux and windows properties are present -->
		<copy todir="${dist.exploded.dir}">
			<fileset dir="${build.dir}">
				<include name="*.properties"/>
				<include name="*master.xml"/>
			</fileset>
		</copy>
		<deploy-local
			target.name="${install.target}"
			/>
	</target>

	<!-- Upgrades the application locally. Requires a local instance of mysql. Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).  Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) upgrades. It only supports using those properties files for now, so if you want to change install time properites edit these files. -->
	<target name="deploy:local:upgrade" depends="dist:upgrader:prep" description="Upgrades the application on the local machine, used for developer desktops and ci environments" >
		<!-- Copies over all files so linux and windows properties are present -->
		<copy todir="${dist.exploded.dir}">
			<fileset dir="${build.dir}">
				<include name="*.properties"/>
				<include name="*master.xml"/>
			</fileset>
		</copy>

		<deploy-local
			target.name="${upgrade.target}"
			properties.file="${upgrade.properties.file}"
			/>
	</target>

	<!-- Install the application remotely. Depends on above targets to copy and extract distribution. Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).  Calls ant from sshexec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. Requires specifying -Dproperties.file=@file@ on the command line to point installer to correct enviornment to install into -->
	<target name="deploy:remote:install" depends="
		build:all,
		dist:installer
		">
		<deploy-files dist.file="${clm.install.zip.file}" />
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}" />
	</target>

	<!-- Upgrades the application remotely. Depends on above targets to copy and extract distribution. Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).  Calls ant from sshexec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. Requires specifying -Dproperties.file=@file@ on the command line to point upgrader to correct enviornment to upgrade -->
	<target name="deploy:remote:upgrade" depends="
		build:all,
		dist:upgrader
		">
		<deploy-files dist.file="${clm.upgrade.zip.file}" />
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${upgrade.target}" />
	</target>

	<target name="usage" description="Explains how to use this build script">
		<echo message="To run a remote upgrade type: ant deploy:remote:upgrade -Dproperties.file=[path to environment proeprty file]" />
	</target>

	<target name="compile:all" description="Used by static-analysis, required since dist target cleans up generated classes that are required by some static analysis tools"
		depends="
			init,
			compile:clm,
			compile:llt
			"/>

	<target name="compile:clm" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${clm.build.file}"
			target="compile"
			dir="${clm.base.dir}"/>
	</target>

	<target name="compile:llt" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${llt.build.file}"
			target="compile"
			dir="${llt.base.dir}"/>
	</target>

	<target name="test:all" description="Used by static-analysis, required since dist target cleans up generated classes that are required by some static analysis tools"
		depends="
			init,
			test:clm,
			test:llt
			"/>

	<target name="test:clm" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${clm.build.file}"
			target="test"
			dir="${clm.base.dir}"/>
	</target>

	<target name="test:llt" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${llt.build.file}"
			target="test"
			dir="${llt.base.dir}"/>
	</target>
</project>

