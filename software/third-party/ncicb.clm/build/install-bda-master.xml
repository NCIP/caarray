<?xml version="1.0" encoding="utf-8" ?>
<!-- bda-build-template version 1.1.1  -->
<!--
$Id: install.xml 1775 2009-06-26 18:34:54Z saksass $
$HeadURL: https://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-build-template/software/build/install.xml $
-->

<project name="bda-blueprints-installer" default="upgrade" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>
		This build file is part of the bda-build-templates project. This is the master install file for the project.  It should be placed in project/software.  This script is copied into the distribution and  executed from the extracted distribution.  It is run by typing "ant" from the master project build.xml or from command line. This script has two flows install and upgrade.
		Install will do the following
 			* Install binaries
			* Configure binaries
			* Install application
			* Configure application
			* Re-create database
			* Upgrade database
		Upgrade will do the following
			* Install application
			* Configure application
			* Upgrade database
		The script includes target that may not be used by all projects, but are included in here becaue it is a template. This script has targets to deal with the following, you can delete targets you don't want to work with
		Application servers (option for grid services also)
			* JBoss
			* Tomcat
		Databases
			* MySQL
			* PostgreSQL
			* Oracle
		This script requires java and ant to run. Every thing else it needs is included in the distribution.
	</description>

	<!-- Properties file related properties and tasks -->
	<property environment="env" />
	<property file="local.properties"/>
	<property file="project.properties"/>
	<!-- load the properties file -->
	<property name="properties.file" value="${basedir}/install.properties"/>
	<echo message="Using properties file of ${properties.file}."/>
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
	<property file="${properties.file}" />
	
	<!-- Generic properties -->
	<property name="project.name" value="bda-blueprints"/>
	<property name="env.name" value="local"/>
	<property name="log.dir" location="${basedir}/logs" />
	<property name="working.dir" location="${basedir}/working" />
	<property name="temp.dir" location="${working.dir}/temp" />


	<!-- Install Time properties -->
	<!-- Source and target directories -->
	<property name="bda-utils.dir" location="${basedir}/bda-utils" />
	<property name="tools.dir" location="${basedir}/${tools.dist.relative.dir}" />
	<property name="common.dir.src" location="${basedir}/${common.dist.relative.dir}" />
	<property name="common.dir.dest" location="${working.dir}/${common.dist.relative.dir}" />
	<property name="db.dir.src" location="${basedir}/${db.dist.relative.dir}" />
	<property name="db.dir.dest" location="${working.dir}/${db.dist.relative.dir}" />
	<property name="db-install.dir.dest" location="${working.dir}/${db-install.dist.relative.dir}" />
	<property name="db-upgrade.dir.dest" location="${working.dir}/${db-upgrade.dist.relative.dir}" />
	<property name="jboss-conf.dir.src" location="${basedir}/${jboss-conf.dist.relative.dir}" />
	<property name="jboss-conf.dir.dest" location="${working.dir}/${jboss-conf.dist.relative.dir}" />

	<!-- *-ds.xml and WAR -->
	<property name="bda-blueprints-webapp.dir.dist" location="${basedir}/${bda-blueprints-webapp.dist.relative.dir}" />
	<property name="bda-blueprints-webapp.ds.file" value="bda-blueprints-ds.xml" />
	<property name="bda-blueprints-webapp.name" value="bda-blueprints-webapp" />
	<property name="bda-blueprints-webapp.war.file" value="${bda-blueprints-webapp.name}.war" />

	<!-- Grid related properties -->
	<property name="grid.resource.dir" location="${basedir}/${tools.dist.relative.dir}" />
	<property name="grid.application.dir" location="${basedir}/${grid-sample.dist.relative.dir}" />
	<property name="grid.artifact.file" value="sample-wsrf-war.zip" />
	<property name="grid.dir.dest" value="wsrf" />
	<property name="grid.application.name" value="Sample" />
	<property name="resource.file.jboss-globus-lib" value="${cagrid-libs.binaries.file}" />
	<property name="resource.file.jboss-globus-war" value="${cagrid-base-war.binaries.file}" />

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Task definitions -->
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml" classpathref="bda-utils.classpath"/>
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="bda-utils.classpath"/>
	<taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath"/>
	<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="bda-utils.classpath"/>

	<!-- Includes-->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<!-- Clean/make working dir -->
	<delete dir="${working.dir}" failonerror="false"/>
	<mkdir dir="${working.dir}" />

	<!-- Start logging moved out of target so all targets are logged --> 
	<!--<property name="install-logs.dir" location="${application.base.path}/change-logs"/> -->
	<property name="install-logs.dir" location="${log.dir}"/>
	<mkdir dir="${install-logs.dir}"/>
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${install-logs.dir}/install-${install.time}.log" action="start"/>

	<target name="common:init:pre">
		<!-- Set application.base.path based on platform -->
		<condition property="application.base.path" value="${application.base.path.linux}">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>
	
		<condition property="application.base.path" value="${application.base.path.windows}">
			<os family="windows" />
		</condition>
		<echo message="application.base.path=${application.base.path}"/>
		<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
		<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
	</target>
	<!-- Targets begin -->
	<target name="install:jboss:init" depends="common:init:pre" unless="upgrade.running">
		<!-- determine if port configurations or port lists are being called -->
		<if>
			<isset property="jboss.ncicb-standard.port-config"/>
			<then>
				<!-- Read some port properties from standard bindings file -->
				<echo message="Using JBoss NCICB Standard port configurations"/>
				<property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
				<jboss-read-ports
					jboss.server.bindingfile.location="${jboss.server.binding.template.location}"
					/>
				<echo message="http -${jboss.server.port} "/>
				<echo message="http -${jboss.server.jndi.port} "/>
				<properties-exist
					properties.list="jboss.server.jndi.port,jboss.server.port,jboss.server.ports.name"
					/>
				<!-- Make sure there are not unexpanded tokens and that the jboss.server.ports.name is a configuration in the bindings file. -->
				<jboss-bindings-validate
					jboss.server.bindingfile.location="${jboss.server.binding.template.location}"
					/>

			</then>
			<else>
				<!-- else ensure that all ports are set, since these will be removed from install-properties.template we will verify here.  They have to be removed so the validator works with or without the properties or we have to change the format of the file. -->
				<echo message="Using custom JBoss port configurations"/>
				<property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
				<properties-exist
					properties.list="jboss.server.jndi.port,jboss.server.port,jboss.cobraorb.port,jboss.ejbinvoker.port,jboss.hajndi.port,jboss.hajrmi.port,jboss.jms.port,jboss.jmx-rmi.port,jboss.messaging.port,jboss.pooledha.port,jboss.remoting.port,jboss.server.bind.port,jboss.server.rmi.port,jboss.service.rmiobject.port,jboss.snmp.port,jboss.snmp-trapd.port,jboss.web.service.port"
					/>
			</else>
		</if>
	</target>
	<target name="common:jboss:init" depends="common:init:pre" unless="exclude.jboss">
		<math result="jboss.ssl.port" operand1="${jboss.server.port}" operation="+" operand2="363" datatype="int"/>
		<property name="jboss.ssl.enable" value="false"/>
		<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
		<property name="jboss.application.url" value="http://${jboss.server.hostname}:${jboss.server.port}/${bda-blueprints-webapp.name}"/>
		<available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
		<basename file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.file"/>
		<dirname file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.dir"/>
		<basename file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.cert.file"/>
		<dirname file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.dir"/>
		<basename file="${jboss.grid.secure.key.location}" property="jboss.grid.secure.key.file"/>
		<property name="jboss.socket.ports" value="${jboss.server.port},${jboss.server.rmi.port},${jboss.server.jndi.port},${jboss.service.rmiobject.port},${jboss.jms.port},${jboss.web.service.port}"/>
	</target>
	<target name="common:tomcat:init" depends="common:init:pre" unless="exclude.tomcat">
		<property name="tomcat.ssl.enable" value="false"/>
		<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
		<property name="tomcat.application.url" value="http://${tomcat.hostname}:${tomcat.port.http}/${bda-blueprints-webapp.name}"/>
		<basename file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.file"/>
		<dirname file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.dir"/>
		<basename file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.cert.file"/>
		<dirname file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.dir"/>
		<basename file="${tomcat.grid.secure.key.location}" property="tomcat.grid.secure.key.file"/>
		<property name="tomcat.sock.ports" value="${tomcat.port.http},${tomcat.port.ajp},${tomcat.port.shutdown}"/>
	</target>


	<target name="common:init" depends="common:init:pre">
		<property name="install.running" value="true"/>
		<!-- bda-blueprints-webapp can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
		<echoproperties prefix="database"/>
		<switch value="${database.type}">
			<case value="oracle">
				<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.4.0.jar"/>
				<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
				<property name="database.schema" value="${database.user}"/>
			</case>
			<case value="mysql">
				<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.8.jar"/>
				<property name="database.driver" value="com.mysql.jdbc.Driver"/>
				<property name="database.schema" value="${database.name}"/>
			</case>
			<case value="postgresql">
				<property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-604.jar"/>
				<property name="database.driver" value="org.postgresql.Driver"/>
				<property name="database.schema" value="public"/>
			</case>
			<default>
				<fail message="Invalid database type ${database.type}"/>
			</default>
		</switch>
	
		<path id="jdbc.driver.classpath">
			<pathelement location="${database.driver.file}"/>
		</path>

		<property name="properties.template.file" value="${basedir}/properties.template" />
		<filterset id="embedded.filterset">
			<filter token="application.base.path" value="${application.base.path}"/>
			<filter token="application.url" value="${application.url}"/>
			<filter token="database.url" value="${database.url}"/>
			<filter token="database.user" value="${database.user}"/>
			<filter token="database.password" value="${database.password}"/>
			<filter token="database.system.url" value="${database.system.url}"/>
			<!-- added internal properties that may be used in a filtered copy -->
			<filter token="database.driver" value="${database.driver}"/>
			<!-- added for liquibase -->
			<filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}/${database.type}"/>
			<filter token="jboss.home" value="${jboss.home}"/>
			<filter token="tomcat.home" value="${tomcat.home}"/>
			<filter token="database.dialect" value="${database.dialect}"/>
			<filter token="hibernate.cfg.file.path" value="${hibernate.cfg.file.path}"/>
			<filter token="env.LOGNAME" value="${env.LOGNAME}"/>
			<filter token="env.JAVA_HOME" value="${env.JAVA_HOME}"/>
			<filter token="project.name" value="project.name"/>
			<filter token="" value=""/>
		</filterset>

		<!--OS Temp dir -->
		<condition property="os.temp.dir" value="/tmp">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>
	
		<condition property="os.temp.dir" value="c:/temp">
			<os family="windows" />
		</condition>
		<!-- Copy files to ensure values containing variables are expanded, such properties are stored in embedded.filterset and then copy with filter files -->
		<copy todir="${common.dir.dest}" filtering="true">
			<fileset dir="${common.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy> 
	</target>

	<target name="diag">
		<echoproperties/>
	</target>

	<!-- Clean up destination directory -->
	<target name="install:common:clean" description="Removes all files from the local filesystem" depends="common:init,install:jboss:clean,install:tomcat:clean">
	</target>

	<target name="install:jboss:clean" unless="exclude.jboss" depends="common:jboss:init,common:init">
		<sleep seconds="5" />
		<property name="backup.count" value="5"/>

		<if>
			<not>
				<equals arg1="${exclude.jboss.backup}" arg2="true"/>
			</not>
			<then>
				<!-- Jboss backup, do not compress until install is finished -->
				<property name="backup.jboss.base.dir" location="${application.base.path}/backup/jboss"/>
		
				<!-- So these directories won't be included in the backup, they are not needed to use jboss -->
				<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
				<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
		
				<backup-dir
					src.dir="${jboss.home}"
					backup.base.dir="${backup.jboss.base.dir}"
					backup.count="${backup.count}"
					/>
			</then>
		</if>
		<delete dir="${jboss.home}"/>
	</target>

	<target name="install:tomcat:clean" unless="exclude.tomcat" depends="common:tomcat:init">
		<sleep seconds="5" />
		<property name="backup.count" value="5"/>
		<if>
			<not>
				<equals arg1="${exclude.tomcat.backup}" arg2="true"/>
			</not>
			<then>
				<property name="backup.tomcat.base.dir" location="${application.base.path}/backup/tomcat"/>
		
				<backup-dir
					src.dir="${tomcat.home}"
					backup.base.dir="${backup.tomcat.base.dir}"
					backup.count="${backup.count}"
					/>
			</then>
		</if>
		<delete dir="${tomcat.home}"/>
	</target>


	<!-- Wrapper install database target, depends on both MySQL and Oracle sub-targets, ifs should ensure only one is run.  Target path can be skipped by exlude.database also calls upgrade:database -->

	<target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="common:init">
		<property name="db.prop.list" value="database.url,database.user,database.password,database.name"/>
		<echo  message="Checking if database properties exist: ${db.prop.list}"/>
		<properties-exist properties.list="${db.prop.list}"/>
		<echoproperties prefix="database"/>
		<copy todir="${db.dir.dest}" filtering="true">
			<fileset dir="${db.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
		<mkdir dir="${os.temp.dir}/${project.name}"/>
		<copy todir="${os.temp.dir}/${project.name}" filtering="true" flatten="true" overwrite="true">
			<fileset dir="${db.dir.dest}">
				<include name="**/db-upgrade.xml"/>
			</fileset>
		</copy>
	</target>

	<target name="install:database" description="Runs datbase creation scripts then calls uprade database." unless="exclude.database"
		depends="
		
		common:init,
		install:database:prep,
		install:database:validation:pre-install
		">
		<!-- Drop all schema objects or re-create the db -->
		<database-clean/>
		<!-- Run baseline scripts stored in db.install.create.${database.type}.file.list variable -->
		<switch value="${database.type}">
			<case value="oracle">
				<database-install
					db.install.create.file.list="${db.install.create.oracle.file.list}"
					sql.delimiter="/"
					sql.delimitertype="row"
					/>
			</case>
			<case value="postgresql">
				<database-install
					db.install.create.file.list="${db.install.create.postgresql.file.list}"
					sql.delimiter="/"
					sql.delimitertype="row"
					/>
			</case>
			<case value="mysql">
				<database-install
					db.install.create.file.list="${db.install.create.mysql.file.list}"
					/>
			</case>
		</switch>
		<database-upgrade
			database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
			/>
		<database-tag/>
	</target>

	<target name="install:jboss:binaries" description="Install JBoss binaries" unless="exclude.jboss" depends="common:jboss:init, common:init">
		<jboss-install-binaries
			/>
		<jboss-nci-customizations       
			/>                                      
	</target>

	<target name="install:jboss:bda-blueprints-webapp:filesystem-data"  depends="common:jboss:init, common:init">
		<!-- This target is a place holder for creating a file-system data repository.  If you do not use one you can remove this target and all targets that refer to it. If you require a certain directory structure be sure to create it here.  If you need to copy in files, make sure to check them into svn, copy them into the distribution and then copy them to thier ultimate directory.  If your data needs to be refreshed with each install make sure to delete the base directory, then create the structure and copy in data.  Also you can use an archive file with relative pathing inside to build out the structure if you like, using an archive like zip may shrink the footprint in svn.
		<mkdir dir="${fs-data.base.dir}"/>
		<mkdir dir="${fs-data.base.dir}/scratch"/>
		<copy file="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" todir="${fs-data.base.dir}/scratch" overwrite="true" />
		-->
	</target>

	<target name="install:jboss:bda-blueprints-webapp" description="Deploy bda-blueprints-webapp and common libraries to jboss installation" unless="exclude.jboss" depends="common:jboss:init, common:init,install:jboss:bda-blueprints-webapp:filesystem-data">
		<!-- added to ensure working.dirs are fresh for our install -->
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
		<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
		<move file="${jboss.home}/server/${jboss.server.name}/log/server.log" tofile="${jboss.home}/server/${jboss.server.name}/log/server/log.${install.time}" failonerror="false"/>

		<copy file="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<!--  Many NCI applications require clm for csm, so you can point this to where you have the version you want to use
		<copy file="${bda-utils.dir}/clm-3.2.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
		-->
		<copy file="${database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
	</target>

	<target name="install:jboss:bda-blueprints-webapp:configure" description="Configure bda-blueprints-webapp application, copies over externalized properties or configurations that are not part of the jboss configuration" unless="exclude.jboss" depends="common:jboss:init, common:init">
		<!-- copy over any other files you may need to configure your application -->
		
		<!-- copy datasource file -->
		<copy file="${jboss-conf.dir.dest}/${bda-blueprints-webapp.ds.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<!-- copy JBoss-web.xml file -->
		<!--
		<copy file="${jboss-conf.dir.dest}/${jboss.web.xml.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		-->
		<!-- This code is for updating properties.service.xml, make sure to add ${line.separator} after each property def as the property delimiter, if this is not included you will not get the desired results. If you do not use properties service.xml you can delete this code. -->
		<var name="property.block" value="property1=${authentication.type}${line.separator}
			property2=${env.name}${line.separator}
			property3=${jboss.home}${line.separator}
			property4=${tomcat.home}${line.separator}
			"/>
		<copy file="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml" tofile="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml.orig" overwrite="true"/>
		<jboss-update-properties-service
			property.block="${property.block}"
			/>
	</target>

	<target name="install:jboss:configure:log4j" description="Configure custom entries in system wide log4j" unless="exclude.jboss"  depends="common:jboss:init, common:init">
		<!--
		<echo message="Configuring Log4J"/>

		<property name="log4j.file.name" value="log4j.xml"/>
		<copy file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}" tofile="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}.pre"/>

		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
			byline="true"
			match="^(&lt;!DOCTYPE.*)"
			replace="&lt;!\-\-\1\-\-&gt;"
			/>

		<xmltask source="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
			dest="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}">
			<xmlcatalog refid="installer.catalog"/>
			<remove path="/log4j:configuration/appender[@name='TestAppender']"/>
			<insert path="/log4j:configuration/category"i position="before">
				<![CDATA[
				<appender name="TestAppender" class="org.jboss.logging.appender.RollingFileAppender">
					<errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
					<param name="File" value="${jboss.server.log.dir}/testAppender.log"/>
					<param name="Append" value="false"/>
					<param name="MaxFileSize" value="${log4j.maxFileSize}"/>
					<param name="MaxBackupIndex" value="${log4j.maxDays}"/>

					<layout class="org.apache.log4j.PatternLayout">
						<param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
					</layout>           
				</appender>
				]]>
			</insert>
			<remove path="/log4j:configuration/category[@name='org.nih.nci']"/>
			<insert path="/log4j:configuration/root" position="before">
				<![CDATA[
				<category name="org.nih.nci">
					<priority value="${log4j.level}"/>
				</category>
				]]>
			</insert>
		</xmltask>
		<validate-log4j
			log4j.file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
			/>                              

		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
			byline="true"
			match="^&lt;!\-\-(&lt;!DOCTYPE.*)\-\-&gt;"
			replace="\1"
			/>
		-->
	</target>
	<target name="install:jboss:configure" description="Configure JBoss (bindings, login-config.xml, ect)" unless="exclude.jboss"
		depends="
		common:jboss:init,
		common:init,
		install:jboss:configure:log4j	
			">
		<!-- Calls the following macros
			jboss-bindings - configures ports for jboss
			jboss-login-config - sets up authentication
			secure-jboss-console - adds password to jboss console apps
			jboss-update-shutdown - updates shutdown.jar with correct jndi port so no args need to used 4 shutdown
			appserver-ssl-configure -  enables ssl
			appserver-configure-external-hostname - configures jboss for use through a reverse proxy
			grid-secure-configure-connector - configures secure grid
		-->
		<!-- Use below if you are defining all the ports in your install.xml not the NCICB port configuraitons-->
		<jboss-configure
			jboss.grid.configure="true"
			/>
	</target>


	<!-- Configure MQ settings based on contents of ncia/software/resrouces/deploy/jbossmq-destinations-service.block.xml -->
	<target name="-install:jboss:configure:jbossmq-dest" description="Configure MQ settings based on contents of software/common/resource/jboss-conf/jbossmq-destinations-service.block.xml" unless="exclude.jboss" depends="common:jboss:init,common:init">
		<!-- Provide template to change jboss mq configurations 
		<property name="jboss-mq.block.file" value="${resource.dir.target}/jbossmq-destinations-service.block.xml"/>
		<xmlconfig in="${jboss.home}/server/${jboss.server.name}/deploy/jms/jbossmq-destinations-service.xml" verbose="false">
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[1]" />
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[2]" />
		</xmlconfig>
		-->
	</target>


	<!-- Calls to bda macros for basic functionality -->
	<target name="install:jboss:stop" description="Stops jboss" unless="exclude.jboss" depends="common:jboss:init,common:init">
		<if>
			<isset property="jboss.exists"/>
			<then>
				<jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port}"/>
			</then>
		</if>
	</target>

	<target name="install:jboss:start" description="Starts jboss" unless="exclude.jboss" depends="common:jboss:init,common:init">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<jboss-start-jboss />
				<sleep seconds="15"/>
			</then>
		</if>
	</target>
	<target name="install:common:validation:pre-install" description="Runs pre-install validation checks bda-utils" depends="common:init">
		<validate-pre-install-common
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"
			/>
	</target>
	<target name="install:jboss:validation:pre-install" description="Runs pre-install validation checks bda-utils" 
		depends="
		common:jboss:init,common:init,
		install:common:validation:pre-install
		">
		<validate-pre-install-jboss
			/>
	</target>
	<target name="install:tomcat:validation:pre-install" description="Runs pre-install validation checks bda-utils" 
		depends="
		common:tomcat:init,
		common:init,
		install:common:validation:pre-install
		">
		<validate-pre-install-tomcat
			/>
	</target>
	<target name="install:database:validation:pre-install" description="Runs pre-install validation checks bda-utils" 
		depends="
		common:init,
		install:common:validation:pre-install
		">
		<validate-pre-install-database
			database.version="${mysql.minimum.version}"
			/>
	</target>


	<target name="install:jboss:validation:pre-install:ports" description="Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop"
		depends="
		common:init,
		install:jboss:stop
		">
		<validate-pre-jboss-ports
			/>
	</target>
	<target name="install:tomcat:validation:pre-install:ports" description="Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop"
		depends="
		common:init,
		install:tomcat:stop
		">
		<validate-pre-tomcat-ports
			/>
	</target>

	<target name="install:common:validation:post-install" description="Run post-install checks from bda-utils"
		depends="
		common:init
		">
		<validate-post-common />
	</target>
	<target name="install:jboss:validation:post-install" description="Run post-install checks from bda-utils"
		depends="
		common:jboss:init,
		common:init,
		install:jboss:start
		">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-jboss />
			</then>
		</if>
	</target>
	<target name="install:tomcat:validation:post-install" description="Run post-install checks from bda-utils" unless="exclude.tomcat"
		depends="
		common:tomcat:init,
		common:init,
		install:tomcat:start
		">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-tomcat />
			</then>
		</if>
	</target>

	<!-- Wrapper target to deploy JBOSS container -->
	<target name="install:jboss" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.jboss"
		depends="
		common:jboss:init,
		common:init,
		install:jboss:init,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:clean,
		install:jboss:binaries,
		install:jboss:bda-blueprints-webapp:re-configure,
		install:jboss:bda-blueprints-webapp,
		install:jboss:bda-blueprints-webapp:configure,
		install:jboss:configure,
		install:jboss:grid,
		install:jboss:grid:configure,
		install:post:jboss,
		install:jboss:start,
		install:jboss:validation:post-install
		" >
	</target>

	<target name="install:tomcat" description="Wrapper scripts that calls all required targets to install the tomcat container" unless="exclude.tomcat"
		depends="
		
		common:tomcat:init,
		common:init,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:tomcat:clean,
		install:tomcat:binaries,
		install:tomcat:configure,
		install:tomcat:bda-blueprints-webapp:re-configure,
		install:tomcat:bda-blueprints-webapp,
		install:tomcat:bda-blueprints-webapp:configure,
		install:tomcat:grid,
		install:tomcat:grid:configure,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
		depends="
		common:jboss:init,
		common:tomcat:init,
		
		common:init,
		install:jboss:init,
		install:common:validation:pre-install,
		install:jboss:validation:pre-install,
		install:tomcat:validation:pre-install,
		install:database:validation:pre-install,
		install:jboss:stop,
		install:tomcat:stop,
		install:jboss:validation:pre-install:ports,
		install:tomcat:validation:pre-install:ports,
		install:common:clean,
		install:database,
		install:tomcat,
		install:jboss,
		install:common:post,
		install:jboss:start,
		install:common:validation:post-install
		">
	</target>

	<target name="install:jboss:bda-blueprints-webapp:re-configure" description="Update contents of artifacts if not all properties have been externalized, by extracting artifact, modify it as needed and re-archive it." unless="exclude.jboss"  depends="common:init">
		<!-- This is only required if configuration files are not externalized, below is a sample of what you may do.
		<delete dir="${working.dir}/bda-blueprints-webapp"/>
		<unzip src="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" dest="${working.dir}/bda-blueprints-webapp"/>
		<copy todir="${working.dir}/bda-blueprints-webapp/WEB-INF/classes" file="${jboss-conf.dir.dest}/hibernate.cfg.xml"/>
		
		<move file="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" tofile="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}.orig"/>
		<war destfile="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" compress="false" webxml="${working.dir}/bda-blueprints-webapp/WEB-INF/web.xml" >
			<fileset dir="${working.dir}/bda-blueprints-webapp">
				<include name="*/**" />
			</fileset>
		</war>  
		-->
	</target>

	<!-- Generic targets to call appropriate upgrade path targets, just change the depends to use alternate ugprade path -->
	<target name="upgrade:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss" depends="upgrade:jboss:init,common:init,upgrade-ncm:jboss">
	</target>

	<target name="upgrade:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat" depends="upgrade:tomcat:init,common:init,upgrade-ncm:tomcat">
	</target>

	<target name="upgrade" description="Upgrades JBoss and Database" depends="upgrade:common:init,common:init,upgrade-ncm">
	</target>

	<target name="upgrade-with-dbinstall" description="Upgrades JBoss and Database" depends="upgrade:common:init,common:init,upgrade-ncm:with-dbinstall">
	</target>

	<!-- Upgrade with Disposable Application Conttainer (DAC) -->
	<target name="upgrade-dac:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="
		upgrade:jboss:init,
		common:init,
		common:jboss:init,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:clean,
		install:jboss:binaries,
		install:jboss:configure,
		install:jboss:bda-blueprints-webapp:re-configure,
		install:jboss:bda-blueprints-webapp,
		install:jboss:bda-blueprints-webapp:configure,
		upgrade:post:jboss,
		install:post:jboss,
		install:jboss:start,
		install:jboss:validation:post-install
		">
	</target>
	<target name="upgrade-dac:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat"
		depends="
		upgrade:tomcat:init,
		common:init,
		common:tomcat:init,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:tomcat:clean,
		install:tomcat:binaries,
		install:tomcat:configure,
		install:tomcat:bda-blueprints-webapp:re-configure,
		install:tomcat:bda-blueprints-webapp,
		install:tomcat:bda-blueprints-webapp:configure,
		install:tomcat:grid,
		install:tomcat:grid:configure,
		upgrade:post:tomcat,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<target name="upgrade-dac" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
		common:init,
		common:jboss:init,
		common:tomcat:init,
		install:common:validation:pre-install,
		install:jboss:validation:pre-install,
		install:tomcat:validation:pre-install,
		install:database:validation:pre-install,
		install:jboss:stop,
		install:tomcat:stop,
		upgrade:database,
		upgrade:jboss,
		upgrade:tomcat,
		install:common:validation:post-install
		">
	</target>

	<target name="upgrade-dac:with-dbinstall" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
		common:init,
		common:jboss:init,
		common:tomcat:init,
		install:common:validation:pre-install,
		install:jboss:validation:pre-install,
		install:tomcat:validation:pre-install,
		install:database:validation:pre-install,
		install:jboss:stop,
		install:tomcat:stop,
		install:database,
		upgrade:jboss,
		upgrade:tomcat,
		install:common:validation:post-install
		">
	</target>
	<!-- Upgrade with Container Modification (CM) -->
	<target name="upgrade-cm:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="
		upgrade:jboss:init,
		common:init,
		common:jboss:init,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:configure,
		install:jboss:bda-blueprints-webapp:re-configure,
		install:jboss:bda-blueprints-webapp,
		install:jboss:bda-blueprints-webapp:configure,
		upgrade:post:jboss,
		install:post:jboss,
		install:jboss:start,
		install:jboss:validation:post-install
		">
	</target>
	<target name="upgrade-cm:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat"
		depends="
		upgrade:tomcat:init,
		common:init,
		common:tomcat:init,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:tomcat:configure,
		install:tomcat:bda-blueprints-webapp:re-configure,
		install:tomcat:bda-blueprints-webapp,
		install:tomcat:bda-blueprints-webapp:configure,
		install:tomcat:grid,
		install:tomcat:grid:configure,
		upgrade:post:tomcat,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<target name="upgrade-cm" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
		common:init,
		common:jboss:init,
		common:tomcat:init,
		install:common:validation:pre-install,
		install:jboss:validation:pre-install,
		install:tomcat:validation:pre-install,
		install:database:validation:pre-install,
		install:jboss:stop,
		install:tomcat:stop,
		upgrade:database,
		upgrade:jboss,
		upgrade:tomcat,
		install:common:validation:post-install
		">
	</target>

	<target name="upgrade-cm:with-dbinstall" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
		common:init,
		common:jboss:init,
		common:tomcat:init,
		install:common:validation:pre-install,
		install:jboss:validation:pre-install,
		install:tomcat:validation:pre-install,
		install:database:validation:pre-install,
		install:jboss:stop,
		install:tomcat:stop,
		install:database,
		upgrade:jboss,
		upgrade:tomcat,
		install:common:validation:post-install
		">
	</target>
	<!-- Upgrade with No Container Modification (NCM) -->
	<target name="upgrade-ncm:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="
		upgrade:jboss:init,
		common:init,
		common:jboss:init,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:bda-blueprints-webapp:re-configure,
		install:jboss:bda-blueprints-webapp,
		install:jboss:bda-blueprints-webapp:configure,
		install:post:jboss,
		install:jboss:start,
		install:jboss:validation:post-install
		">
	</target>
	<target name="upgrade-ncm:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat"
		depends="
		upgrade:tomcat:init,
		common:init,
		common:tomcat:init,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:tomcat:bda-blueprints-webapp:re-configure,
		install:tomcat:bda-blueprints-webapp,
		install:tomcat:bda-blueprints-webapp:configure,
		install:tomcat:grid,
		install:tomcat:grid:configure,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<target name="upgrade-ncm" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
		common:init,
		common:jboss:init,
		common:tomcat:init,
		install:common:validation:pre-install,
		install:jboss:validation:pre-install,
		install:tomcat:validation:pre-install,
		install:database:validation:pre-install,
		install:jboss:stop,
		install:tomcat:stop,
		upgrade:database,
		upgrade:jboss,
		upgrade:tomcat,
		install:common:validation:post-install
		">
	</target>

	<target name="upgrade-ncm:with-dbinstall" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
		common:init,
		common:jboss:init,
		common:tomcat:init,
		install:common:validation:pre-install,
		install:jboss:validation:pre-install,
		install:tomcat:validation:pre-install,
		install:database:validation:pre-install,
		install:jboss:stop,
		install:tomcat:stop,
		install:database,
		upgrade:jboss,
		upgrade:tomcat,
		install:common:validation:post-install
		">
	</target>

	<!-- static upgrade targets -->
	<target name="upgrade:database" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
		depends="
		upgrade:database:init,
		common:init,
		install:database:prep,
		install:database:validation:pre-install
		">
		<database-upgrade
			database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
			/>
		<database-tag/>
	</target>


	<target name="upgrade:database:tag" description="Tags current state of database with a tag to allow for rollback of database to previous versions." unless="exclude.database"
		depends="
		upgrade:database:init,
		common:init,
		install:database:prep
		">
		<database-tag/>
	</target>

	<target name="upgrade:database:rollback" description="Rolls back database to previous tagged version using rollback scripts." unless="exclude.database"
		depends="
		upgrade:database:init,
		common:init,
		install:database:prep
		">
		<database-rollback/>
	</target>

	<!-- Targets below are provided to handle tomcat and grid installations, however many projects do not use either of these so they have been moved to the end of the script. -->
	<!-- tomcat targets -->
	<target name="install:tomcat:binaries" description="Install tomcat binaries" unless="exclude.tomcat" depends="common:init">
		<delete dir="${tomcat.home}"/>
		<dirname file="${tomcat.home}" property="tomcat.base.dir"/>
		<unzip dest="${tomcat.base.dir}" src="${tools.dir}/${tomcat.binaries.file}" />
		<if>    
			<os family="unix"/>
			<then>  
				<chmod dir="${tomcat.home}/bin" perm="ugo+rx" 
					includes="**/*.sh"/>
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure" description="Configure tomcat (change ports)" unless="exclude.tomcat" depends="common:init">
		<tomcat-configure
			tomcat.grid.configure="true"
			/>
	</target>

	<target name="install:tomcat:stop" description="Stop Tomcat" unless="exclude.tomcat" depends="common:init">
		<if>
			<available file="${tomcat.home}/bin/shutdown.sh"/>
			<then>
				<echo message="Shutting down tomcat"/>
				<tomcat-stop tomcat.home="${tomcat.home}"/>
			</then>
			<else>
				<echo message="Tomcat not found , not shutting down tomcat"/>
			</else>
		</if>
	</target>

	<target name="install:tomcat:start" description="Start Tomcat" unless="exclude.tomcat" depends="common:init">
		<if>    
			<not>   
				<isset property="exclude.start.servers"/>
			</not>  
			<then>  
				<tomcat-start tomcat.home="${tomcat.home}"/>
			</then> 
		</if>   
	</target>


	<!-- Grid Targets for jboss and tomcat -->

	<target name="install:bda-blueprints-grid" description="Wrapper target for Grid application targets"
		depends="
		
		common:init,
		install:jboss:grid,
		install:jboss:grid:configure
	">
	</target>

	<target name="install:tomcat:grid" description="Deploy grid to tomcat" unless="exclude.tomcat" depends="common:init">
		<mkdir dir="${tomcat.home}/webapps/${grid.dir.dest}"/>
		<unzip dest="${tomcat.home}/common/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}">
			<patternset>
				<exclude name="**/cog-tomcat.jar"/>
			</patternset>
		</unzip>
		<unzip dest="${tomcat.home}/server/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}" >
			<patternset>
				<include name="**/cog-tomcat.jar"/>
			</patternset>
		</unzip>
		<unzip dest="${tomcat.home}/webapps/${grid.dir.dest}" src="${grid.resource.dir}/${resource.file.jboss-globus-war}" />
		<unzip dest="${tomcat.home}/webapps/${grid.dir.dest}" src="${grid.application.dir}/${grid.artifact.file}" />
	</target>

	<target name="install:tomcat:grid:configure" description="Configure tomcat-application" unless="exclude.tomcat" depends="common:init">
		<!--
		<grid-appserver-configure
			appserver.conf.dir="${tomcat.home}/conf"
			appserver.webapp.dir="${tomcat.home}/webapps"
			appserver.server-xml.file="${tomcat.home}/conf/server.xml"
			appserver.server-xml.service.name="Catalina"
			appserver.port.http="${tomcat.port.http}"
			appserver.port.ssl="${tomcat.port.ssl}"
			appserver.hostname="${tomcat.hostname}"
			appserver.external.http.host="${tomcat.external.http.host}"
			grid.external.secure.host="${grid.external.secure.host}"
			grid.external.secure.port="${grid.external.secure.port}"
			/>
		-->
		<tomcat-configure-grid
			/>
	</target>

	<target name="install:jboss:grid" description="Deploy  to jboss" unless="exclude.jboss" depends="common:init">
		<mkdir dir="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}"/>
		<unzip dest="${jboss.home}/server/${jboss.server.name}/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}" />
		<unzip dest="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}" src="${grid.resource.dir}/${resource.file.jboss-globus-war}" />
		<unzip dest="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}" src="${grid.application.dir}/${grid.artifact.file}" />
	</target>

	<target name="install:jboss:grid:configure" description="Configure tomcat-application" unless="exclude.jboss" depends="common:init">
		<jboss-configure-grid
			/>
	</target>

	<target name="install:common:post" depends="common:init,install:post:jboss, install:post:tomcat">
	</target>

	<target name="install:post:jboss" unless="exclude.jboss" depends="common:init">
		<if>
			<not>
				<equals arg1="${exclude.jboss.backup}" arg2="true"/>
			</not>
			<then>
				<property name="changelogFile" location="${install-logs.dir}/chagneLog-${install.time}.txt"/>
				<property name="compare1.dir" location="${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}"/>
				<property name="compare2.dir" location="${jboss.home}"/>
				<report-dir-diff
					dir1="${compare1.dir}"
					dir2="${compare2.dir}"
					reportFile="${changelogFile}"
					/>
				<!-- Copy app server logs -->
				<mkdir dir="${jboss.home}/server/${jboss.server.name}/log"/>
				<mkdir dir="${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}/server/${jboss.server.name}/log"/>
				<!-- so the logs wont be included in the zip -->
				<move todir="${jboss.home}/server/${jboss.server.name}/log">
					<fileset dir="${backup.jboss.base.dir}/backup/${jboss.binaries.relative.dir}/server/${jboss.server.name}/log">
						<include name="*"/>
					</fileset>
				</move>
		
				<!-- Compress backup and cleanup -->
				<mkdir dir="${backup.jboss.base.dir}/backup1"/>
				<zip destfile="${backup.jboss.base.dir}/backup1/${jboss.binaries.relative.dir}.zip" basedir="${backup.jboss.base.dir}/backup" />
				<delete dir="${backup.jboss.base.dir}/backup"/>
			</then>
		</if>
	</target>

	<target name="install:post:tomcat" unless="exclude.tomcat" depends="common:init">
		<if>
			<not>
				<equals arg1="${exclude.tomcat.backup}" arg2="true"/>
			</not>
			<then>
				<property name="changelogFile" location="${install-logs.dir}/changeLog-${install.time}.txt"/>
				<property name="compare1.dir" location="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}"/>
				<property name="compare2.dir" location="${tomcat.home}"/>
				<report-dir-diff
					dir1="${compare1.dir}"
					dir2="${compare2.dir}"
					reportFile="${changelogFile}"
					/>
				
				<mkdir dir="${tomcat.home}/server/${tomcat.server.name}/log"/>
				<mkdir dir="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log"/>
				<copy todir="${tomcat.home}/server/${tomcat.server.name}/log">
					<fileset dir="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log">
						<include name="*"/>
					</fileset>
				</copy>
			</then>
		</if>
	</target>
	<target name="install:tomcat:bda-blueprints-webapp" description="Deploy bda-blueprints-webapp and common libraries to tomcat installation" unless="exclude.tomcat" depends="common:init">
		<delete dir="${tomcat.home}/temp"/>
		<delete dir="${tomcat.home}/work"/>
		<copy file="${bda-blueprints-webapp.dir.dist}/${bda-blueprints-webapp.war.file}" todir="${tomcat.home}/webapps" overwrite="true" />
		<!--  Many NCI applications require clm for csm, so you can point this to where you have the version you want to use
		<copy file="${bda-utils.dir}/clm-3.2.jar" todir="${tomcat.home}/server/${tomcat.server.name}/lib" overwrite="true" />
		-->
		<copy file="${database.driver.file}" todir="${tomcat.home}/common/lib" overwrite="true" />
	</target>

	<target name="install:tomcat:bda-blueprints-webapp:configure" description="Configure bda-blueprints-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration" unless="exclude.tomcat" depends="common:init">
		<!-- configure datasource -->
	</target>
	<target name="install:tomcat:bda-blueprints-webapp:re-configure" description="Configure bda-blueprints-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration" unless="exclude.tomcat" depends="common:init">
	</target>

	<target name="upgrade:common:init" depends="upgrade:jboss:init, upgrade:tomcat:init" unless="install.running">
	</target>
	<target name="upgrade:jboss:init" unless="install.running"
		depends="
		upgrade:jboss:init:prep,
		upgrade:jboss:readers:bda,
		upgrade:jboss:readers:custom
		">
		<properties-print
			properties.list="${read.properties.list}"
			/>
		<properties-exist
			properties.list="${read.properties.list}"
			/>
		<properties-write
			properties.list="${read.properties.list}"
			/>
	</target>
	<target name="upgrade:tomcat:init" unless="install.running"
		depends="
		upgrade:tomcat:init:prep,
		upgrade:tomcat:readers:bda,
		upgrade:tomcat:readers:custom
		">
		<properties-print
			properties.list="${read.properties.list}"
			/>
		<properties-exist
			properties.list="${read.properties.list}"
			/>
		<properties-write
			properties.list="${read.properties.list}"
			/>
	</target>
	<target name="upgrade:database:init" unless="install.running"
		depends="
		upgrade:jboss:init:prep,
		upgrade:database:readers:bda,
		upgrade:database:readers:custom
		">
		<!-- You need to either depend on jboss or tomcat so that you can read the db properties from it's configs.  BDA only has macros to read database properties from jboss. -->
	</target>
	<target name="upgrade:common:init:prep" unless="install.running">
		<if>
			<not>
				<isset property="application.base.path"/>
			</not>
			<then>
				<!-- Set application.base.path based on platform -->
				<condition property="application.base.path" value="${application.base.path.linux}">
					<or>
						<os family="unix" />
						<os family="mac" />
					</or>
				</condition>
			
				<condition property="application.base.path" value="${application.base.path.windows}">
					<os family="windows" />
				</condition>
				<echo message="application.base.path=${application.base.path}"/>
			</then>
		</if>
		<properties-print
			properties.list="application.base.path,jboss.home,tomcat.home,jboss.server.name"
			/>
		<var name="read.properties.list" value=""/>
		<property name="upgrade.running" value="true"/>
	</target>
	<target name="upgrade:jboss:init:prep" depends="upgrade:common:init:prep" unless="install.running">
		<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
		<if>
			<equals arg1="${jboss.ncicb-standard.port-config}" arg2="true"/>
			<then>
				<property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
			</then>
			<else>
				<property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
			</else>
		</if>
						
		<property name="upgrade.running" value="true"/>
		<!-- Upgrades always use port configs -->
		<property name="jboss.ncicb-standard.port-config" value="true"/>
		<available file="${jboss.home}" property="jboss.exists"/>
		<property name="read.jboss.home" value="${jboss.home}"/>

	</target>

	<target name="upgrade:tomcat:init:prep" depends="upgrade:common:init:prep" unless="install.running">
		<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
		<!-- Upgrades always use port configs -->
		<available file="${tomcat.home}" property="tomcat.exists"/>
		<property name="read.tomcat.home" value="${tomcat.home}"/>
	</target>

	<target name="upgrade:jboss:readers:custom" unless="install.running">
		<!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->
	</target>

	<target name="upgrade:tomcat:readers:custom" unless="install.running">
		<!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->
	</target>

	<target name="upgrade:database:readers:custom" unless="install.running">
		<!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->
	</target>
	<target name="upgrade:database:readers:bda" depends="upgrade:jboss:init:prep" if="jboss.exists">

		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist
			properties.list="application.base.path,jboss.home,jboss.server.name"
			/>
		<jboss-read-dbconfig
			jboss.home="${read.jboss.home}"
			jboss.ds-xml.file="bda-blueprints-ds.xml"
			/>
	</target>
	
	<target name="upgrade:jboss:readers:bda" if="jboss.exists">

		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist
			properties.list="application.base.path,jboss.home,jboss.server.name"
			/>
		<!-- Set these -->
		<osfamily property="os.family"/>
		<if>
			<or>
				<equals arg1="${os.family}" arg2="unix"/>
				<equals arg1="${os.family}" arg2="mac"/>
			</or>
			<then>
				<property name="jboss.server.hostname" value="${env.HOSTNAME}"/>
			</then>
		</if>
		<if>
			<equals arg1="${os.family}" arg2="windows"/>
			<then>
				<property name="jboss.server.hostname" value="${env.COMPUTERNAME}"/>
			</then>
		</if>
		<!-- Begin JBoss Readers -->
		<!-- Reader reqiures that you have only one data source defined in each *-ds.xml file -->
		<jboss-read-dbconfig
			jboss.home="${read.jboss.home}"
			jboss.ds-xml.file="bda-blueprints-ds.xml"
			/>
		<jboss-read-ldapconfig
			jboss.home="${read.jboss.home}"
			/>
		<jboss-read-bindings-file-location
			jboss.home="${read.jboss.home}"
			/>
		<jboss-read-ports
			/>
		<!-- Setting this variable will cause install to copy it into place if using CM/DAC, not modified in NCM -->
		<var name="jboss.ssl.keystore.dir" value="${working.dir}/keys/jboss"/>
		<jboss-read-ssl
			jboss.home="${read.jboss.home}"
			copied.keystore.dir="${jboss.ssl.keystore.dir}"
			/>
		<!-- No longer needed now reading all the ports
		<jboss-copy-bindings
			copied.jboss.server.bindingfile.dir="${working.dir}/copied-bindings"
			copied.jboss.bindings.file.property.name="copied.jboss.bindings.file"
			/>
		# Setting this will cause install to copy this file into place if using CM/DAC, not modified in NCM 
		<var name="jboss.server.binding.template.location" value="${working.dir}/copied-bindings/${copied.jboss.bindings.file}"/>
		-->
		<jboss-read-external-hostname
			jboss.home="${read.jboss.home}"
			/>
		<!-- for tier installs, should be done first, since it is set first it will be the one used if it exists -->
		<jboss-read-java_opts
			jboss.bin.dir="${read.jboss.home}/server/${jboss.server.name}/bin"
			/>              
		<jboss-read-java_opts
			jboss.home="${read.jboss.home}"
			/>
		<!-- will have to add code to install:post:jboss to copy this back if exists -->
		<property name="copied.jboss.log4j.dir" value="${working.dir}/copied-log4j"/>
		<jboss-copy-log4j
			jboss.home="${read.jboss.home}"
			copied.jboss.log4j.dir="${copied.jboss.log4j.dir}"
			/>
		<grid-read-index-url
			grid.wsrf.dir="${read.jboss.home}/server/${jboss.server.name}/deploy/wsrf"
			/>              
		<var name="jboss.grid.secure.dir" value="${working.dir}/keys/jboss"/>
		<jboss-read-grid-secure
			jboss.home="${read.jboss.home}"
			copied.keystore.dir="${jboss.grid.secure.dir}"
			/>
		<!-- will have to add code to install:post:jboss to copy this back if exists -->
		<!-- no longer needed 
		<property name="copied.jboss.service-metadata.dir" value="${working.dir}/jboss-grid"/>
		<grid-copy-service-metadata
			copied.service-metadata.dir="${copied.service-metadata.dir}"
			/>
		-->
		<grid-read-poc
			grid.wsrf.dir="${read.jboss.home}/server/${jboss.server.name}/deploy/wsrf"
			grid.service.name="Sample"
			/>                      
		<read-property-from-properties-service
			jboss.home="${read.jboss.home}"
			property.name="property1"
			/>
		<read-property-from-properties-service
			jboss.home="${read.jboss.home}"
			property.name="property2"
			/>
	</target>
	<target name="upgrade:tomcat:readers:bda" depends="upgrade:tomcat:init:prep" if="tomcat.exists">

		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist
			properties.list="application.base.path,tomcat.home"
			/>
		<!-- Begin Tomcat readers, delete if you don't need -->
		<osfamily property="os.family"/>
		<if>
			<or>
				<equals arg1="${os.family}" arg2="unix"/>
				<equals arg1="${os.family}" arg2="mac"/>
			</or>
			<then>
				<property name="tomcat.hostname" value="${env.HOSTNAME}"/>
			</then>
		</if>
		<if>
			<equals arg1="${os.family}" arg2="windows"/>
			<then>
				<property name="tomcat.hostname" value="${env.COMPUTERNAME}"/>
			</then>
		</if>
		<tomcat-read-ports
			tomcat.home="${read.tomcat.home}"
			/>
		<var name="tomcat.ssl.keystore.dir" value="${working.dir}/keys/tomcat"/>
		<tomcat-read-ssl
			tomcat.home="${read.tomcat.home}"
			copied.keystore.dir="${tomcat.ssl.keystore.dir}"
			/>              
		<tomcat-read-external-hostname
			tomcat.home="${read.tomcat.home}"
			/>
		<grid-read-index-url
			grid.wsrf.dir="${read.tomcat.home}/webapps/wsrf"
			/>
		<var name="tomcat.grid.secure.dir" value="${working.dir}/keys/tomcat"/>
		<tomcat-read-grid-secure
			tomcat.home="${read.tomcat.home}"
			copied.keystore.dir="${tomcat.grid.secure.dir}"
			/>
		<!--
		<property name="copied.tomcat.service-metadata.dir" value="${working.dir}/tomcat-grid"/>
		<grid-copy-service-metadata
			grid.wsrf.dir="${tomcat.home}/webapps/wsrf"
			copied.service-metadata.dir="${copied.service-metadata.dir1}"
			/>
		-->
		<grid-read-poc
			grid.wsrf.dir="${read.tomcat.home}/webapps/wsrf"
			grid.service.name="Sample"
			/>                      


		<!-- Fail if any read properties are not set -->
		<echo message="All properties after readers"/>
		<tomcat-read-dbconfig
			/>
	</target>
	<target name="upgrade:post:jboss" unless="install.running">
		<copy file="${copied.jboss.log4j.dir}/log4j.xml" todir="${jboss.home}/server/${jboss.server.name}/conf"/>
	</target>
	<target name="upgrade:post:tomcat">
		<!-- place holder -->
	</target>
</project>
