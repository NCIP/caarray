How to expose caArray services on caGRID:
-----------------------------------------

NOTE: The CaArrayGridService code that is checked in is an as-is check-in
of what caGRID generated for my test application. It is not meant to be
compiled and run as-is on your machine, but intended only to provide an
example of the code that must be generated and written.

1. If running the GRID locally, download and install caGRID. (I used the training version.)
   (a) Make sure Java 5 is installed and JAVA_HOME is set.
   (b) Run their terminal.bat, cd to %GLOBUS_LOCATION%\bin and run "globus-start-contaner -nosec".
   (c) Run terminal.bat, cd to %CAGRID_LOCATION% and run "ant introduce".
2. Create a CaArrayGridService using Introduce:
   (a) Create a caBIG Service.
   (b) Select a directory: e.g., C:\projects\CaArrayGridService
   (c) Select a name for the service: e.g., CaArrayGridService
   (d) Select a java package for the generated code: e.g., gov.nih.nci.cagrid.caarray
   (e) Select the default namespace (http://caarray.cagrid.nci.nih.gov/CaArrayGridService).
   (f) Select "Analytical Service" if you're just exposing your own services. Or select "Data Service"
       to expose a GRID-standard CQL service. (Steps 3-9 deal with exposing our own services on the GRID.)
3. Generate xml-mapping artifacts from model:
   (a) Put model in Logical View.Logical Model package (in Enterprise Architect).
   (c) Use caCORE SDK to generate POJOs and .xsd artifacts. Alternatively, wait until the
       caArray model has been put into the caDSR, and then you can point the GRID service to
       look up the domain objects from caDSR.
4. In Introduce, under the Types tab, add the domain-object-to-xml mappings:
   (a) Choose to get the Types from "File System".
   (b) Browse to the directory that contains the .xsd files generated by castor.
   (c) Select each .xsd file and click "Add".
   (d) Hit "Save" after all the xsds have been imported.
       Note that the .xsd files generated by castor seem to have some problems:
       The "type" attribute in "Protocol" seems to be defined wrongly as type "term",
       instead of an element of type "gov.nih......Term".
       Also, xml-mapping.xml seems to have the type "term" instead of "Term".
       These problems are caused by having complex types as attributes. (Protocol
       has an attribute of type Term.) If this was modelled as an association rather
       than as an attribute, these problems would go away. Alternatively, you can hand-fix
       the castor mappings as I have tried to do.
5. In Introduce, set up "SDK-style" serialization/deserialization for each domain object type.
   This means that we will provide the POJO implementations in our jar (instead of Introduce
   generating stubs, and castor-style serialization/deserialization will be used).
   (a) Under Types, choose each type (e.g., Protocol, Category etc.), and do the following.
   (b) Click on Customize Beans, and set the class name, serializer and deserializer.
   (c) E.g., class name = Category
   (d) Serializer = gov.nih.nci.cagrid.encoding.SDKSerializerFactory.
   (e) Deserializer = gov.nih.nci.cagrid.encoding.SDKDeserializerFactory.
   (f) Hit "Save" after serialization for all the Types (domain objects) has been defined.
   (g) Go to C:\projects\CaArrayGridService\src\....\cagrid\caarray and save the xml-mapping.xml file
       generated by castor here.
   (h) Go to C:\projects\CaArrayGridService\server-config.wsdd, and add the following in the service section:
       <parameter name="castorMapping" value="/gov/nih/nci/cagrid/caarray/xml-mapping.xml" />
   (i) Go to C:\projects\CaArrayGridService\server-config.wsdd, and add the following in the globalConfiguration section:
       <parameter name="castorMapping" value="/gov/nih/nci/cagrid/caarray/xml-mapping.xml" />
6. In Introduce, under the Operations tab, add each method that you want to expose:
   (a) Add a method called "search".
   (b) Under "Inputs", double-click on AbstractCaArrayEntity.
   (c) Under "Output", double-click on AbstractCaArrayEntity and check "IsArray".
   (d) Click on "Done" to add the method. (Note that the method is NOT "imported" or "provided".)
   (e) Add all required methods like this.
   (f) Hit "Save" to make Introduce generate stubs for your methods.
7. Go into the Introduce-generated source code and add the implementation for your remote service and methods:
   (a) Go to C:\projects\CaArrayGridService\src\....\service\CaArrayGridServiceImpl.java.
   (b) Change this file to add code to look up your remote EJBs through the JNDI server and call the
       appropriate methods on them.
8. In Introduce, Deploy the Service. Choose "GLOBUS_LOCATION" as the deployment location, and defaults for the rest.
9. Note that there is a bug in Axis which causes wrong hard-coded class names to be put into the
   CaArrayGridServicePortTypeSOAPBindingStub.java. The caGRID team is supposed to have made a fix
   for this which will come out in the next version of caGRID (1.1?). However, in the meantime,
   we can go into that file and remove all references to the wrong class names (e.g., CategoryChildren,
   ProtocolParameters). We also have to change the build.xml in the CaArrayGridService directory
   to copy over this modified file before compiling the stubs. (I added a target called "fixAxisStubProblem"
   and made the "compileStubs" target depend on this.)
   Now deploy the caArray grid service from the command line using "ant deployGlobus". (Don't deploy
   through Introduce.)
10. Write test client code - See src\....\client\CaArrayGridServiceClient.java (main method). Run "ant runClient" from
   the CaArrayGridService directory to test it.
   There is still a problem with getting this test client to work, purportedly because of problems
   in our castor mappings. (Look at the thread "Grid-ifying a non-caCORE-SDK-generated app" under
   the June 2007 archives of the CAGRID_USERS-L list, for the latest status.)
11. Note that both the grid service and the grid client need caarray-client.jar, because they need POJOs
   for the domain objects. We should not introduce any RMI-like code in the POJO classes themselves because
   this will cause problems for the grid client. (This is a problem in caArray 1.5, and causes a hack where
   different versions of the same POJO are generated - one for the grid service and one for the grid client.)

