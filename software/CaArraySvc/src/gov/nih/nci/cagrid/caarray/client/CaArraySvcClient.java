package gov.nih.nci.cagrid.caarray.client;

import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.Iterator;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.caarray.domain.array.ArrayDesign;
import gov.nih.nci.caarray.domain.array.ArrayDesignDetails;
import gov.nih.nci.caarray.domain.data.AbstractArrayData;
import gov.nih.nci.caarray.domain.data.DataSet;
import gov.nih.nci.caarray.domain.data.RawArrayData;
import gov.nih.nci.cagrid.caarray.stubs.CaArraySvcPortType;
import gov.nih.nci.cagrid.caarray.stubs.service.CaArraySvcServiceAddressingLocator;
import gov.nih.nci.cagrid.caarray.common.CaArraySvcI;
import gov.nih.nci.cagrid.cqlquery.CQLQuery;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security metadata description
 * which it will use to configure the Stub specifically for each method call.
 *
 * @created by Introduce Toolkit version 1.1
 */
public class CaArraySvcClient extends ServiceSecurityClient implements CaArraySvcI {
    protected CaArraySvcPortType portType;
    private Object portTypeMutex;

    public CaArraySvcClient(String url) throws MalformedURIException, RemoteException {
        this(url, null);
    }

    public CaArraySvcClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url, proxy);
        initialize();
    }

    public CaArraySvcClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr, null);
    }

    public CaArraySvcClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException,
            RemoteException {
        super(epr, proxy);
        initialize();
    }

    private void initialize() throws RemoteException {
        this.portTypeMutex = new Object();
        this.portType = createPortType();
    }

    private CaArraySvcPortType createPortType() throws RemoteException {

        CaArraySvcServiceAddressingLocator locator = new CaArraySvcServiceAddressingLocator();
        // attempt to load our context sensitive wsdd file
        InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
        if (resourceAsStream != null) {
            // we found it, so tell axis to configure an engine to use it
            EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
            // set the engine of the locator
            locator.setEngine(new AxisClient(engineConfig));
        }
        CaArraySvcPortType port = null;
        try {
            port = locator.getCaArraySvcPortTypePort(getEndpointReference());
        } catch (Exception e) {
            throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
        }

        return port;
    }

    public GetResourcePropertyResponse getResourceProperty(QName resourcePropertyQName) throws RemoteException {
        return portType.getResourceProperty(resourcePropertyQName);
    }

    public static void usage() {
        System.out.println(CaArraySvcClient.class.getName() + " -url <service url>");
    }

    public static void main(String[] args) {
        System.out.println("Running the Grid Service Client");
        try {
            if (!(args.length < 2)) {
                if (args[0].equals("-url")) {
                    CaArraySvcClient client = new CaArraySvcClient(args[1]);
                    // place client calls here if you want to use this main as a
                    // test....

                    //SMOKE: test the echo() service method
                    System.out.println(client.echo("steve was here"));

                    /*
                    //SMOKE: test the query() data service method
                    CQLQuery query = new CQLQuery();
                    gov.nih.nci.cagrid.cqlquery.Object target = new gov.nih.nci.cagrid.cqlquery.Object();
                    target.setName("gov.nih.nci.caarray.domain.protocol.Protocol");
                    query.setTarget(target);
                    CQLQueryResults queryResults = client.query(query);

                    Iterator iter = new CQLQueryResultsIterator(queryResults, CaArraySvcClient.class
                            .getResourceAsStream("client-config.wsdd"));
                    while (iter.hasNext()) {
                        Object object = iter.next();
                        System.out.println(object);
                    }
*/
                    //SMOKE: test the getDataSet() service method..
//                    DataSet dataSet = client.getDataSet(new RawArrayData());

                    // SMOKE: test the getDesignDetails
                    ArrayDesignDetails add = client.getDesignDetails(new ArrayDesign());
                    System.out.println("TCPTCP: " + add);

                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery)
            throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType,
            gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "query");
            gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
            gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
            cqlQueryContainer.setCQLQuery(cqlQuery);
            params.setCqlQuery(cqlQueryContainer);
            gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);
            return boxedResult.getCQLQueryResultCollection();
        }
    }

    public gov.nih.nci.caarray.domain.array.ArrayDesignDetails getDesignDetails(
            gov.nih.nci.caarray.domain.array.ArrayDesign arrayDesign) throws RemoteException {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "getDesignDetails");
            gov.nih.nci.cagrid.caarray.stubs.GetDesignDetailsRequest params = new gov.nih.nci.cagrid.caarray.stubs.GetDesignDetailsRequest();
            gov.nih.nci.cagrid.caarray.stubs.GetDesignDetailsRequestArrayDesign arrayDesignContainer = new gov.nih.nci.cagrid.caarray.stubs.GetDesignDetailsRequestArrayDesign();
            arrayDesignContainer.setArrayDesign(arrayDesign);
            params.setArrayDesign(arrayDesignContainer);
            gov.nih.nci.cagrid.caarray.stubs.GetDesignDetailsResponse boxedResult = portType.getDesignDetails(params);
            return boxedResult.getArrayDesignDetails();
        }
    }

    public gov.nih.nci.caarray.domain.data.DataSet getDataSet(
            gov.nih.nci.caarray.domain.data.AbstractArrayData abstractArrayData) throws RemoteException {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "getDataSet");
            gov.nih.nci.cagrid.caarray.stubs.GetDataSetRequest params = new gov.nih.nci.cagrid.caarray.stubs.GetDataSetRequest();
            gov.nih.nci.cagrid.caarray.stubs.GetDataSetRequestAbstractArrayData abstractArrayDataContainer = new gov.nih.nci.cagrid.caarray.stubs.GetDataSetRequestAbstractArrayData();
            abstractArrayDataContainer.setAbstractArrayData(abstractArrayData);
            params.setAbstractArrayData(abstractArrayDataContainer);
            gov.nih.nci.cagrid.caarray.stubs.GetDataSetResponse boxedResult = portType.getDataSet(params);
            return boxedResult.getDataSet();
        }
    }

    public java.lang.String echo(java.lang.String string) throws RemoteException {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "echo");
            gov.nih.nci.cagrid.caarray.stubs.EchoRequest params = new gov.nih.nci.cagrid.caarray.stubs.EchoRequest();
            params.setString(string);
            gov.nih.nci.cagrid.caarray.stubs.EchoResponse boxedResult = portType.echo(params);
            return boxedResult.getResponse();
        }
    }

}
