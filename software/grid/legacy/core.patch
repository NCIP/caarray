Index: src/java/gov/nih/nci/cagrid/encoding/SDKSerializerFactory.java
===================================================================
--- src/java/gov/nih/nci/cagrid/encoding/SDKSerializerFactory.java	(revision 18707)
+++ src/java/gov/nih/nci/cagrid/encoding/SDKSerializerFactory.java	(working copy)
@@ -16,4 +16,8 @@
 		super(SDKSerializer.class, xmlType, javaType);
 		LOG.debug("Initializing SDKSerializerFactory for class:" + javaType + " and QName:" + xmlType);
 	}
+
+    public static SDKSerializerFactory create(Class clazz, QName xmlType) {
+        return new SDKSerializerFactory(clazz, xmlType);
+    }
 }
Index: src/java/gov/nih/nci/cagrid/encoding/EncodingUtils.java
===================================================================
--- src/java/gov/nih/nci/cagrid/encoding/EncodingUtils.java	(revision 18707)
+++ src/java/gov/nih/nci/cagrid/encoding/EncodingUtils.java	(working copy)
@@ -42,6 +42,10 @@
             public InputSource resolveEntity(String publicId, String systemId) {
                 if (publicId.equals(CASTOR_MAPPING_DTD_ENTITY)) {
                     InputStream in = ClassUtils.getResourceAsStream(EncodingUtils.class, CASTOR_MAPPING_DTD);
+                    if (in == null) {
+                        LOG.debug("Unable to resolve entity.  Falling back to default resolution for: " + systemId);
+                        return null;
+                    }
                     return new InputSource(in);
                 }
                 return null;
Index: src/java/gov/nih/nci/cagrid/encoding/SDKDeserializerFactory.java
===================================================================
--- src/java/gov/nih/nci/cagrid/encoding/SDKDeserializerFactory.java	(revision 18707)
+++ src/java/gov/nih/nci/cagrid/encoding/SDKDeserializerFactory.java	(working copy)
@@ -16,4 +16,8 @@
 		super(SDKDeserializer.class, xmlType, javaType);
 		LOG.debug("Initializing SDKDeserializerFactory for class:" + javaType + " and QName:" + xmlType);
 	}
+
+    public static SDKDeserializerFactory create(Class clazz, QName xmlType) {
+        return new SDKDeserializerFactory(clazz, xmlType);
+    }
 }
