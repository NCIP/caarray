package gov.nih.nci.caarray.services.external.v1_0.grid.common;

import java.rmi.RemoteException;

/** 
 * This class is autogenerated, DO NOT EDIT.
 * 
 * This interface represents the API which is accessable on the grid service from the client. 
 * 
 * @created by Introduce Toolkit version 1.2
 * 
 */
public interface CaArraySvc_v1_0I {

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException ;

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException ;

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException ;

  /**
   * Retrieves all organisms in the system
   *
   */
  public gov.nih.nci.caarray.external.v1_0.experiment.Organism[] getAllOrganisms() throws RemoteException ;

  /**
   * Search for experiments matching given criteria
   *
   * @param criteria
   */
  public gov.nih.nci.caarray.external.v1_0.experiment.Experiment[] searchForExperiments(gov.nih.nci.caarray.external.v1_0.query.ExperimentSearchCriteria criteria) throws RemoteException ;

  /**
   * return list of all persons who are principal investigators for some experiment
   *
   */
  public gov.nih.nci.caarray.external.v1_0.experiment.Person[] getAllPrincipalInvestigators() throws RemoteException ;

  /**
   * Return list of all file types
   *
   */
  public gov.nih.nci.caarray.external.v1_0.data.FileType[] getAllFileTypes() throws RemoteException ;

  /**
   * return entity with given reference
   *
   * @param reference
   */
  public gov.nih.nci.caarray.external.v1_0.AbstractCaArrayEntity getByReference(gov.nih.nci.caarray.external.v1_0.CaArrayEntityReference reference) throws RemoteException ;

  /**
   * get a list of entities for the given list of references
   *
   * @param references
   */
  public gov.nih.nci.caarray.external.v1_0.AbstractCaArrayEntity[] getByReferences(gov.nih.nci.caarray.external.v1_0.CaArrayEntityReference[] references) throws RemoteException ;

  /**
   * Implements enumeration of organisms
   *
   */
  public gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer enumerateOrganisms() throws RemoteException ;

  /**
   * Begin an enumeration of experiments matching given criteria
   *
   * @param experimentSearchCriteria
   */
  public gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer enumerateExperiments(gov.nih.nci.caarray.external.v1_0.query.ExperimentSearchCriteria experimentSearchCriteria) throws RemoteException ;

  /**
   * Returns a grid transfer reference which will retrieve the zip of all the files included in the download
   *
   * @param fileDownloadRequest
   * @param compressIndividually
   */
  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference getFileContentsZipTransfer(gov.nih.nci.caarray.external.v1_0.query.FileDownloadRequest fileDownloadRequest,boolean compressIndividually) throws RemoteException ;

  /**
   * Returns an array of file content transfers for all files in the given request
   *
   * @param fileDownloadRequest
   * @param compress
   */
  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference[] getFileContentsTransfers(gov.nih.nci.caarray.external.v1_0.query.FileDownloadRequest fileDownloadRequest,boolean compress) throws RemoteException ;

  /**
   * Creates an enumeration that will return the file contents of the given files, using base 64 encoding
   *
   * @param fileDownloadRequest
   * @param compress
   */
  public gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer enumerateFileContents(gov.nih.nci.caarray.external.v1_0.query.FileDownloadRequest fileDownloadRequest,boolean compress) throws RemoteException ;

  /**
   * Returns an enumeration that will return transfer context service references for each file in the request
   *
   * @param fileDownloadRequest
   * @param compress
   */
  public gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer enumerateFileContentTransfers(gov.nih.nci.caarray.external.v1_0.query.FileDownloadRequest fileDownloadRequest,boolean compress) throws RemoteException ;

  /**
   * Returns a grid transfer reference for retrieving the given reference
   *
   * @param fileRef
   * @param compress
   */
  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference getFileContentsTransfer(gov.nih.nci.caarray.external.v1_0.CaArrayEntityReference fileRef,boolean compress) throws RemoteException ;

  /**
   * Returns the file meta data and contents of the file identified by the given reference
   *
   * @param fileRef
   * @param compress
   * @throws FileSizeTooBigException
   *	
   */
  public gov.nih.nci.caarray.external.v1_0.data.DataFileContents getFileContents(gov.nih.nci.caarray.external.v1_0.CaArrayEntityReference fileRef,boolean compress) throws RemoteException, gov.nih.nci.caarray.services.external.v1_0.grid.stubs.types.FileSizeTooBigException ;

  /**
   * REtrieves a parsed data set
   *
   * @param dataSetRequest
   */
  public gov.nih.nci.caarray.external.v1_0.data.DataSet getDataSet(gov.nih.nci.caarray.external.v1_0.query.DataSetRequest dataSetRequest) throws RemoteException ;

  /**
   * The standard caGrid Data Service query method.
   *
   * @param cqlQuery
   *	The CQL query to be executed against the data source.
   * @return The result of executing the CQL query against the data source.
   * @throws QueryProcessingException
   *	Thrown when an error occurs in processing a CQL query
   * @throws MalformedQueryException
   *	Thrown when a query is found to be improperly formed
   */
  public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType ;

}

