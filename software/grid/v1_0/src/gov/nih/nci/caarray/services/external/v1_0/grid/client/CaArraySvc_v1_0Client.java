package gov.nih.nci.caarray.services.external.v1_0.grid.client;

import gov.nih.nci.caarray.external.v1_0.CaArrayEntityReference;
import gov.nih.nci.caarray.external.v1_0.data.AbstractDataColumn;
import gov.nih.nci.caarray.external.v1_0.data.DataFileContents;
import gov.nih.nci.caarray.external.v1_0.data.DataSet;
import gov.nih.nci.caarray.external.v1_0.data.HybridizationData;
import gov.nih.nci.caarray.external.v1_0.data.QuantitationType;
import gov.nih.nci.caarray.external.v1_0.experiment.Experiment;
import gov.nih.nci.caarray.external.v1_0.experiment.Organism;
import gov.nih.nci.caarray.external.v1_0.query.DataSetRequest;
import gov.nih.nci.caarray.external.v1_0.query.ExperimentSearchCriteria;
import gov.nih.nci.caarray.external.v1_0.query.FileDownloadRequest;
import gov.nih.nci.caarray.services.external.v1_0.grid.common.CaArraySvc_v1_0I;
import gov.nih.nci.caarray.services.external.v1_0.grid.stubs.types.FileSizeTooBigException;
import gov.nih.nci.cagrid.cqlquery.CQLQuery;
import gov.nih.nci.cagrid.cqlquery.Object;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;
import gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer;
import gov.nih.nci.cagrid.wsenum.utils.EnumerationResponseHelper;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.NoSuchElementException;
import java.util.zip.GZIPInputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import javax.xml.soap.SOAPElement;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.time.StopWatch;
import org.cagrid.transfer.context.client.TransferServiceContextClient;
import org.cagrid.transfer.context.client.helper.TransferClientHelper;
import org.cagrid.transfer.context.stubs.types.TransferServiceContextReference;
import org.cagrid.transfer.descriptor.DataTransferDescriptor;
import org.globus.gsi.GlobusCredential;
import org.globus.ws.enumeration.ClientEnumIterator;
import org.globus.ws.enumeration.IterationConstraints;
import org.globus.wsrf.encoding.ObjectDeserializer;
/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class CaArraySvc_v1_0Client extends CaArraySvc_v1_0ClientBase implements CaArraySvc_v1_0I {	

	public CaArraySvc_v1_0Client(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public CaArraySvc_v1_0Client(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public CaArraySvc_v1_0Client(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public CaArraySvc_v1_0Client(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(CaArraySvc_v1_0Client.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  CaArraySvc_v1_0Client client = new CaArraySvc_v1_0Client(args[1]);

              StopWatch sw = new StopWatch();

			  EnumerationResponseContainer orgEnum = client.enumerateOrganisms();
			  ClientEnumIterator iter = EnumerationResponseHelper.createClientIterator(
			          orgEnum, CaArraySvc_v1_0Client.class.getResourceAsStream("client-config.wsdd"));
			  IterationConstraints ic = new IterationConstraints(10, -1, null);
			  iter.setIterationConstraints(ic);
			  while (iter.hasNext()) {
			      try {
                    SOAPElement elem = (SOAPElement) iter.next();
                      if (elem != null) {
                          java.lang.Object o = ObjectDeserializer.toObject(elem, Organism.class);
                          System.out.println("Next organism: " + o);
                      }
                } catch (NoSuchElementException e) {
                    break;
                }
			  }
			  
              CQLQuery cqlQuery = new CQLQuery();

              Object target = new Object();
              cqlQuery.setTarget(target);

              target.setName(QuantitationType.class.getName());

              CQLQueryResults results = client.query(cqlQuery);
              CQLQueryResultsIterator resultsIter = new CQLQueryResultsIterator(results, CaArraySvc_v1_0Client.class.getResourceAsStream("client-config.wsdd"));
              while (resultsIter.hasNext()) {
                  QuantitationType qt = (QuantitationType) resultsIter.next();
                  System.out.println("Quantitation Type: " + qt);
              }
			  
			  if (false) {

			  ExperimentSearchCriteria experimentCrit = new ExperimentSearchCriteria();
			  experimentCrit.setTitle("dktest");
			  experimentCrit.getOrganisms().add(new CaArrayEntityReference("URN:LSID:gov.nih.nci.caarray.external.v1_0.experiment.Organism:1"));

			  EnumerationResponseContainer expEnum = client.enumerateExperiments(experimentCrit);
              iter = EnumerationResponseHelper.createClientIterator(expEnum,
                            CaArraySvc_v1_0Client.class.getResourceAsStream("client-config.wsdd"));
              ic = new IterationConstraints(5, -1, null);
              iter.setIterationConstraints(ic);
              while (iter.hasNext()) {
                  try {
                    SOAPElement elem = (SOAPElement) iter.next();
                      if (elem != null) {
                          java.lang.Object o = ObjectDeserializer.toObject(elem, Experiment.class);
                          System.out.println("Next experiment: " + o);
                      }
                } catch (NoSuchElementException e) {
                    break;
                }
              }
              
              FileDownloadRequest fileReq = new FileDownloadRequest();
              CaArrayEntityReference fileRef1 = new CaArrayEntityReference("URN:LSID:caarray.nci.nih.gov:gov.nih.nci.caarray.external.v1_0.data.DataFile:8"); 
              CaArrayEntityReference fileRef2 = new CaArrayEntityReference("URN:LSID:caarray.nci.nih.gov:gov.nih.nci.caarray.external.v1_0.data.DataFile:9"); 
              CaArrayEntityReference fileRef3 = new CaArrayEntityReference("URN:LSID:caarray.nci.nih.gov:gov.nih.nci.caarray.external.v1_0.data.DataFile:10"); 
              fileReq.getFiles().add(fileRef1);
              fileReq.getFiles().add(fileRef2);
              fileReq.getFiles().add(fileRef3);
              
              // single ref, uncompressed
              System.out.println("Retrieving one file using uncompressed transfer ref");
              sw.start();
              TransferServiceContextReference transferRef = client.getFileContentsTransfer(fileRef1, false);
              if (transferRef != null) {
                  logAndSaveFile(transferRef, false);
              }
              sw.stop();
              System.out.println("Time: " + sw.toString());

              // single DFContents, uncompressed
              System.out.println("Retrieving one file using uncompressed base64");
              sw.reset();
              try {
                sw.start();
                  DataFileContents contents = client.getFileContents(fileRef1, false);
                  if (contents != null) {
                      logAndSaveFile(contents);
                  }
            } catch (FileSizeTooBigException e1) {
                System.out.println(String.format(
                                "File size too big to retrieve w/out transfer: max %s, actual %s", FileUtils
                                        .byteCountToDisplaySize(e1.getMaxAllowedSize()), FileUtils
                                        .byteCountToDisplaySize(e1.getActualSize())));
            }
              sw.stop();
              System.out.println("Time: " + sw.toString());

              // single DFContents, compressed
              System.out.println("Retrieving one file using compressed base64");
              sw.reset();
              sw.start();
              try {
                  DataFileContents compressedContents = client.getFileContents(fileRef1, false);
                  if (compressedContents != null) {
                      logAndSaveFile(compressedContents);
                  }
              } catch (FileSizeTooBigException e1) {
                  System.out.println(String.format(
                          "File size too big to retrieve w/out transfer: max %s, actual %s", FileUtils
                                  .byteCountToDisplaySize(e1.getMaxAllowedSize()), FileUtils
                                  .byteCountToDisplaySize(e1.getActualSize())));
              }
              sw.stop();
              System.out.println("Time: " + sw.toString());

              //zip, compression in ZIP
              System.out.println("Retrieving files using ZIP of files, compressing overall zip");
              sw.reset();
              sw.start();
              TransferServiceContextReference zipRef = client.getFileContentsZipTransfer(fileReq, false);
              if (zipRef != null) {
                  TransferServiceContextClient zipTransferClient = new TransferServiceContextClient(zipRef.getEndpointReference());
                  //use the TransferClientHelper to get an InputStream to the data
                  ZipInputStream zis = new ZipInputStream(TransferClientHelper.getData(zipTransferClient.getDataTransferDescriptor()));
                  ZipEntry entry = zis.getNextEntry();              
                  while (entry != null && zis.available() > 0) {
                       System.out.println("Contents of file " + entry.getName() + ", size " + entry.getSize());
                       saveFile(zis, false, false);
                       entry = zis.getNextEntry();
                  }
                  zis.close();                  
              }
              sw.stop();
              System.out.println("Time: " + sw.toString());

              //zip, compression in individual files
              System.out.println("Retrieving files using ZIP of files, individual files");
              sw.reset();
              sw.start();
              zipRef = client.getFileContentsZipTransfer(fileReq, true);
              if (zipRef != null) {
                  TransferServiceContextClient zipTransferClient = new TransferServiceContextClient(zipRef.getEndpointReference());
                  //use the TransferClientHelper to get an InputStream to the data
                  ZipInputStream zis = new ZipInputStream(TransferClientHelper.getData(zipTransferClient.getDataTransferDescriptor()));
                  ZipEntry entry = zis.getNextEntry();              
                  while (entry != null && zis.available() > 0) {
                       System.out.println("Contents of file " + entry.getName() + ", size " + entry.getSize());
                       GZIPInputStream gzis = new GZIPInputStream(zis);
                       saveFile(gzis, false, false);
                       entry = zis.getNextEntry();
                  }
                  zis.close();                  
              }
              sw.stop();
              System.out.println("Time: " + sw.toString());

              // array of references, uncompressed
              System.out.println("Retrieving files using array of uncompressed transfer refs");
              sw.reset();
              sw.start();
              TransferServiceContextReference[] transferRefs = client.getFileContentsTransfers(fileReq, false);
              for (TransferServiceContextReference tref : transferRefs) {
                  logAndSaveFile(tref, false);
              }
              sw.stop();
              System.out.println("Time: " + sw.toString());

              // array of references, compressed
              System.out.println("Retrieving files using array of compressed transfer refs");
              sw.reset();
              sw.start();
              transferRefs = client.getFileContentsTransfers(fileReq, true);
              for (TransferServiceContextReference tref : transferRefs) {
                  logAndSaveFile(tref, true);
              }
              sw.stop();
              System.out.println("Time: " + sw.toString());
              
              // enumeration of uncompressed refs
              System.out.println("Retrieving files using enumeration of uncompressed transfer refs");
              sw.reset();
              sw.start();
              EnumerationResponseContainer transferEnum = client.enumerateFileContentTransfers(fileReq, false);
              ClientEnumIterator transferIter = EnumerationResponseHelper.createClientIterator(transferEnum,
                            CaArraySvc_v1_0Client.class.getResourceAsStream("client-config.wsdd"));
              transferIter.setIterationConstraints(new IterationConstraints(1, -1, null));
              while (transferIter.hasNext()) {
                  try {
                    SOAPElement elem = (SOAPElement) transferIter.next();
                      if (elem != null) {
                          TransferServiceContextReference tref = (TransferServiceContextReference) ObjectDeserializer
                                        .toObject(elem, TransferServiceContextReference.class);
                          logAndSaveFile(tref, false);
                      }
                } catch (NoSuchElementException e) {
                    break;
                }
              }
              sw.stop();
              System.out.println("Time: " + sw.toString());

              // enumeration of compressed refs
              System.out.println("Retrieving files using enumeration of compressed transfer refs");
              sw.reset();
              sw.start();
              transferEnum = client.enumerateFileContentTransfers(fileReq, true);
              transferIter = EnumerationResponseHelper.createClientIterator(transferEnum,
                            CaArraySvc_v1_0Client.class.getResourceAsStream("client-config.wsdd"));
              transferIter.setIterationConstraints(new IterationConstraints(1, -1, null));
              while (transferIter.hasNext()) {
                  try {
                    SOAPElement elem = (SOAPElement) transferIter.next();
                      if (elem != null) {
                          TransferServiceContextReference tref = (TransferServiceContextReference) ObjectDeserializer
                                        .toObject(elem, TransferServiceContextReference.class);
                          logAndSaveFile(tref, true);
                      }
                } catch (NoSuchElementException e) {
                    break;
                }
              }
              sw.stop();
              System.out.println("Time: " + sw.toString());

              // enumeration of uncompressed DFContents
              System.out.println("Retrieving files using enumeration of uncompressed file contents");
              sw.reset();
              sw.start();
              EnumerationResponseContainer contentsEnum = client.enumerateFileContents(fileReq, false);
              ClientEnumIterator contentsIter = EnumerationResponseHelper.createClientIterator(contentsEnum,
                            CaArraySvc_v1_0Client.class.getResourceAsStream("client-config.wsdd"));
              contentsIter.setIterationConstraints(new IterationConstraints(1, -1, null));
              while (contentsIter.hasNext()) {
                  try {
                    SOAPElement elem = (SOAPElement) contentsIter.next();
                    if (elem != null) {
                          DataFileContents data = (DataFileContents) ObjectDeserializer.toObject(elem, DataFileContents.class);
                          logAndSaveFile(data);
                    }
                } catch (NoSuchElementException e) {
                    break;
                }
              }
              sw.stop();
              System.out.println("Time: " + sw.toString());

              // enumeration of compressed DFContents
              System.out.println("Retrieving files using enumeration of compressed file contents");
              sw.reset();
              sw.start();
              contentsEnum = client.enumerateFileContents(fileReq, true);
              contentsIter = EnumerationResponseHelper.createClientIterator(contentsEnum,
                            CaArraySvc_v1_0Client.class.getResourceAsStream("client-config.wsdd"));
              contentsIter.setIterationConstraints(new IterationConstraints(1, -1, null));
              while (contentsIter.hasNext()) {
                  try {
                    SOAPElement elem = (SOAPElement) contentsIter.next();
                    if (elem != null) {
                          DataFileContents data = (DataFileContents) ObjectDeserializer.toObject(elem, DataFileContents.class);
                          logAndSaveFile(data);
                    }
                } catch (NoSuchElementException e) {
                    break;
                }
              }
              sw.stop();
              System.out.println("Time: " + sw.toString());
			  }
			  
              DataSetRequest dataRequest = new DataSetRequest();
              CaArrayEntityReference fileRef5 = new CaArrayEntityReference("URN:LSID:caarray.nci.nih.gov:gov.nih.nci.caarray.external.v1_0.data.DataFile:22"); 
              CaArrayEntityReference fileRef6 = new CaArrayEntityReference("URN:LSID:caarray.nci.nih.gov:gov.nih.nci.caarray.external.v1_0.data.DataFile:23"); 
              dataRequest.getDataFiles().add(fileRef5);
              dataRequest.getDataFiles().add(fileRef6);
              
              for (int i = 1; i <= 11; i++) {
                  CaArrayEntityReference qRef = new CaArrayEntityReference("URN:LSID:caarray.nci.nih.gov:gov.nih.nci.caarray.external.v1_0.data.QuantitationType:" + i);                                 
                  dataRequest.getQuantitationTypes().add(qRef);
              }
              
              sw.reset();
              sw.start();
              DataSet dataSet = client.getDataSet(dataRequest);
              sw.stop();
              System.out.println("Time: " + sw.toString());
              
              System.out.println("Design element list: " + dataSet.getDesignElements());
              System.out.println("Quantitation types: " + dataSet.getQuantitationTypes());
              for (HybridizationData hdata : dataSet.getDatas()) {
                  //System.out.println("Data for hyb " + hdata.getHybridization().getName());
                  System.out.println("Hybdata ");
                  for (AbstractDataColumn dataColumn : hdata.getDataColumns()) {
                      System.out.println("Data column: " + dataColumn);
                  }
              }
              
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}
	
	private static void logAndSaveFile(TransferServiceContextReference transferRef, boolean compressed) throws Exception {
        TransferServiceContextClient tclient = new TransferServiceContextClient(transferRef.getEndpointReference());
        DataTransferDescriptor dtd = tclient.getDataTransferDescriptor();
        System.out.println("Contents of file " + dtd.getDataDescriptor().getName() + ", size "
                + FileUtils.byteCountToDisplaySize((Long) dtd.getDataDescriptor().getMetadata()));
        saveFile(TransferClientHelper.getData(dtd), compressed, true);
	}
	
	   private static void logAndSaveFile(DataFileContents fileContents) throws Exception {
           System.out.println("Contents of file " + fileContents.getFileMetadata().getName() + ", size "
                   + FileUtils.byteCountToDisplaySize(fileContents.getFileMetadata().getUncompressedSize()));
           saveFile(new ByteArrayInputStream(fileContents.getContents()), fileContents.isCompressed(), true);
	    }
	   
	   private static void saveFile(InputStream fileData, boolean compressed, boolean close) throws IOException {
	       InputStream in = fileData;
           if (compressed) {
               in = new GZIPInputStream(in);               
           }
           File temp = File.createTempFile("retrieved", null);
           FileOutputStream fos = FileUtils.openOutputStream(temp);
           IOUtils.copy(fileData, fos);
           System.out.println();
           System.out.println();
           if (close) {
               fileData.close();                             
           }
           fos.close();	       
	   }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public gov.nih.nci.caarray.external.v1_0.experiment.Organism[] getAllOrganisms() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getAllOrganisms");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetAllOrganismsRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetAllOrganismsRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetAllOrganismsResponse boxedResult = portType.getAllOrganisms(params);
    return boxedResult.getOrganism();
    }
  }

  public gov.nih.nci.caarray.external.v1_0.experiment.Experiment[] searchForExperiments(gov.nih.nci.caarray.external.v1_0.query.ExperimentSearchCriteria criteria) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"searchForExperiments");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.SearchForExperimentsRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.SearchForExperimentsRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.SearchForExperimentsRequestCriteria criteriaContainer = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.SearchForExperimentsRequestCriteria();
    criteriaContainer.setExperimentSearchCriteria(criteria);
    params.setCriteria(criteriaContainer);
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.SearchForExperimentsResponse boxedResult = portType.searchForExperiments(params);
    return boxedResult.getExperiment();
    }
  }

  public gov.nih.nci.caarray.external.v1_0.experiment.Person[] getAllPrincipalInvestigators() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getAllPrincipalInvestigators");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetAllPrincipalInvestigatorsRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetAllPrincipalInvestigatorsRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetAllPrincipalInvestigatorsResponse boxedResult = portType.getAllPrincipalInvestigators(params);
    return boxedResult.getPerson();
    }
  }

  public gov.nih.nci.caarray.external.v1_0.data.FileType[] getAllFileTypes() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getAllFileTypes");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetAllFileTypesRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetAllFileTypesRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetAllFileTypesResponse boxedResult = portType.getAllFileTypes(params);
    return boxedResult.getFileType();
    }
  }

  public gov.nih.nci.caarray.external.v1_0.AbstractCaArrayEntity getByReference(gov.nih.nci.caarray.external.v1_0.CaArrayEntityReference reference) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getByReference");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetByReferenceRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetByReferenceRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetByReferenceRequestReference referenceContainer = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetByReferenceRequestReference();
    referenceContainer.setCaArrayEntityReference(reference);
    params.setReference(referenceContainer);
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetByReferenceResponse boxedResult = portType.getByReference(params);
    return boxedResult.getAbstractCaArrayEntity();
    }
  }

  public gov.nih.nci.caarray.external.v1_0.AbstractCaArrayEntity[] getByReferences(gov.nih.nci.caarray.external.v1_0.CaArrayEntityReference[] references) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getByReferences");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetByReferencesRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetByReferencesRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetByReferencesRequestReferences referencesContainer = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetByReferencesRequestReferences();
    referencesContainer.setCaArrayEntityReference(references);
    params.setReferences(referencesContainer);
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetByReferencesResponse boxedResult = portType.getByReferences(params);
    return boxedResult.getAbstractCaArrayEntity();
    }
  }

  public gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer enumerateOrganisms() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"enumerateOrganisms");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateOrganismsRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateOrganismsRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateOrganismsResponse boxedResult = portType.enumerateOrganisms(params);
    return boxedResult.getEnumerationResponseContainer();
    }
  }

  public gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer enumerateExperiments(gov.nih.nci.caarray.external.v1_0.query.ExperimentSearchCriteria experimentSearchCriteria) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"enumerateExperiments");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateExperimentsRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateExperimentsRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateExperimentsRequestExperimentSearchCriteria experimentSearchCriteriaContainer = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateExperimentsRequestExperimentSearchCriteria();
    experimentSearchCriteriaContainer.setExperimentSearchCriteria(experimentSearchCriteria);
    params.setExperimentSearchCriteria(experimentSearchCriteriaContainer);
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateExperimentsResponse boxedResult = portType.enumerateExperiments(params);
    return boxedResult.getEnumerationResponseContainer();
    }
  }

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference getFileContentsZipTransfer(gov.nih.nci.caarray.external.v1_0.query.FileDownloadRequest fileDownloadRequest,boolean compressIndividually) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getFileContentsZipTransfer");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsZipTransferRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsZipTransferRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsZipTransferRequestFileDownloadRequest fileDownloadRequestContainer = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsZipTransferRequestFileDownloadRequest();
    fileDownloadRequestContainer.setFileDownloadRequest(fileDownloadRequest);
    params.setFileDownloadRequest(fileDownloadRequestContainer);
    params.setCompressIndividually(compressIndividually);
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsZipTransferResponse boxedResult = portType.getFileContentsZipTransfer(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference[] getFileContentsTransfers(gov.nih.nci.caarray.external.v1_0.query.FileDownloadRequest fileDownloadRequest,boolean compress) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getFileContentsTransfers");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsTransfersRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsTransfersRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsTransfersRequestFileDownloadRequest fileDownloadRequestContainer = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsTransfersRequestFileDownloadRequest();
    fileDownloadRequestContainer.setFileDownloadRequest(fileDownloadRequest);
    params.setFileDownloadRequest(fileDownloadRequestContainer);
    params.setCompress(compress);
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsTransfersResponse boxedResult = portType.getFileContentsTransfers(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

  public gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer enumerateFileContents(gov.nih.nci.caarray.external.v1_0.query.FileDownloadRequest fileDownloadRequest,boolean compress) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"enumerateFileContents");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateFileContentsRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateFileContentsRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateFileContentsRequestFileDownloadRequest fileDownloadRequestContainer = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateFileContentsRequestFileDownloadRequest();
    fileDownloadRequestContainer.setFileDownloadRequest(fileDownloadRequest);
    params.setFileDownloadRequest(fileDownloadRequestContainer);
    params.setCompress(compress);
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateFileContentsResponse boxedResult = portType.enumerateFileContents(params);
    return boxedResult.getEnumerationResponseContainer();
    }
  }

  public gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer enumerateFileContentTransfers(gov.nih.nci.caarray.external.v1_0.query.FileDownloadRequest fileDownloadRequest,boolean compress) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"enumerateFileContentTransfers");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateFileContentTransfersRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateFileContentTransfersRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateFileContentTransfersRequestFileDownloadRequest fileDownloadRequestContainer = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateFileContentTransfersRequestFileDownloadRequest();
    fileDownloadRequestContainer.setFileDownloadRequest(fileDownloadRequest);
    params.setFileDownloadRequest(fileDownloadRequestContainer);
    params.setCompress(compress);
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.EnumerateFileContentTransfersResponse boxedResult = portType.enumerateFileContentTransfers(params);
    return boxedResult.getEnumerationResponseContainer();
    }
  }

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference getFileContentsTransfer(gov.nih.nci.caarray.external.v1_0.CaArrayEntityReference fileRef,boolean compress) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getFileContentsTransfer");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsTransferRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsTransferRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsTransferRequestFileRef fileRefContainer = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsTransferRequestFileRef();
    fileRefContainer.setCaArrayEntityReference(fileRef);
    params.setFileRef(fileRefContainer);
    params.setCompress(compress);
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsTransferResponse boxedResult = portType.getFileContentsTransfer(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

  public gov.nih.nci.caarray.external.v1_0.data.DataFileContents getFileContents(gov.nih.nci.caarray.external.v1_0.CaArrayEntityReference fileRef,boolean compress) throws RemoteException, gov.nih.nci.caarray.services.external.v1_0.grid.stubs.types.FileSizeTooBigException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getFileContents");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsRequestFileRef fileRefContainer = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsRequestFileRef();
    fileRefContainer.setCaArrayEntityReference(fileRef);
    params.setFileRef(fileRefContainer);
    params.setCompress(compress);
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetFileContentsResponse boxedResult = portType.getFileContents(params);
    return boxedResult.getDataFileContents();
    }
  }

  public gov.nih.nci.caarray.external.v1_0.data.DataSet getDataSet(gov.nih.nci.caarray.external.v1_0.query.DataSetRequest dataSetRequest) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getDataSet");
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetDataSetRequest params = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetDataSetRequest();
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetDataSetRequestDataSetRequest dataSetRequestContainer = new gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetDataSetRequestDataSetRequest();
    dataSetRequestContainer.setDataSetRequest(dataSetRequest);
    params.setDataSetRequest(dataSetRequestContainer);
    gov.nih.nci.caarray.services.external.v1_0.grid.stubs.GetDataSetResponse boxedResult = portType.getDataSet(params);
    return boxedResult.getDataSet();
    }
  }

  public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"query");
    gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
    gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
    cqlQueryContainer.setCQLQuery(cqlQuery);
    params.setCqlQuery(cqlQueryContainer);
    gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);
    return boxedResult.getCQLQueryResultCollection();
    }
  }

}
